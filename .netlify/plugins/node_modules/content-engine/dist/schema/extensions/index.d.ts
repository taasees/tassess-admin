import { GraphQLFieldConfigArgumentMap, GraphQLFieldConfig } from "graphql";
import { ComposeOutputType } from "graphql-compose";
export interface GraphQLFieldExtensionDefinition {
    name: string;
    type?: ComposeOutputType<any>;
    args?: GraphQLFieldConfigArgumentMap;
    extend(args: GraphQLFieldConfigArgumentMap, prevFieldConfig: GraphQLFieldConfig<any, any>): any;
}
declare const inferExtensionName = "infer";
declare const dontInferExtensionName = "dontInfer";
declare const builtInFieldExtensions: {
    dateformat: {
        name: string;
        description: string;
        args: {
            formatString: string;
            locale: string;
            fromNow: string;
            difference: string;
        };
        extend(args: any, fieldConfig: any): {
            args: Record<string, any>;
            resolve: (source: any, args: any, context: any, info: any) => Promise<string | number | (string | number)[] | null>;
        };
    };
    link: {
        name: string;
        description: string;
        args: {
            by: {
                type: string;
                defaultValue: string;
            };
            from: string;
            on: string;
            keepObjects: string;
        };
        extend(args: any, fieldConfig: any, schemaComposer: any): {
            resolve: any;
        };
    };
    fileByRelativePath: {
        name: string;
        description: string;
        args: {
            from: string;
        };
        extend(args: any, fieldConfig: any): {
            resolve: any;
        };
    };
    proxy: {
        name: string;
        description: string;
        args: {
            from: string;
            fromNode: {
                type: string;
                defaultValue: boolean;
            };
        };
        extend(options: any, fieldConfig: any): {
            resolve(source: any, args: any, context: any, info: any): any;
        };
    };
};
declare const internalExtensionNames: any[];
declare const reservedExtensionNames: any[];
declare const addDirectives: ({ schemaComposer, fieldExtensions }: {
    schemaComposer: any;
    fieldExtensions?: {} | undefined;
}) => void;
declare const processFieldExtensions: ({ fieldExtensions, schemaComposer, typeComposer, parentSpan, }: {
    fieldExtensions?: {} | undefined;
    schemaComposer: any;
    typeComposer: any;
    parentSpan: any;
}) => void;
export { addDirectives, builtInFieldExtensions, internalExtensionNames, processFieldExtensions, reservedExtensionNames, inferExtensionName, dontInferExtensionName, };
