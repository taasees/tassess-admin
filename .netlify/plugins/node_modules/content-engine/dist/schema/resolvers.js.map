{"version":3,"file":"resolvers.js","names":["getMaybeResolvedValue","node","field","nodeInterfaceName","pathObjectToPathString","path","fieldPathNeedToResolve","selector","type","getValueAt","getResolvedFields","keepNonMatches","findOne","typeName","findOneResolver","_source","args","context","info","stats","totalRunQuery","nodeModel","query","filter","schema","getType","tracer","findManyPaginated","findManyPaginatedResolver","group","getProjectedField","distinct","max","min","sum","skip","Math","limit","undefined","extendedArgs","totalPluralRunQuery","result","findAll","connectionType","paginate","resultOffset","createDistinctResolver","distinctResolver","source","edges","values","Set","forEach","value","Array","isArray","subValue","add","Date","toISOString","from","sort","createMinResolver","minResolver","Number","MAX_SAFE_INTEGER","isNaN","createMaxResolver","maxResolver","MIN_SAFE_INTEGER","createSumResolver","sumResolver","reduce","prev","createGroupResolver","groupResolver","groupedResults","acc","key","concat","Object","create","keys","fieldValue","entries","push","GatsbyIterable","totalCount","length","results","params","Error","allItems","start","items","slice","pageCount","count","ceil","currentPage","hasPreviousPage","hasNextPage","map","item","i","arr","next","previous","nodes","pageInfo","itemCount","perPage","link","options","by","fieldConfig","linkResolver","resolver","resolve","defaultFieldResolver","fieldValueOrPromise","fromNode","keepObjects","then","linkResolverValue","returnType","getNullableType","getNamedType","getNodesByIds","ids","id","getNodeById","runQueryArgs","split","reduceRight","obj","in","eq","firstOnly","GraphQLList","linkResolverQueryResult","queryResult","find","fileByPath","fileByPathResolver","parentFileNode","findRootNodeAncestor","internal","queryNodesByPath","relPaths","queryNodeByPath","relPath","absolutePath","normalize","systemPath","dir","fieldName","selectionSet","fieldNodes","getFieldNodeByNameInSelectionSet","isObjectType","isInterfaceType","getFields","fieldArg","arg","name","fieldTC","isEnumType","isInputObjectType","fieldNode","arguments","kind","Kind","ENUM","enumKey","enumValue","getValue","currentValue","OBJECT","fields","sortPath","join","selections","selection","FRAGMENT_SPREAD","fragmentDef","fragments","INLINE_FRAGMENT","val","property","WARNED_ABOUT_RESOLVERS","badResolverInvocationMessage","missingVar","resolverName","pathToArray","wrappingResolver","wrappedTracingResolver","parent","reporter","warn","activity","time","createResolverActivity","parentType","telemetryResolverTimings","process","hrtime","bigint","endActivity","duration","end","isTracingResolver","defaultResolver"],"sources":["../../src/schema/resolvers.ts"],"sourcesContent":["import systemPath from \"path\"\nimport normalize from \"normalize-path\"\nimport {\n  GraphQLList,\n  GraphQLType,\n  getNullableType,\n  getNamedType,\n  Kind,\n  GraphQLFieldConfig,\n  GraphQLResolveInfo,\n  isObjectType,\n  isInterfaceType,\n  isEnumType,\n  isInputObjectType,\n  SelectionSetNode,\n  SelectionNode,\n  FieldNode,\n} from \"graphql\"\nimport { Path } from \"graphql/jsutils/Path\"\nimport reporter from \"../reporter\"\nimport { pathToArray } from \"../query/utils\"\nimport { getValueAt } from \"../utils/get-value-at\"\nimport {\n  GatsbyResolver,\n  IGatsbyConnection,\n  IGatsbyResolverContext,\n} from \"./type-definitions\"\nimport { IGatsbyNode } from \"../redux/types\"\nimport { IQueryResult } from \"../datastore/types\"\nimport { GatsbyIterable } from \"../datastore/common/iterable\"\nimport {\n  getResolvedFields,\n  fieldPathNeedToResolve,\n  INestedPathStructureNode,\n  pathObjectToPathString,\n} from \"./utils\"\n\ntype ResolvedLink = IGatsbyNode | Array<IGatsbyNode> | null\n\ntype nestedListOfStrings = Array<string | nestedListOfStrings>\ntype nestedListOfNodes = Array<IGatsbyNode | nestedListOfNodes>\n\nexport function getMaybeResolvedValue(\n  node: IGatsbyNode,\n  field: string | INestedPathStructureNode,\n  nodeInterfaceName: string\n): any {\n  if (typeof field !== `string`) {\n    field = pathObjectToPathString(field).path\n  }\n\n  if (\n    fieldPathNeedToResolve({\n      selector: field,\n      type: nodeInterfaceName,\n    })\n  ) {\n    return getValueAt(\n      getResolvedFields(node) as Record<string, unknown>,\n      field,\n      { keepNonMatches: false }\n    )\n  } else {\n    return getValueAt(node, field, { keepNonMatches: false })\n  }\n}\n\nexport function findOne<TSource, TArgs>(\n  typeName: string\n): GatsbyResolver<TSource, TArgs> {\n  return function findOneResolver(_source, args, context, info): any {\n    if (context.stats) {\n      context.stats.totalRunQuery++\n    }\n    return context.nodeModel.findOne(\n      {\n        query: { filter: args },\n        type: info.schema.getType(typeName),\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path }\n    )\n  }\n}\n\ntype PaginatedArgs<TArgs> = TArgs & { skip?: number; limit?: number; sort: any }\n\nexport function findManyPaginated<TSource, TArgs>(\n  typeName: string\n): GatsbyResolver<TSource, PaginatedArgs<TArgs>> {\n  return async function findManyPaginatedResolver(\n    _source,\n    args,\n    context,\n    info\n  ): Promise<IGatsbyConnection<IGatsbyNode>> {\n    // Peek into selection set and pass on the `field` arg of `group` and\n    // `distinct` which might need to be resolved.\n    const group = getProjectedField(info, `group`)\n    const distinct = getProjectedField(info, `distinct`)\n    const max = getProjectedField(info, `max`)\n    const min = getProjectedField(info, `min`)\n    const sum = getProjectedField(info, `sum`)\n\n    // Apply paddings for pagination\n    // (for previous/next node and also to detect if there is a previous/next page)\n    const skip = typeof args.skip === `number` ? Math.max(0, args.skip - 1) : 0\n    const limit = typeof args.limit === `number` ? args.limit + 2 : undefined\n\n    const extendedArgs = {\n      ...args,\n      group: group || [],\n      distinct: distinct || [],\n      max: max || [],\n      min: min || [],\n      sum: sum || [],\n      skip,\n      limit,\n    }\n    // Note: stats are passed to telemetry in src/commands/build.ts\n    if (context.stats) {\n      context.stats.totalRunQuery++\n      context.stats.totalPluralRunQuery++\n    }\n    const result = await context.nodeModel.findAll(\n      {\n        query: extendedArgs,\n        type: info.schema.getType(typeName),\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path, connectionType: typeName }\n    )\n    return paginate(result, {\n      resultOffset: skip,\n      skip: args.skip,\n      limit: args.limit,\n    })\n  }\n}\n\ninterface IFieldConnectionArgs {\n  field: string | INestedPathStructureNode\n}\n\nexport function createDistinctResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<IGatsbyConnection<IGatsbyNode>, IFieldConnectionArgs> {\n  return function distinctResolver(source, args): Array<string> {\n    const { field } = args\n    const { edges } = source\n\n    const values = new Set<string>()\n    edges.forEach(({ node }) => {\n      const value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n      if (value === null || value === undefined) {\n        return\n      }\n      if (Array.isArray(value)) {\n        value.forEach(subValue =>\n          values.add(\n            subValue instanceof Date ? subValue.toISOString() : subValue\n          )\n        )\n      } else if (value instanceof Date) {\n        values.add(value.toISOString())\n      } else {\n        values.add(value)\n      }\n    })\n    return Array.from(values).sort()\n  }\n}\n\nexport function createMinResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<IGatsbyConnection<IGatsbyNode>, IFieldConnectionArgs> {\n  return function minResolver(source, args): number | null {\n    const { field } = args\n    const { edges } = source\n\n    let min = Number.MAX_SAFE_INTEGER\n\n    edges.forEach(({ node }) => {\n      let value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n\n      if (typeof value !== `number`) {\n        value = Number(value)\n      }\n      if (!isNaN(value) && value < min) {\n        min = value\n      }\n    })\n    if (min === Number.MAX_SAFE_INTEGER) {\n      return null\n    }\n    return min\n  }\n}\n\nexport function createMaxResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<IGatsbyConnection<IGatsbyNode>, IFieldConnectionArgs> {\n  return function maxResolver(source, args): number | null {\n    const { field } = args\n    const { edges } = source\n\n    let max = Number.MIN_SAFE_INTEGER\n\n    edges.forEach(({ node }) => {\n      let value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n      if (typeof value !== `number`) {\n        value = Number(value)\n      }\n      if (!isNaN(value) && value > max) {\n        max = value\n      }\n    })\n    if (max === Number.MIN_SAFE_INTEGER) {\n      return null\n    }\n    return max\n  }\n}\n\nexport function createSumResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<IGatsbyConnection<IGatsbyNode>, IFieldConnectionArgs> {\n  return function sumResolver(source, args): number | null {\n    const { field } = args\n    const { edges } = source\n\n    return edges.reduce<number | null>((prev, { node }) => {\n      let value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n\n      if (typeof value !== `number`) {\n        value = Number(value)\n      }\n      if (!isNaN(value)) {\n        return (prev || 0) + value\n      }\n      return prev\n    }, null)\n  }\n}\n\ntype IGatsbyGroupReturnValue<NodeType> = Array<\n  IGatsbyConnection<NodeType> & {\n    field: string\n    fieldValue: string | undefined\n  }\n>\n\nexport function createGroupResolver(\n  nodeInterfaceName: string\n): GatsbyResolver<\n  IGatsbyConnection<IGatsbyNode>,\n  PaginatedArgs<IFieldConnectionArgs>\n> {\n  return function groupResolver(\n    source,\n    args\n  ): IGatsbyGroupReturnValue<IGatsbyNode> {\n    const { field } = args\n    const { edges } = source\n    const groupedResults: Record<string, Array<IGatsbyNode>> = edges.reduce(\n      (acc, { node }) => {\n        const value = getMaybeResolvedValue(node, field, nodeInterfaceName)\n        const values = Array.isArray(value) ? value : [value]\n        values\n          .filter(value => value != null)\n          .forEach(value => {\n            const key = value instanceof Date ? value.toISOString() : value\n            acc[key] = (acc[key] || []).concat(node)\n          })\n        return acc\n        // Note: using Object.create on purpose:\n        //   object key may be arbitrary string including reserved words (i.e. `constructor`)\n        //   see: https://github.com/gatsbyjs/gatsby/issues/22508\n      },\n      Object.create(null)\n    )\n\n    return Object.keys(groupedResults)\n      .sort()\n      .reduce(\n        (acc: IGatsbyGroupReturnValue<IGatsbyNode>, fieldValue: string) => {\n          const entries = groupedResults[fieldValue] || []\n          acc.push({\n            ...paginate(\n              {\n                entries: new GatsbyIterable(entries),\n                totalCount: async () => entries.length,\n              },\n              args\n            ),\n            field:\n              typeof field === `string`\n                ? field\n                : pathObjectToPathString(field).path,\n            fieldValue,\n          })\n          return acc\n        },\n        []\n      )\n  }\n}\n\nexport function paginate(\n  results: IQueryResult,\n  params: { skip?: number; limit?: number; resultOffset?: number }\n): IGatsbyConnection<IGatsbyNode> {\n  const { resultOffset = 0, skip = 0, limit } = params\n  if (resultOffset > skip) {\n    throw new Error(\"Result offset cannot be greater than `skip` argument\")\n  }\n  const allItems = Array.from(results.entries)\n\n  const start = skip - resultOffset\n  const items = allItems.slice(start, limit && start + limit)\n\n  const totalCount = results.totalCount\n  const pageCount = async (): Promise<number> => {\n    const count = await totalCount()\n    return limit\n      ? Math.ceil(skip / limit) + Math.ceil((count - skip) / limit)\n      : skip\n      ? 2\n      : 1\n  }\n  const currentPage = limit ? Math.ceil(skip / limit) + 1 : skip ? 2 : 1\n  const hasPreviousPage = currentPage > 1\n  const hasNextPage = limit ? allItems.length - start > limit : false\n\n  return {\n    totalCount,\n    edges: items.map((item, i, arr) => {\n      return {\n        node: item,\n        next: arr[i + 1],\n        previous: arr[i - 1],\n      }\n    }),\n    nodes: items,\n    pageInfo: {\n      currentPage,\n      hasPreviousPage,\n      hasNextPage,\n      itemCount: items.length,\n      pageCount,\n      perPage: limit,\n      totalCount,\n    },\n  }\n}\n\nexport function link<TSource, TArgs>(\n  options: {\n    by: string\n    type?: GraphQLType\n    from?: string\n    fromNode?: boolean\n    keepObjects?: boolean\n  } = {\n    by: `id`,\n  },\n  fieldConfig: GraphQLFieldConfig<\n    TSource,\n    IGatsbyResolverContext<TSource, TArgs>,\n    TArgs\n  >\n): GatsbyResolver<TSource, TArgs> {\n  // Note: we explicitly make an attempt to prevent using the `async` keyword because often\n  //       it does not return a promise and this makes a significant difference at scale.\n\n  return function linkResolver(\n    source,\n    args,\n    context,\n    info\n  ): ResolvedLink | Promise<ResolvedLink> {\n    const resolver = fieldConfig.resolve || context.defaultFieldResolver\n\n    const fieldValueOrPromise = resolver(source, args, context, {\n      ...info,\n      from: options.from || info.from,\n      fromNode: options.from ? options.fromNode : info.fromNode,\n      keepObjects: options.keepObjects,\n    })\n\n    // Note: for this function, at scale, conditional .then is more efficient than generic await\n    if (typeof fieldValueOrPromise?.then === `function`) {\n      return fieldValueOrPromise.then(fieldValue =>\n        linkResolverValue(fieldValue, args, context, info)\n      )\n    }\n\n    return linkResolverValue(fieldValueOrPromise, args, context, info)\n  }\n\n  function linkResolverValue(\n    fieldValue,\n    args,\n    context,\n    info\n  ): ResolvedLink | Promise<ResolvedLink> {\n    if (fieldValue == null) {\n      return null\n    }\n\n    const returnType = getNullableType(options.type || info.returnType)\n    const type = getNamedType(returnType)\n\n    if (options.by === `id`) {\n      if (Array.isArray(fieldValue)) {\n        return context.nodeModel.getNodesByIds(\n          { ids: fieldValue, keepObjects: options.keepObjects, type: type },\n          { path: context.path }\n        )\n      } else {\n        const id =\n          fieldValue?.id || typeof fieldValue === `string`\n            ? fieldValue\n            : undefined\n\n        return (\n          context.nodeModel.getNodeById(\n            {\n              id,\n              type: type,\n            },\n            { path: context.path }\n          ) || (options.keepObjects ? fieldValue : null)\n        )\n      }\n    }\n\n    // Return early if fieldValue is [] since { in: [] } doesn't make sense\n    if (Array.isArray(fieldValue) && fieldValue.length === 0) {\n      return fieldValue\n    }\n\n    const runQueryArgs = args as TArgs & { filter: Record<string, any> }\n    runQueryArgs.filter = options.by.split(`.`).reduceRight(\n      (acc: Record<string, any>, key: string) => {\n        const obj = {}\n        obj[key] = acc\n        return obj\n      },\n      Array.isArray(fieldValue) ? { in: fieldValue } : { eq: fieldValue }\n    )\n\n    const firstOnly = !(returnType instanceof GraphQLList)\n\n    if (context.stats) {\n      context.stats.totalRunQuery++\n      if (firstOnly) {\n        context.stats.totalPluralRunQuery++\n      }\n    }\n\n    if (firstOnly) {\n      return context.nodeModel\n        .findOne(\n          {\n            query: runQueryArgs,\n            type,\n            stats: context.stats,\n            tracer: context.tracer,\n          },\n          { path: context.path }\n        )\n        .then(result => linkResolverQueryResult(fieldValue, result, returnType))\n    }\n\n    return context.nodeModel\n      .findAll(\n        {\n          query: runQueryArgs,\n          type,\n          stats: context.stats,\n          tracer: context.tracer,\n        },\n        { path: context.path }\n      )\n      .then(({ entries }) =>\n        linkResolverQueryResult(fieldValue, Array.from(entries), returnType)\n      )\n  }\n\n  function linkResolverQueryResult(\n    fieldValue,\n    queryResult,\n    returnType\n  ): IGatsbyNode | Array<IGatsbyNode> {\n    if (\n      returnType instanceof GraphQLList &&\n      Array.isArray(fieldValue) &&\n      Array.isArray(queryResult)\n    ) {\n      return fieldValue.map(value =>\n        queryResult.find(\n          obj =>\n            getValueAt(obj, options.by, { keepNonMatches: false }) === value\n        )\n      )\n    } else {\n      return queryResult\n    }\n  }\n}\n\nexport function fileByPath<TSource, TArgs>(\n  options: {\n    from?: string\n    fromNode?: boolean\n  } = {},\n  fieldConfig\n): GatsbyResolver<TSource, TArgs> {\n  return async function fileByPathResolver(\n    source,\n    args,\n    context,\n    info\n  ): Promise<IGatsbyNode | nestedListOfNodes | null> {\n    const resolver = fieldConfig.resolve || context.defaultFieldResolver\n    const fieldValue: nestedListOfStrings = await resolver(\n      source,\n      args,\n      context,\n      {\n        ...info,\n        from: options.from || info.from,\n        fromNode: options.from ? options.fromNode : info.fromNode,\n      }\n    )\n\n    if (fieldValue == null) {\n      return null\n    }\n\n    // Find the File node for this node (we assume the node is something\n    // like markdown which would be a child node of a File node).\n    const parentFileNode = context.nodeModel.findRootNodeAncestor(\n      source,\n      node => node.internal && node.internal.type === `File`\n    )\n\n    async function queryNodesByPath(\n      relPaths: nestedListOfStrings\n    ): Promise<nestedListOfNodes> {\n      const arr: nestedListOfNodes = []\n      for (let i = 0; i < relPaths.length; ++i) {\n        arr[i] = await (Array.isArray(relPaths[i])\n          ? queryNodesByPath(relPaths[i] as nestedListOfStrings)\n          : queryNodeByPath(relPaths[i] as string))\n      }\n      return arr\n    }\n\n    function queryNodeByPath(relPath: string): Promise<IGatsbyNode> {\n      return context.nodeModel.findOne({\n        query: {\n          filter: {\n            absolutePath: {\n              eq: normalize(systemPath.resolve(parentFileNode.dir, relPath)),\n            },\n          },\n        },\n        type: `File`,\n      })\n    }\n\n    if (Array.isArray(fieldValue)) {\n      return queryNodesByPath(fieldValue)\n    } else {\n      return queryNodeByPath(fieldValue)\n    }\n  }\n}\n\nfunction getProjectedField(\n  info: GraphQLResolveInfo,\n  fieldName: string\n): Array<string> {\n  const selectionSet = info.fieldNodes[0].selectionSet\n  if (selectionSet) {\n    const fieldNodes = getFieldNodeByNameInSelectionSet(\n      selectionSet,\n      fieldName,\n      info\n    )\n\n    if (fieldNodes.length === 0) {\n      return []\n    }\n\n    const returnType = getNullableType(info.returnType)\n\n    if (isObjectType(returnType) || isInterfaceType(returnType)) {\n      const field = returnType.getFields()[fieldName]\n      const fieldArg = field?.args?.find(arg => arg.name === `field`)\n      if (fieldArg) {\n        const fieldTC = getNullableType(fieldArg.type)\n\n        if (isEnumType(fieldTC) || isInputObjectType(fieldTC)) {\n          return fieldNodes.reduce(\n            (acc: Array<string>, fieldNode: FieldNode) => {\n              const fieldArg = fieldNode.arguments?.find(\n                arg => arg.name.value === `field`\n              )\n              if (isEnumType(fieldTC)) {\n                if (fieldArg?.value.kind === Kind.ENUM) {\n                  const enumKey = fieldArg.value.value\n                  const enumValue = fieldTC.getValue(enumKey)\n                  if (enumValue) {\n                    acc.push(enumValue.value)\n                  }\n                }\n              } else if (isInputObjectType(fieldTC)) {\n                const path: Array<string> = []\n                let currentValue = fieldArg?.value\n                while (currentValue) {\n                  if (currentValue.kind === Kind.OBJECT) {\n                    if (currentValue.fields.length !== 1) {\n                      throw new Error(`Invalid field arg`)\n                    }\n\n                    const fieldArg = currentValue.fields[0]\n                    path.push(fieldArg.name.value)\n                    currentValue = fieldArg.value\n                  } else {\n                    currentValue = undefined\n                  }\n                }\n\n                if (path.length > 0) {\n                  const sortPath = path.join(`.`)\n                  acc.push(sortPath)\n                }\n              }\n              return acc\n            },\n            []\n          )\n        }\n      }\n    }\n  }\n\n  return []\n}\n\nfunction getFieldNodeByNameInSelectionSet(\n  selectionSet: SelectionSetNode,\n  fieldName: string,\n  info: GraphQLResolveInfo\n): Array<FieldNode> {\n  return selectionSet.selections.reduce(\n    (acc: Array<FieldNode>, selection: SelectionNode) => {\n      if (selection.kind === Kind.FRAGMENT_SPREAD) {\n        const fragmentDef = info.fragments[selection.name.value]\n        if (fragmentDef) {\n          return [\n            ...acc,\n            ...getFieldNodeByNameInSelectionSet(\n              fragmentDef.selectionSet,\n              fieldName,\n              info\n            ),\n          ]\n        }\n      } else if (selection.kind === Kind.INLINE_FRAGMENT) {\n        return [\n          ...acc,\n          ...getFieldNodeByNameInSelectionSet(\n            selection.selectionSet,\n            fieldName,\n            info\n          ),\n        ]\n      } /* FIELD_NODE */ else {\n        if (selection.name.value === fieldName) {\n          return [...acc, selection]\n        }\n      }\n      return acc\n    },\n    []\n  )\n}\n\nexport const defaultFieldResolver: GatsbyResolver<any, any> =\n  function defaultFieldResolver(source, args, context, info) {\n    if (\n      (typeof source == `object` && source !== null) ||\n      typeof source === `function`\n    ) {\n      if (info.from) {\n        if (info.fromNode) {\n          const node = context.nodeModel.findRootNodeAncestor(source)\n          if (!node) return null\n          return getValueAt(node, info.from, {\n            keepNonMatches: info.keepObjects,\n          })\n        }\n\n        const val = getValueAt(source, info.from, {\n          keepNonMatches: info.keepObjects,\n        })\n\n        // if keepNonMatches returned the source object, it didn't find anything\n        if (info.keepObjects && val === source) {\n          return null\n        }\n\n        return val\n      }\n      const property = source[info.fieldName]\n\n      if (typeof property === `function`) {\n        return source[info.fieldName](args, context, info)\n      }\n\n      return property\n    }\n\n    return null\n  }\n\nlet WARNED_ABOUT_RESOLVERS = false\nfunction badResolverInvocationMessage(missingVar: string, path?: Path): string {\n  const resolverName = path ? `${pathToArray(path)} ` : ``\n  return `GraphQL Resolver ${resolverName}got called without \"${missingVar}\" argument. This might cause unexpected errors.\n\nIt's likely that this has happened in a schemaCustomization with manually invoked resolver. If manually invoking resolvers, it's best to invoke them as follows:\n\n  resolve(parent, args, context, info)\n\n`\n}\n\nexport function wrappingResolver<TSource, TArgs>(\n  resolver: GatsbyResolver<TSource, TArgs>\n): GatsbyResolver<TSource, TArgs> {\n  // Note: we explicitly make an attempt to prevent using the `async` keyword because often\n  //       it does not return a promise and this makes a significant difference at scale.\n  //       GraphQL will gracefully handle the resolver result of a promise or non-promise.\n\n  if (resolver[`isTracingResolver`]) {\n    return resolver\n  }\n\n  const wrappedTracingResolver = function wrappedTracingResolver(\n    parent,\n    args,\n    context,\n    info\n  ): Promise<any> {\n    if (!WARNED_ABOUT_RESOLVERS) {\n      if (!info) {\n        reporter.warn(badResolverInvocationMessage(`info`))\n        WARNED_ABOUT_RESOLVERS = true\n      } else if (!context) {\n        reporter.warn(badResolverInvocationMessage(`context`, info.path))\n        WARNED_ABOUT_RESOLVERS = true\n      }\n    }\n\n    let activity\n    let time\n    if (context?.tracer) {\n      activity = context.tracer.createResolverActivity(\n        info.path,\n        `${info.parentType.name}.${info.fieldName}`\n      )\n      activity.start()\n    }\n    if (context?.telemetryResolverTimings) {\n      time = process.hrtime.bigint()\n    }\n\n    const result = resolver(parent, args, context, info)\n\n    if (!activity && !time) {\n      return result\n    }\n\n    const endActivity = (): void => {\n      if (context?.telemetryResolverTimings) {\n        context.telemetryResolverTimings.push({\n          name: `${info.parentType}.${info.fieldName}`,\n          duration: Number(process.hrtime.bigint() - time) / 1000 / 1000,\n        })\n      }\n      if (activity) {\n        activity.end()\n      }\n    }\n    if (typeof result?.then === `function`) {\n      result.then(endActivity, endActivity)\n    } else {\n      endActivity()\n    }\n    return result\n  }\n\n  wrappedTracingResolver.isTracingResolver = true\n\n  return wrappedTracingResolver\n}\n\nexport const defaultResolver = wrappingResolver(defaultFieldResolver)\n"],"mappings":"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"}