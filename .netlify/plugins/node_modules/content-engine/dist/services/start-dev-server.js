"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.startGraphQLServer = startGraphQLServer;
var _betterOpn = _interopRequireDefault(require("better-opn"));
var _reporter = _interopRequireDefault(require("../reporter"));
var _chalk = _interopRequireDefault(require("chalk"));
var _prepareUrls = require("../utils/prepare-urls");
var _startServer = require("../utils/start-server");
var _redux = require("../redux");
let server;
async function startGraphQLServer({
  program,
  app,
  store,
  loadData
}) {
  if (!program || !app || !store) {
    _reporter.default.panic(`Missing required params. Stack: ${new Error().stack}`);
  }
  if (!server) {
    const {
      listener
    } = await (0, _startServer.startServer)(program, app);
    server = listener;
  }
  let loading = false;
  const queuedReloads = [];
  const webhookHandler = async action => {
    if (loading && queuedReloads.length < 50) {
      queuedReloads.push(action);
    } else if (!loading) {
      try {
        loading = true;
        await loadData(action);
        const queuedReload = queuedReloads.shift();
        if (queuedReload) {
          setImmediate(() => {
            webhookHandler(queuedReload);
          });
        } else {
          loading = false;
        }
      } catch (e) {
        _reporter.default.error(e);
        loading = false;
      }
    }
  };
  _redux.emitter.on(`WEBHOOK_RECEIVED`, webhookHandler);
  const urls = (0, _prepareUrls.prepareUrls)(program.https ? `https` : `http`, program.host, program.port);
  if (program.open) {
    try {
      await (0, _betterOpn.default)(urls.localUrlForBrowser);
    } catch {
      console.log(`${_chalk.default.yellow(`warn`)} Browser not opened because no browser was found`);
    }
  }
  return server;
}
//# sourceMappingURL=start-dev-server.js.map