{"version":3,"file":"start-dev-server.js","names":["server","startGraphQLServer","program","app","store","loadData","report","panic","Error","stack","listener","startServer","loading","queuedReloads","webhookHandler","action","length","push","queuedReload","shift","setImmediate","e","reporter","error","emitter","on","urls","prepareUrls","https","host","port","open","openurl","localUrlForBrowser","console","log","chalk","yellow"],"sources":["../../src/services/start-dev-server.ts"],"sourcesContent":["import openurl from \"better-opn\"\nimport report from \"../reporter\"\nimport chalk from \"chalk\"\n\nimport { prepareUrls } from \"../utils/prepare-urls\"\nimport { Listener, startServer } from \"../utils/start-server\"\nimport { IBuildContext, IDataLayerContext } from \".\"\nimport reporter from \"../reporter\"\nimport { emitter } from \"../redux\"\n\nlet server: Listener\nexport async function startGraphQLServer({\n  program,\n  app,\n  store,\n  loadData,\n}: IBuildContext & {\n  loadData: (action: Partial<IDataLayerContext>) => Promise<void>\n}): Promise<Listener> {\n  if (!program || !app || !store) {\n    report.panic(`Missing required params. Stack: ${new Error().stack}`)\n  }\n\n  if (!server) {\n    const { listener } = await startServer(program, app)\n    server = listener\n  }\n\n  let loading = false\n  const queuedReloads: Array<Partial<IDataLayerContext>> = []\n  const webhookHandler = async (\n    action: Partial<IDataLayerContext>\n  ): Promise<void> => {\n    if (loading && queuedReloads.length < 50) {\n      queuedReloads.push(action)\n    } else if (!loading) {\n      try {\n        loading = true\n        await loadData(action)\n\n        const queuedReload = queuedReloads.shift()\n\n        if (queuedReload) {\n          setImmediate(() => {\n            webhookHandler(queuedReload)\n          })\n        } else {\n          loading = false\n        }\n      } catch (e) {\n        reporter.error(e)\n        loading = false\n      }\n    }\n  }\n  emitter.on(`WEBHOOK_RECEIVED`, webhookHandler)\n\n  const urls = prepareUrls(\n    program.https ? `https` : `http`,\n    program.host,\n    program.port\n  )\n\n  if (program.open) {\n    try {\n      await openurl(urls.localUrlForBrowser)\n    } catch {\n      console.log(\n        `${chalk.yellow(\n          `warn`\n        )} Browser not opened because no browser was found`\n      )\n    }\n  }\n\n  return server\n}\n"],"mappings":";;;;;AAAA;AACA;AACA;AAEA;AACA;AAGA;AAEA,IAAIA,MAAgB;AACb,eAAeC,kBAAkB,CAAC;EACvCC,OAAO;EACPC,GAAG;EACHC,KAAK;EACLC;AAGF,CAAC,EAAqB;EACpB,IAAI,CAACH,OAAO,IAAI,CAACC,GAAG,IAAI,CAACC,KAAK,EAAE;IAC9BE,iBAAM,CAACC,KAAK,CAAE,mCAAkC,IAAIC,KAAK,EAAE,CAACC,KAAM,EAAC,CAAC;EACtE;EAEA,IAAI,CAACT,MAAM,EAAE;IACX,MAAM;MAAEU;IAAS,CAAC,GAAG,MAAM,IAAAC,wBAAW,EAACT,OAAO,EAAEC,GAAG,CAAC;IACpDH,MAAM,GAAGU,QAAQ;EACnB;EAEA,IAAIE,OAAO,GAAG,KAAK;EACnB,MAAMC,aAAgD,GAAG,EAAE;EAC3D,MAAMC,cAAc,GAAG,MACrBC,MAAkC,IAChB;IAClB,IAAIH,OAAO,IAAIC,aAAa,CAACG,MAAM,GAAG,EAAE,EAAE;MACxCH,aAAa,CAACI,IAAI,CAACF,MAAM,CAAC;IAC5B,CAAC,MAAM,IAAI,CAACH,OAAO,EAAE;MACnB,IAAI;QACFA,OAAO,GAAG,IAAI;QACd,MAAMP,QAAQ,CAACU,MAAM,CAAC;QAEtB,MAAMG,YAAY,GAAGL,aAAa,CAACM,KAAK,EAAE;QAE1C,IAAID,YAAY,EAAE;UAChBE,YAAY,CAAC,MAAM;YACjBN,cAAc,CAACI,YAAY,CAAC;UAC9B,CAAC,CAAC;QACJ,CAAC,MAAM;UACLN,OAAO,GAAG,KAAK;QACjB;MACF,CAAC,CAAC,OAAOS,CAAC,EAAE;QACVC,iBAAQ,CAACC,KAAK,CAACF,CAAC,CAAC;QACjBT,OAAO,GAAG,KAAK;MACjB;IACF;EACF,CAAC;EACDY,cAAO,CAACC,EAAE,CAAE,kBAAiB,EAAEX,cAAc,CAAC;EAE9C,MAAMY,IAAI,GAAG,IAAAC,wBAAW,EACtBzB,OAAO,CAAC0B,KAAK,GAAI,OAAM,GAAI,MAAK,EAChC1B,OAAO,CAAC2B,IAAI,EACZ3B,OAAO,CAAC4B,IAAI,CACb;EAED,IAAI5B,OAAO,CAAC6B,IAAI,EAAE;IAChB,IAAI;MACF,MAAM,IAAAC,kBAAO,EAACN,IAAI,CAACO,kBAAkB,CAAC;IACxC,CAAC,CAAC,MAAM;MACNC,OAAO,CAACC,GAAG,CACR,GAAEC,cAAK,CAACC,MAAM,CACZ,MAAK,CACN,kDAAiD,CACpD;IACH;EACF;EAEA,OAAOrC,MAAM;AACf"}