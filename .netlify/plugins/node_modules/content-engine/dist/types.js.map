{"version":3,"file":"types.js","names":[],"sources":["../src/types.ts"],"sourcesContent":["import { EventEmitter } from \"events\"\nimport { Reporter } from \"./reporter\"\nimport { Span } from \"opentracing\"\nexport { Reporter }\nimport {\n  EnumTypeComposerAsObjectDefinition as ComposeEnumTypeConfig,\n  InputTypeComposerAsObjectDefinition as ComposeInputObjectTypeConfig,\n  InterfaceTypeComposerAsObjectDefinition as ComposeInterfaceTypeConfig,\n  ObjectTypeComposerAsObjectDefinition as ComposeObjectTypeConfig,\n  ScalarTypeComposerAsObjectDefinition as ComposeScalarTypeConfig,\n  UnionTypeComposerAsObjectDefinition as ComposeUnionTypeConfig,\n} from \"graphql-compose\"\nimport { GraphQLOutputType } from \"graphql\"\nimport { PluginOptionsSchemaJoi, ObjectSchema } from \"./plugin-utils\"\n\nexport interface IMatch {\n  id: string\n  context: {\n    sourceMessage: string\n    [key: string]: unknown\n  }\n  error?: Error | undefined\n  [key: string]: unknown\n}\n\nexport type AvailableFeatures =\n  | \"image-cdn\"\n  | \"graphql-typegen\"\n  | \"content-file-path\"\n  | \"stateful-source-nodes\"\n\ninterface Proxy {\n  prefix: string\n  url: string\n}\n\n/**\n * Gatsby configuration API.\n *\n * @see https://www.gatsbyjs.com/docs/reference/config-files/gatsby-config/\n */\nexport interface GatsbyConfig {\n  /** When you want to reuse common pieces of data across the site (for example, your site title), you can store that here. */\n  siteMetadata?: Record<string, unknown>\n  /** Plugins are Node.js packages that implement Gatsby APIs. The config file accepts an array of plugins. Some plugins may need only to be listed by name, while others may take options. */\n  plugins?: Array<PluginRef>\n  /** You can activate and deactivate current experiments here. These are experimental features that are currently under development and need testing. When opting in to an experiment you'll receive a console message with more information of what it does and a link to an umbrella discussion. */\n  /**\n   * Setting the proxy config option will tell the develop server to proxy any unknown requests to your specified server.\n   * @see https://www.gatsbyjs.com/docs/api-proxy/\n   * */\n  proxy?: Proxy | Array<Proxy>\n  /** Sometimes you need more granular/flexible access to the development server. Gatsby exposes the Express.js development server to your site’s engine-config.js where you can add Express middleware as needed. */\n  developMiddleware?(app: any): void\n}\n\n/**\n * Gatsby API for Node.js.\n *\n * @see https://www.gatsbyjs.com/docs/node-apis/\n */\nexport interface GatsbyNode<\n  TNode extends Record<string, unknown> = Record<string, unknown>\n> {\n  /**\n   * Run when gatsby develop server is started, its useful to add proxy and middleware\n   * to the dev server app\n   * @param {object} $0\n   * @param {Express} $0.app The [Express app](https://expressjs.com/en/4x/api.html#app) used to run the dev server\n   *\n   * @example\n   *\n   * exports.onCreateDevServer = ({ app }) => {\n   *   app.get('/hello', function (req, res) {\n   *     res.send('hello world')\n   *   })\n   * }\n   */\n  onCreateDevServer(\n    args: CreateDevServerArgs,\n    options: PluginOptions\n  ): void | Promise<void>\n\n  /**\n   * Called when a new node is created. Plugins wishing to extend or\n   * transform nodes created by other plugins should implement this API.\n   *\n   * See also the documentation for `createNode`\n   * and [`createNodeField`](https://www.gatsbyjs.com/docs/reference/config-files/actions/#createNodeField)\n   * @param {object} $0\n   * @param {object} $0.node A node object.\n   * @param {object} $0.actions\n   * @param {function} $0.actions.createNode Create a new node.\n   * @param {function} $0.actions.createNodeField Extend another node. The new node field is placed under the fields key on the extended node object.\n   * @example\n   * exports.onCreateNode = ({ node, getNode, actions }) => {\n   *   const { createNodeField } = actions\n   *\n   *   if (node.internal.type === `MarkdownRemark`) {\n   *     const nodePath = node.fileAbsolutePath\n   *\n   *     if (nodePath.match(/\\/blog\\//)) {\n   *       const postSlug = createFilePath({\n   *         node,\n   *         getNode,\n   *         basePath: `src/content`,\n   *         trailingSlash: true,\n   *       })\n   *\n   *       createNodeField({\n   *         node,\n   *         name: `slug`,\n   *         value: `/blog/${postSlug}/`,\n   *       })\n   *     }\n   *   }\n   * }\n   */\n  onCreateNode(\n    args: CreateNodeArgs<TNode>,\n    options: PluginOptions,\n    callback: PluginCallback<void>\n  ): void\n\n  /**\n   * Called before scheduling a `onCreateNode` callback for a plugin. If it returns falsy\n   * then Gatsby will not schedule the `onCreateNode` callback for this node for this plugin.\n   * Note: this API does not receive the regular `api` that other callbacks get as first arg.\n   *\n   * @gatsbyVersion 2.24.80\n   * @example\n   * exports.shouldOnCreateNode = ({node}, pluginOptions) => node.internal.type === 'Image'\n   */\n  shouldOnCreateNode(args: { node: TNode }, options: PluginOptions): boolean\n\n  /**\n   * Lifecycle executed in each process (one time per process). Used to store actions, etc. for later use. Plugins should use this over other APIs like \"onPreBootstrap\" or \"onPreInit\" since onPluginInit will run in main process + all workers to support Parallel Query Running.\n   * @gatsbyVersion 3.9.0\n   * @example\n   * let createJobV2\n   * exports.onPluginInit = ({ actions }) => {\n   *   // Store job creation action to use it later\n   *   createJobV2 = actions.createJobV2\n   * }\n   */\n  onPluginInit(\n    args: ParentSpanPluginArgs,\n    options: PluginOptions,\n    callback: PluginCallback<void>\n  ): void\n\n  /** The first API called during Gatsby execution, runs as soon as plugins are loaded, before cache initialization and bootstrap preparation. If you indend to use this API in a plugin, use \"onPluginInit\" instead. */\n  onPreInit(\n    args: PreInitArgs,\n    options: PluginOptions,\n    callback: PluginCallback<void>\n  ): void\n\n  /**\n   * Called during the creation of the GraphQL schema. Allows plugins\n   * to add new fields to the types created from data nodes. It will be called\n   * separately for each type.\n   *\n   * This function should return an object in the shape of\n   * [GraphQLFieldConfigMap](https://graphql.org/graphql-js/type/#graphqlobjecttype)\n   * which will be appended to fields inferred by Gatsby from data nodes.\n   *\n   * *Note:* Import GraphQL types from `gatsby/graphql` and don't add the `graphql`\n   * package to your project/plugin dependencies to avoid Schema must\n   * contain unique named types but contains multiple types named errors.\n   * `gatsby/graphql` exports all builtin GraphQL types as well as the `graphQLJSON`\n   * type.\n   *\n   * Many transformer plugins use this to add fields that take arguments.\n   *\n   * @see https://www.gatsbyjs.com/docs/node-apis/#setFieldsOnGraphQLNodeType\n   */\n  setFieldsOnGraphQLNodeType(\n    args: SetFieldsOnGraphQLNodeTypeArgs,\n    options: PluginOptions,\n    callback: PluginCallback<any>\n  ): void\n\n  /**\n   * Extension point to tell plugins to source nodes. This API is called during\n   * the Gatsby bootstrap sequence. Source plugins use this hook to create nodes.\n   * This API is called exactly once per plugin (and once for your site's\n   * `gatsby-config.js` file). If you define this hook in `gatsby-node.js` it\n   * will be called exactly once after all of your source plugins have finished\n   * creating nodes.\n   *\n   * @see https://www.gatsbyjs.com/docs/node-apis/#sourceNodes\n   */\n  sourceNodes(args: SourceNodesArgs, options: PluginOptions): void\n\n  /**\n   * Add custom field resolvers to the GraphQL schema.\n   *\n   * Allows adding new fields to types by providing field configs, or adding resolver\n   * functions to existing fields.\n   *\n   * Things to note:\n   * * Overriding field types is disallowed, instead use the `createTypes`\n   *   action. In case of types added from third-party schemas, where this is not\n   *   possible, overriding field types is allowed.\n   * * New fields will not be available on `filter` and `sort` input types. Extend\n   *   types defined with `createTypes` if you need this.\n   * * In field configs, types can be referenced as strings.\n   * * When extending a field with an existing field resolver, the original\n   *   resolver function is available from `info.originalResolver`.\n   * * The `createResolvers` API is called as the last step in schema generation.\n   *   Thus, an intermediate schema is made available on the `schema` property.\n   *   In resolver functions themselves, it is recommended to access the final\n   *   built schema from `info.schema`.\n   * * Gatsby's data layer, including all internal query capabilities, is\n   *   exposed on [`context.nodeModel`](/docs/node-model/). The node store can be\n   *   queried directly with `findOne`, `getNodeById` and `getNodesByIds`,\n   *   while more advanced queries can be composed with `findAll`.\n   * * It is possible to add fields to the root `Query` type.\n   * * When using the first resolver argument (`source` in the example below,\n   *   often also called `parent` or `root`), take care of the fact that field\n   *   resolvers can be called more than once in a query, e.g. when the field is\n   *   present both in the input filter and in the selection set. This means that\n   *   foreign-key fields on `source` can be either resolved or not-resolved.\n   *\n   * For fuller examples, see [`using-type-definitions`](https://github.com/gatsbyjs/gatsby/tree/master/examples/using-type-definitions).\n   *\n   * @see https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/#createResolvers\n   */\n  createResolvers(args: CreateResolversArgs, options: PluginOptions): void\n\n  /**\n   * Customize Gatsby’s GraphQL schema by creating type definitions, field extensions or adding third-party schemas.\n   * The createTypes, createFieldExtension and addThirdPartySchema actions are only available in this API.\n   *\n   * For details on their usage please refer to the actions documentation.\n   *\n   * This API runs immediately before schema generation. For modifications of the generated schema, e.g.\n   * to customize added third-party types, use the createResolvers API.\n   * @see https://www.gatsbyjs.com/docs/node-apis/#createSchemaCustomization\n   */\n  createSchemaCustomization(\n    args: CreateSchemaCustomizationArgs,\n    options: PluginOptions\n  ): void\n\n  /**\n   * Add a Joi schema for the possible options of your plugin.\n   * Currently experimental and not enabled by default.\n   */\n  pluginOptionsSchema(args: PluginOptionsSchemaArgs): ObjectSchema\n}\n\nexport interface PluginOptions {\n  plugins: Array<unknown>\n  [key: string]: unknown\n}\n\nexport type PluginCallback<R = any> = (err: Error | null, result?: R) => void\n\nexport interface CreateDevServerArgs extends ParentSpanPluginArgs {\n  app: any\n}\n\nexport interface CreateNodeArgs<\n  TNode extends Record<string, unknown> = Record<string, unknown>\n> extends ParentSpanPluginArgs {\n  node: Node & TNode\n  traceId: string\n  traceTags: {\n    nodeId: string\n    nodeType: string\n  }\n}\n\nexport interface SetFieldsOnGraphQLNodeTypeArgs extends ParentSpanPluginArgs {\n  type: {\n    name: string\n    nodes: Array<any>\n  }\n  traceId: \"initial-setFieldsOnGraphQLNodeType\"\n}\n\nexport interface GatsbyGraphQLObjectType {\n  kind: \"OBJECT\"\n  config: ComposeObjectTypeConfig<any, any>\n}\n\nexport interface GatsbyGraphQLInputObjectType {\n  kind: \"INPUT_OBJECT\"\n  config: ComposeInputObjectTypeConfig\n}\n\nexport interface GatsbyGraphQLUnionType {\n  kind: \"UNION\"\n  config: ComposeUnionTypeConfig<any, any>\n}\n\nexport interface GatsbyGraphQLInterfaceType {\n  kind: \"INTERFACE\"\n  config: ComposeInterfaceTypeConfig<any, any>\n}\n\nexport interface GatsbyGraphQLEnumType {\n  kind: \"ENUM\"\n  config: ComposeEnumTypeConfig\n}\n\nexport interface GatsbyGraphQLScalarType {\n  kind: \"SCALAR\"\n  config: ComposeScalarTypeConfig<any, any>\n}\n\nexport type GatsbyGraphQLType =\n  | GatsbyGraphQLObjectType\n  | GatsbyGraphQLInputObjectType\n  | GatsbyGraphQLUnionType\n  | GatsbyGraphQLInterfaceType\n  | GatsbyGraphQLEnumType\n  | GatsbyGraphQLScalarType\n\nexport interface NodePluginSchema {\n  buildObjectType(\n    config: ComposeObjectTypeConfig<any, any>\n  ): GatsbyGraphQLObjectType\n  buildUnionType(\n    config: ComposeUnionTypeConfig<any, any>\n  ): GatsbyGraphQLUnionType\n  buildInterfaceType(\n    config: ComposeInterfaceTypeConfig<any, any>\n  ): GatsbyGraphQLInterfaceType\n  buildInputObjectType(\n    config: ComposeInputObjectTypeConfig\n  ): GatsbyGraphQLInputObjectType\n  buildEnumType(config: ComposeEnumTypeConfig): GatsbyGraphQLEnumType\n  buildScalarType(\n    config: ComposeScalarTypeConfig<any, any>\n  ): GatsbyGraphQLScalarType\n}\nexport interface PreInitArgs extends ParentSpanPluginArgs {\n  actions: Actions\n}\n\nexport interface SourceNodesArgs extends ParentSpanPluginArgs {\n  traceId: \"initial-sourceNodes\"\n  waitForCascadingActions: boolean\n  webhookBody: any\n}\n\nexport interface CreateResolversArgs extends ParentSpanPluginArgs {\n  intermediateSchema: Record<string, unknown>\n  createResolvers: (...args: Array<unknown>) => unknown\n  traceId: \"initial-createResolvers\"\n}\n\nexport interface CreateSchemaCustomizationArgs extends ParentSpanPluginArgs {\n  traceId: \"initial-createSchemaCustomization\"\n}\n\nexport interface ParentSpanPluginArgs extends NodePluginArgs {\n  parentSpan: Span\n}\n\nexport interface NodePluginArgs {\n  /**\n   * This is the same as `pathPrefix` passed in `gatsby-config.js`.\n   * It's an empty string if you don't pass `pathPrefix`.\n   * When using assetPrefix, you can use this instead of pathPrefix to recieve the string you set in `gatsby-config.js`.\n   * It won't include the `assetPrefix`.\n   */\n  basePath: string\n\n  /**\n   * Collection of functions used to programmatically modify Gatsby’s internal state.\n   */\n  actions: Actions\n\n  /**\n   * Get content for a node from the plugin that created it.\n   *\n   * @example\n   * module.exports = async function onCreateNode(\n   *   { node, loadNodeContent, actions, createNodeId }\n   * ) {\n   *   if (node.internal.mediaType === 'text/markdown') {\n   *     const { createNode, createParentChildLink } = actions\n   *     const textContent = await loadNodeContent(node)\n   *     // process textContent and create child nodes\n   *   }\n   * }\n   */\n  loadNodeContent(this: void, node: Node): Promise<string>\n\n  /**\n   * Internal redux state used for application state. Do not use, unless you\n   * absolutely must. Store is considered a private API and can change with\n   * any version.\n   */\n  store: Store\n\n  /**\n   * Internal event emitter / listener.  Do not use, unless you absolutely\n   * must. Emitter is considered a private API and can change with any version.\n   */\n  emitter: EventEmitter\n\n  /**\n   * Get array of all nodes.\n   *\n   * @returns Array of nodes.\n   * @example\n   * const allNodes = getNodes()\n   */\n  getNodes(this: void): Array<Node>\n\n  /**\n   * Get single node by given ID.\n   * Don't use this in graphql resolvers - see\n   * `getNodeAndSavePathDependency`\n   *\n   * @param id id of the node.\n   * @returns Single node instance.\n   * @example\n   * const node = getNode(id)\n   */\n  getNode(this: void, id: string): Node | undefined\n\n  /**\n   * Get array of nodes of given type.\n   * @param type Type of nodes\n   * @returns Array of nodes.\n   *\n   * @example\n   * const markdownNodes = getNodesByType(`MarkdownRemark`)\n   */\n  getNodesByType(this: void, type: string): Array<Node>\n\n  /**\n   * Set of utilities to output information to user\n   */\n  reporter: Reporter\n\n  /**\n   * Key-value store used to persist results of time/memory/cpu intensive\n   * tasks. All functions are async and return promises.\n   */\n  cache: GatsbyCache\n\n  /**\n   * Get cache instance by name - this should only be used by plugins that accept subplugins.\n   * @param id id of the node\n   * @returns See [cache](https://www.gatsbyjs.com/docs/reference/config-files/node-api-helpers/#cache) section for reference.\n   */\n  getCache(this: void, id: string): GatsbyCache\n\n  /**\n   * Utility function useful to generate globally unique and stable node IDs.\n   * It will generate different IDs for different plugins if they use same\n   * input.\n   *\n   * @returns UUIDv5 ID string\n   * @example\n   * const node = {\n   *   id: createNodeId(`${backendData.type}${backendData.id}`),\n   *   ...restOfNodeData\n   * }\n   */\n  createNodeId(this: void, input: string): string\n\n  /**\n   * Create a stable content digest from a string or object, you can use the\n   * result of this function to set the `internal.contentDigest` field\n   * on nodes. Gatsby uses the value of this field to invalidate stale data\n   * when your content changes.\n   * @param input\n   * @returns Hash string\n   * @example\n   * const node = {\n   *   ...nodeData,\n   *   internal: {\n   *     type: `TypeOfNode`,\n   *     contentDigest: createContentDigest(nodeData)\n   *   }\n   * }\n   */\n  createContentDigest(\n    this: void,\n    input: string | Record<string, unknown>\n  ): string\n\n  /**\n   * Set of utilities that allow adding more detailed tracing for plugins.\n   * Check\n   * [Performance tracing](https://www.gatsbyjs.com/docs/performance-tracing)\n   * page for more details.\n   */\n  tracing: Tracing\n  schema: NodePluginSchema\n  [key: string]: unknown\n}\n\ninterface ActionPlugin {\n  name: string\n}\n\ninterface ActionOptions {\n  [key: string]: unknown\n}\n\nexport interface BuildArgs extends ParentSpanPluginArgs {\n  graphql<TData, TVariables = any>(\n    query: string,\n    variables?: TVariables\n  ): Promise<{\n    errors?: any\n    data?: TData\n  }>\n}\n\nexport interface Actions {\n  /** @see https://www.gatsbyjs.com/docs/actions/#deleteNode */\n  deleteNode(node: NodeInput, plugin?: ActionPlugin): void\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#createNode */\n  createNode<TNode = Record<string, unknown>>(\n    this: void,\n    node: NodeInput & TNode,\n    plugin?: ActionPlugin,\n    options?: ActionOptions\n  ): void | Promise<void>\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#touchNode */\n  touchNode(node: NodeInput, plugin?: ActionPlugin): void\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#createNodeField */\n  createNodeField(\n    this: void,\n    args: {\n      node: Node\n      name?: string\n      value: any\n    },\n    plugin?: ActionPlugin,\n    options?: ActionOptions\n  ): void\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#createParentChildLink */\n  createParentChildLink(\n    this: void,\n    args: { parent: Node; child: NodeInput },\n    plugin?: ActionPlugin\n  ): void\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#setRequestHeaders */\n  setRequestHeaders(\n    this: void,\n    args: { domain: string; headers: Record<string, string> },\n    plugin?: ActionPlugin\n  ): void\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#createJob */\n  createJob(\n    this: void,\n    job: Record<string, unknown> & { id: string },\n    plugin?: ActionPlugin\n  ): void\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#createJobV2 */\n  createJobV2(\n    this: void,\n    job: {\n      name: string\n      inputPaths: Array<string>\n      outputDir: string\n      args: Record<string, unknown>\n    },\n    plugin?: ActionPlugin\n  ): Promise<unknown>\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#addGatsbyImageSourceUrl */\n  addGatsbyImageSourceUrl(this: void, sourceUrl: string): void\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#setJob */\n  setJob(\n    this: void,\n    job: Record<string, unknown> & { id: string },\n    plugin?: ActionPlugin\n  ): void\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#endJob */\n  endJob(this: void, job: { id: string }, plugin?: ActionPlugin): void\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#setPluginStatus */\n  setPluginStatus(\n    this: void,\n    status: Record<string, unknown>,\n    plugin?: ActionPlugin\n  ): void\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#addThirdPartySchema */\n  addThirdPartySchema(\n    this: void,\n    args: { schema: Record<string, unknown> },\n    plugin?: ActionPlugin,\n    traceId?: string\n  ): void\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#createTypes */\n  createTypes(\n    this: void,\n    types:\n      | string\n      | GraphQLOutputType\n      | GatsbyGraphQLType\n      | Array<string | GraphQLOutputType | GatsbyGraphQLType>,\n    plugin?: ActionPlugin,\n    traceId?: string\n  ): void\n\n  /** @see https://www.gatsbyjs.com/docs/actions/#createFieldExtension */\n  createFieldExtension(\n    this: void,\n    extension: Record<string, unknown>,\n    plugin?: ActionPlugin,\n    traceId?: string\n  ): void\n\n  printTypeDefinitions(\n    this: void,\n    options: {\n      path?: string\n      include?: { types?: Array<string>; plugins?: Array<string> }\n      exclude?: { types?: Array<string>; plugins?: Array<string> }\n      withFieldTypes?: boolean\n    },\n    plugin?: ActionPlugin,\n    traceId?: string\n  ): void\n\n  /**\n   * Marks the source plugin that called this function as stateful. Gatsby will not check for stale nodes for any plugin that calls this.\n   */\n  enableStatefulSourceNodes(this: void, plugin?: ActionPlugin): void\n}\n\nexport interface Store {\n  dispatch: (...args: Array<unknown>) => unknown\n  subscribe: (...args: Array<unknown>) => unknown\n  getState: (...args: Array<unknown>) => unknown\n  replaceReducer: (...args: Array<unknown>) => unknown\n}\n\nexport interface ActivityTracker {\n  start(): () => void\n  end(): () => void\n  span: Record<string, unknown>\n  setStatus(status: string): void\n  panic: (\n    errorMeta: string | Record<string, unknown>,\n    error?: Record<string, unknown>\n  ) => never\n  panicOnBuild: (\n    errorMeta: string | Record<string, unknown>,\n    error?: Record<string, unknown>\n  ) => void\n}\n\nexport type ProgressActivityTracker = Omit<ActivityTracker, \"end\"> & {\n  tick(increment?: number): void\n  done(): void\n  total: number\n}\n\nexport interface ActivityArgs {\n  parentSpan?: Record<string, unknown>\n  id?: string\n}\n\n/**\n * @deprecated Use `GatsbyCache` instead\n */\nexport interface Cache {\n  name: string\n  store: {\n    create: (...args: Array<unknown>) => unknown\n  }\n  cache: {\n    getAndPassUp: (...args: Array<unknown>) => unknown\n    wrap: (...args: Array<unknown>) => unknown\n    set: (...args: Array<unknown>) => unknown\n    mset: (...args: Array<unknown>) => unknown\n    get: (...args: Array<unknown>) => unknown\n    mget: (...args: Array<unknown>) => unknown\n    del: (...args: Array<unknown>) => unknown\n    reset: (...args: Array<unknown>) => unknown\n  }\n}\n\nexport interface GatsbyCache {\n  name: string\n  directory: string\n  /**\n   * Retrieve cached value\n   * @param key Cache key\n   * @returns Promise resolving to cached value\n   * @example\n   * const value = await cache.get(`unique-key`)\n   */\n  get(key: string): Promise<any>\n\n  /**\n   * Cache value\n   * @param key Cache key\n   * @param value Value to be cached\n   * @returns Promise resolving to cached value\n   * @example\n   * await cache.set(`unique-key`, value)\n   */\n  set(key: string, value: any): Promise<any>\n\n  /**\n   * Deletes cached value\n   * @param {string} key Cache key\n   * @returns {Promise<void>} Promise resolving once key is deleted from cache\n   * @example\n   * await cache.del(`unique-key`)\n   */\n  del(key: string): Promise<void>\n}\n\nexport interface Tracing {\n  tracer: Record<string, unknown>\n  parentSpan: Record<string, unknown>\n  startSpan: (...args: Array<unknown>) => unknown\n}\n\nexport interface PackageJson {\n  name?: string\n  description?: string\n  version?: string\n  main?: string\n  author?:\n    | string\n    | {\n        name: string\n        email: string\n      }\n  license?: string\n  dependencies?: Record<string, string>\n  devDependencies?: Record<string, string>\n  peerDependencies?: Record<string, string>\n  optionalDependencies?: Record<string, string>\n  bundledDependencies?: Array<string>\n  keywords?: Array<string>\n}\n\nexport interface WebpackRules {\n  js: (...args: Array<unknown>) => unknown\n  mjs: (...args: Array<unknown>) => unknown\n  eslint: (...args: Array<unknown>) => unknown\n  yaml: (...args: Array<unknown>) => unknown\n  fonts: (...args: Array<unknown>) => unknown\n  images: (...args: Array<unknown>) => unknown\n  media: (...args: Array<unknown>) => unknown\n  miscAssets: (...args: Array<unknown>) => unknown\n  css: (...args: Array<unknown>) => unknown\n  cssModules: (...args: Array<unknown>) => unknown\n  postcss: (...args: Array<unknown>) => unknown\n  [key: string]: (...args: Array<unknown>) => unknown\n}\n\nexport interface WebpackLoaders {\n  json: (...args: Array<unknown>) => unknown\n  yaml: (...args: Array<unknown>) => unknown\n  null: (...args: Array<unknown>) => unknown\n  raw: (...args: Array<unknown>) => unknown\n  style: (...args: Array<unknown>) => unknown\n  miniCssExtract: (...args: Array<unknown>) => unknown\n  css: (...args: Array<unknown>) => unknown\n  postcss: (...args: Array<unknown>) => unknown\n  file: (...args: Array<unknown>) => unknown\n  url: (...args: Array<unknown>) => unknown\n  js: (...args: Array<unknown>) => unknown\n  eslint: (...args: Array<unknown>) => unknown\n  imports: (...args: Array<unknown>) => unknown\n  exports: (...args: Array<unknown>) => unknown\n  [key: string]: (...args: Array<unknown>) => unknown\n}\n\nexport interface WebpackPlugins {\n  normalModuleReplacement: (...args: Array<unknown>) => unknown\n  contextReplacement: (...args: Array<unknown>) => unknown\n  ignore: (...args: Array<unknown>) => unknown\n  watchIgnore: (...args: Array<unknown>) => unknown\n  banner: (...args: Array<unknown>) => unknown\n  prefetch: (...args: Array<unknown>) => unknown\n  automaticPrefetch: (...args: Array<unknown>) => unknown\n  define: (...args: Array<unknown>) => unknown\n  provide: (...args: Array<unknown>) => unknown\n  hotModuleReplacement: (...args: Array<unknown>) => unknown\n  sourceMapDevTool: (...args: Array<unknown>) => unknown\n  evalSourceMapDevTool: (...args: Array<unknown>) => unknown\n  evalDevToolModule: (...args: Array<unknown>) => unknown\n  cache: (...args: Array<unknown>) => unknown\n  extendedAPI: (...args: Array<unknown>) => unknown\n  externals: (...args: Array<unknown>) => unknown\n  jsonpTemplate: (...args: Array<unknown>) => unknown\n  libraryTemplate: (...args: Array<unknown>) => unknown\n  loaderTarget: (...args: Array<unknown>) => unknown\n  memoryOutputFile: (...args: Array<unknown>) => unknown\n  progress: (...args: Array<unknown>) => unknown\n  setVarMainTemplate: (...args: Array<unknown>) => unknown\n  umdMainTemplate: (...args: Array<unknown>) => unknown\n  noErrors: (...args: Array<unknown>) => unknown\n  noEmitOnErrors: (...args: Array<unknown>) => unknown\n  newWatching: (...args: Array<unknown>) => unknown\n  environment: (...args: Array<unknown>) => unknown\n  dll: (...args: Array<unknown>) => unknown\n  dllReference: (...args: Array<unknown>) => unknown\n  loaderOptions: (...args: Array<unknown>) => unknown\n  namedModules: (...args: Array<unknown>) => unknown\n  namedChunks: (...args: Array<unknown>) => unknown\n  hashedModuleIds: (...args: Array<unknown>) => unknown\n  moduleFilenameH: (...args: Array<unknown>) => unknown\n  aggressiveMerging: (...args: Array<unknown>) => unknown\n  aggressiveSplitting: (...args: Array<unknown>) => unknown\n  splitChunks: (...args: Array<unknown>) => unknown\n  chunkModuleIdRange: (...args: Array<unknown>) => unknown\n  dedupe: (...args: Array<unknown>) => unknown\n  limitChunkCount: (...args: Array<unknown>) => unknown\n  minChunkSize: (...args: Array<unknown>) => unknown\n  occurrenceOrder: (...args: Array<unknown>) => unknown\n  moduleConcatenation: (...args: Array<unknown>) => unknown\n  minifyJs: (...args: Array<unknown>) => unknown\n  minifyCss: (...args: Array<unknown>) => unknown\n  extractText: (...args: Array<unknown>) => unknown\n  moment: (...args: Array<unknown>) => unknown\n  [key: string]: (...args: Array<unknown>) => unknown\n}\n\nexport interface NodeInput {\n  id: string\n  parent?: string | null\n  children?: Array<string>\n  internal: {\n    type: string\n    mediaType?: string\n    content?: string\n    contentDigest: string\n    description?: string\n    contentFilePath?: string\n  }\n  [key: string]: unknown\n}\n\nexport interface Node extends NodeInput {\n  parent: string | null\n  children: Array<string>\n  internal: NodeInput[\"internal\"] & {\n    owner: string\n  }\n  [key: string]: unknown\n}\n\nexport interface IPluginRefObject {\n  resolve: string\n  options?: IPluginRefOptions\n  parentDir?: string\n  /** @private Internal key used by create-gatsby during plugin installation. Not necessary to define and can be removed. */\n  __key?: string\n}\n\nexport type PluginRef = string | IPluginRefObject\n\nexport interface IPluginRefOptions {\n  plugins?: Array<PluginRef>\n  path?: string\n  [option: string]: unknown\n}\n\nexport interface PluginOptionsSchemaArgs {\n  Joi: PluginOptionsSchemaJoi\n}\n"],"mappings":";;;AACA;AAAqC"}