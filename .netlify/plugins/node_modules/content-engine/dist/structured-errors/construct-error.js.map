{"version":3,"file":"construct-error.js","names":["constructError","details","id","otherDetails","suppliedErrorMap","errorMapEntry","defaultError","errorMap","type","level","context","structuredError","text","stack","error","sanitizeStructuredStackTrace","stackTrace","parse","docsUrl","code","errorSchema","validate","console","log","process","exit"],"sources":["../../src/structured-errors/construct-error.ts"],"sourcesContent":["import stackTrace from \"stack-trace\"\nimport { errorSchema } from \"./error-schema\"\nimport {\n  defaultError,\n  ErrorId,\n  errorMap,\n  IErrorMapEntryPublicApi,\n} from \"./error-map\"\nimport { sanitizeStructuredStackTrace } from \"../reporter/errors\"\nimport { IConstructError, IStructuredError } from \"./types\"\n\n// Merge partial error details with information from the errorMap\n// Validate the constructed object against an error schema\nconst constructError = (\n  { details: { id, ...otherDetails } }: IConstructError,\n  suppliedErrorMap: Record<ErrorId, IErrorMapEntryPublicApi>\n): IStructuredError => {\n  let errorMapEntry = defaultError\n\n  if (id) {\n    // Look at original errorMap, ids cannot be overwritten\n    if (errorMap[id]) {\n      errorMapEntry = errorMap[id]\n    } else if (suppliedErrorMap[id]) {\n      errorMapEntry = {\n        type: `PLUGIN`,\n        level: `ERROR`,\n        ...suppliedErrorMap[id],\n      }\n    }\n  }\n\n  const type =\n    typeof errorMapEntry.type === `function`\n      ? errorMapEntry.type(otherDetails.context)\n      : errorMapEntry.type\n\n  // merge\n  const structuredError: IStructuredError = {\n    context: {},\n    ...otherDetails,\n    ...errorMapEntry,\n    type,\n    text: errorMapEntry.text(otherDetails.context),\n    stack: otherDetails.error\n      ? sanitizeStructuredStackTrace(stackTrace.parse(otherDetails.error))\n      : [],\n    docsUrl: errorMapEntry.docsUrl || `https://gatsby.dev/issue-how-to`,\n  }\n\n  if (id) {\n    structuredError.code = id\n  }\n\n  // validate\n  const { error } = errorSchema.validate(structuredError)\n  if (error) {\n    console.log(`Failed to validate error`, error)\n    process.exit(1)\n  }\n\n  return structuredError\n}\n\nexport default constructError\n"],"mappings":";;;;;AAAA;AACA;AACA;AAMA;AAGA;AACA;AACA,MAAMA,cAAc,GAAG,CACrB;EAAEC,OAAO,EAAE;IAAEC,EAAE;IAAE,GAAGC;EAAa;AAAmB,CAAC,EACrDC,gBAA0D,KACrC;EACrB,IAAIC,aAAa,GAAGC,sBAAY;EAEhC,IAAIJ,EAAE,EAAE;IACN;IACA,IAAIK,kBAAQ,CAACL,EAAE,CAAC,EAAE;MAChBG,aAAa,GAAGE,kBAAQ,CAACL,EAAE,CAAC;IAC9B,CAAC,MAAM,IAAIE,gBAAgB,CAACF,EAAE,CAAC,EAAE;MAC/BG,aAAa,GAAG;QACdG,IAAI,EAAG,QAAO;QACdC,KAAK,EAAG,OAAM;QACd,GAAGL,gBAAgB,CAACF,EAAE;MACxB,CAAC;IACH;EACF;EAEA,MAAMM,IAAI,GACR,OAAOH,aAAa,CAACG,IAAI,KAAM,UAAS,GACpCH,aAAa,CAACG,IAAI,CAACL,YAAY,CAACO,OAAO,CAAC,GACxCL,aAAa,CAACG,IAAI;;EAExB;EACA,MAAMG,eAAiC,GAAG;IACxCD,OAAO,EAAE,CAAC,CAAC;IACX,GAAGP,YAAY;IACf,GAAGE,aAAa;IAChBG,IAAI;IACJI,IAAI,EAAEP,aAAa,CAACO,IAAI,CAACT,YAAY,CAACO,OAAO,CAAC;IAC9CG,KAAK,EAAEV,YAAY,CAACW,KAAK,GACrB,IAAAC,oCAA4B,EAACC,mBAAU,CAACC,KAAK,CAACd,YAAY,CAACW,KAAK,CAAC,CAAC,GAClE,EAAE;IACNI,OAAO,EAAEb,aAAa,CAACa,OAAO,IAAK;EACrC,CAAC;EAED,IAAIhB,EAAE,EAAE;IACNS,eAAe,CAACQ,IAAI,GAAGjB,EAAE;EAC3B;;EAEA;EACA,MAAM;IAAEY;EAAM,CAAC,GAAGM,wBAAW,CAACC,QAAQ,CAACV,eAAe,CAAC;EACvD,IAAIG,KAAK,EAAE;IACTQ,OAAO,CAACC,GAAG,CAAE,0BAAyB,EAAET,KAAK,CAAC;IAC9CU,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;EACjB;EAEA,OAAOd,eAAe;AACxB,CAAC;AAAA,eAEcX,cAAc;AAAA"}