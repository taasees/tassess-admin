"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.loadConfig = loadConfig;
var _reporter = _interopRequireDefault(require("../../reporter"));
var _preferDefault = require("../prefer-default");
var _getConfigFile = require("../get-config-file");
var _actions = require("../../redux/actions");
var _loadThemes = require("../load-themes");
var _redux = require("../../redux");
// import telemetry from "gatsby-telemetry"

async function loadConfig({
  siteDirectory,
  providedConfig
}) {
  let config;
  let configFilePath;
  if (providedConfig) {
    config = providedConfig;
  } else {
    // Try opening the site's gatsby-config.js file.
    const configFile = await (0, _getConfigFile.getConfigFile)(siteDirectory, `gatsby-config`);
    configFilePath = configFile.configFilePath;
    config = (0, _preferDefault.preferDefault)(configFile.configModule);
  }

  // The root config cannot be exported as a function, only theme configs
  if (typeof config === `function`) {
    _reporter.default.panic({
      id: `10126`,
      context: {
        configName: `gatsby-config`,
        siteDirectory
      }
    });
  }

  // theme gatsby configs can be functions or objects
  if (config &&
  // themes currently don't work when a config object is provided
  !providedConfig) {
    const plugins = await (0, _loadThemes.loadThemes)(config, {
      configFilePath,
      rootDir: siteDirectory
    });
    config = plugins.config;
  }
  _redux.store.dispatch(_actions.internalActions.setSiteConfig(config));
  return config;
}
//# sourceMappingURL=index.js.map