{"version":3,"file":"index.js","names":["loadPlugins","rawConfig","rootDir","config","normalizeConfig","validateConfigPluginsOptions","currentAPIs","getAPI","node","nodeAPIs","pluginInfos","loadInternalPlugins","pluginArray","flattenPlugins","flattenedPlugins","badExports","collatePluginAPIs","handleBadExports","store","dispatch","type","payload"],"sources":["../../../src/bootstrap/load-plugins/index.ts"],"sourcesContent":["import { store } from \"../../redux\"\nimport { IGatsbyState } from \"../../redux/types\"\nimport * as nodeAPIs from \"../../utils/api-node-docs\"\nimport { loadInternalPlugins } from \"./load-internal-plugins\"\nimport {\n  collatePluginAPIs,\n  handleBadExports,\n  validateConfigPluginsOptions,\n} from \"./validate\"\nimport { IFlattenedPlugin } from \"./types\"\nimport { normalizeConfig } from \"./utils/normalize\"\nimport { getAPI } from \"./utils/get-api\"\nimport { flattenPlugins } from \"./utils/flatten-plugins\"\nimport { IGatsbyConfig } from \"../../internal\"\n\nexport async function loadPlugins(\n  rawConfig: IGatsbyConfig,\n  rootDir: string\n): Promise<Array<IFlattenedPlugin>> {\n  // Turn all strings in plugins: [`...`] into the { resolve: ``, options: {} } form\n  const config = normalizeConfig(rawConfig)\n\n  // Show errors for invalid plugin configuration\n  await validateConfigPluginsOptions(config, rootDir)\n\n  const currentAPIs = getAPI({\n    node: nodeAPIs,\n  })\n\n  // Collate internal plugins, site config plugins, site default plugins\n  const pluginInfos = loadInternalPlugins(config, rootDir)\n\n  // Create a flattened array of the plugins\n  const pluginArray = flattenPlugins(pluginInfos)\n\n  // Work out which plugins use which APIs, including those which are not\n  // valid Gatsby APIs, aka 'badExports'\n  const { flattenedPlugins, badExports } = await collatePluginAPIs({\n    currentAPIs,\n    flattenedPlugins: pluginArray,\n    rootDir,\n  })\n\n  // Show errors for any non-Gatsby APIs exported from plugins\n  await handleBadExports({ currentAPIs, badExports })\n\n  // If we get this far, everything looks good. Update the store\n  store.dispatch({\n    type: `SET_SITE_FLATTENED_PLUGINS`,\n    payload: flattenedPlugins as IGatsbyState[\"flattenedPlugins\"],\n  })\n\n  return flattenedPlugins\n}\n"],"mappings":";;;;AAAA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAAwD;AAAA;AAGjD,eAAeA,WAAW,CAC/BC,SAAwB,EACxBC,OAAe,EACmB;EAClC;EACA,MAAMC,MAAM,GAAG,IAAAC,0BAAe,EAACH,SAAS,CAAC;;EAEzC;EACA,MAAM,IAAAI,sCAA4B,EAACF,MAAM,EAAED,OAAO,CAAC;EAEnD,MAAMI,WAAW,GAAG,IAAAC,cAAM,EAAC;IACzBC,IAAI,EAAEC;EACR,CAAC,CAAC;;EAEF;EACA,MAAMC,WAAW,GAAG,IAAAC,wCAAmB,EAACR,MAAM,EAAED,OAAO,CAAC;;EAExD;EACA,MAAMU,WAAW,GAAG,IAAAC,8BAAc,EAACH,WAAW,CAAC;;EAE/C;EACA;EACA,MAAM;IAAEI,gBAAgB;IAAEC;EAAW,CAAC,GAAG,MAAM,IAAAC,2BAAiB,EAAC;IAC/DV,WAAW;IACXQ,gBAAgB,EAAEF,WAAW;IAC7BV;EACF,CAAC,CAAC;;EAEF;EACA,MAAM,IAAAe,0BAAgB,EAAC;IAAEX,WAAW;IAAES;EAAW,CAAC,CAAC;;EAEnD;EACAG,YAAK,CAACC,QAAQ,CAAC;IACbC,IAAI,EAAG,4BAA2B;IAClCC,OAAO,EAAEP;EACX,CAAC,CAAC;EAEF,OAAOA,gBAAgB;AACzB"}