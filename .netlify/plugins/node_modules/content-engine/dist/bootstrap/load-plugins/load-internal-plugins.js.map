{"version":3,"file":"load-internal-plugins.js","names":["loadInternalPlugins","config","rootDir","plugins","internalPlugins","filter","Boolean","forEach","relPath","absPath","path","join","__dirname","push","processPlugin","plugin","resolve","processedPlugin","slash","process","cwd","id","createPluginId","name","version","createFileContentHash","pluginOptions","uniquePlugins"],"sources":["../../../src/bootstrap/load-plugins/load-internal-plugins.ts"],"sourcesContent":["import { slash } from \"../../core-utils/path\"\nimport { uniqWith, isEqual } from \"lodash\"\nimport path from \"path\"\nimport { IPluginInfo, ISiteConfig } from \"./types\"\nimport { processPlugin } from \"./process-plugin\"\nimport { createPluginId } from \"./utils/create-id\"\nimport { createFileContentHash } from \"./utils/create-hash\"\n\nexport function loadInternalPlugins(\n  config: ISiteConfig = {},\n  rootDir: string\n): Array<IPluginInfo> {\n  // Instantiate plugins.\n  const plugins: Array<IPluginInfo> = []\n\n  // Add internal plugins\n  const internalPlugins = [\n    `../../internal-plugins/internal-data-bridge`,\n  ].filter(Boolean) as Array<string>\n\n  internalPlugins.forEach(relPath => {\n    const absPath = path.join(__dirname, relPath)\n    plugins.push(processPlugin(absPath, rootDir))\n  })\n\n  // Add plugins from the site config.\n  if (config.plugins) {\n    config.plugins.forEach(plugin => {\n      if (\n        // don't process default-site-plugin\n        plugin.resolve === `default-site-plugin` ||\n        // @ts-ignore\n        plugin === `default-site-plugin`\n      ) {\n        return\n      }\n\n      const processedPlugin = processPlugin(plugin, rootDir)\n      plugins.push(processedPlugin)\n    })\n  }\n\n  // Add the site's default \"plugin\" i.e. engine-node.js file in root of site.\n  plugins.push({\n    resolve: slash(process.cwd()),\n    id: createPluginId(`default-site-plugin`),\n    name: `default-site-plugin`,\n    version:\n      createFileContentHash(process.cwd(), `gatsby-*`) +\n      createFileContentHash(process.cwd(), `engine-*`),\n    pluginOptions: {\n      plugins: [],\n    },\n  })\n\n  const uniquePlugins = uniqWith(plugins, isEqual)\n\n  return uniquePlugins\n}\n"],"mappings":";;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AAEO,SAASA,mBAAmB,CACjCC,MAAmB,GAAG,CAAC,CAAC,EACxBC,OAAe,EACK;EACpB;EACA,MAAMC,OAA2B,GAAG,EAAE;;EAEtC;EACA,MAAMC,eAAe,GAAG,CACrB,6CAA4C,CAC9C,CAACC,MAAM,CAACC,OAAO,CAAkB;EAElCF,eAAe,CAACG,OAAO,CAACC,OAAO,IAAI;IACjC,MAAMC,OAAO,GAAGC,cAAI,CAACC,IAAI,CAACC,SAAS,EAAEJ,OAAO,CAAC;IAC7CL,OAAO,CAACU,IAAI,CAAC,IAAAC,4BAAa,EAACL,OAAO,EAAEP,OAAO,CAAC,CAAC;EAC/C,CAAC,CAAC;;EAEF;EACA,IAAID,MAAM,CAACE,OAAO,EAAE;IAClBF,MAAM,CAACE,OAAO,CAACI,OAAO,CAACQ,MAAM,IAAI;MAC/B;MACE;MACAA,MAAM,CAACC,OAAO,KAAM,qBAAoB;MACxC;MACAD,MAAM,KAAM,qBAAoB,EAChC;QACA;MACF;MAEA,MAAME,eAAe,GAAG,IAAAH,4BAAa,EAACC,MAAM,EAAEb,OAAO,CAAC;MACtDC,OAAO,CAACU,IAAI,CAACI,eAAe,CAAC;IAC/B,CAAC,CAAC;EACJ;;EAEA;EACAd,OAAO,CAACU,IAAI,CAAC;IACXG,OAAO,EAAE,IAAAE,WAAK,EAACC,OAAO,CAACC,GAAG,EAAE,CAAC;IAC7BC,EAAE,EAAE,IAAAC,wBAAc,EAAE,qBAAoB,CAAC;IACzCC,IAAI,EAAG,qBAAoB;IAC3BC,OAAO,EACL,IAAAC,iCAAqB,EAACN,OAAO,CAACC,GAAG,EAAE,EAAG,UAAS,CAAC,GAChD,IAAAK,iCAAqB,EAACN,OAAO,CAACC,GAAG,EAAE,EAAG,UAAS,CAAC;IAClDM,aAAa,EAAE;MACbvB,OAAO,EAAE;IACX;EACF,CAAC,CAAC;EAEF,MAAMwB,aAAa,GAAG,wBAASxB,OAAO,oBAAU;EAEhD,OAAOwB,aAAa;AACtB"}