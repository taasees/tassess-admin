{"version":3,"file":"types.js","names":["ProgramStatus"],"sources":["../../src/redux/types.ts"],"sourcesContent":["import { IProgram, Stage } from \"../commands/types\"\nimport { GraphQLFieldExtensionDefinition } from \"../schema/extensions\"\nimport {\n  DocumentNode,\n  GraphQLSchema,\n  DefinitionNode,\n  SourceLocation,\n} from \"graphql\"\nimport { SchemaComposer } from \"graphql-compose\"\nimport { IGatsbyCLIState } from \"../reporter/redux/types\"\nimport { ThunkAction } from \"redux-thunk\"\nimport { InternalJob, JobResultInterface } from \"../utils/jobs/manager\"\nimport { ITypeMetadata } from \"../schema/infer/inference-metadata\"\nimport { Span } from \"opentracing\"\n\ntype SystemPath = string\ntype Identifier = string\n\nexport enum ProgramStatus {\n  BOOTSTRAP_FINISHED = `BOOTSTRAP_FINISHED`,\n}\n\nexport interface IGatsbyConfig {\n  plugins?: Array<{\n    // This is the name of the plugin like `gatsby-plugin-manifest`\n    resolve: string\n    options: {\n      [key: string]: unknown\n    }\n  }>\n  siteMetadata?: {\n    title?: string\n    author?: string\n    description?: string\n    siteUrl?: string\n    // siteMetadata is free form\n    [key: string]: unknown\n  }\n  // @deprecated\n  polyfill?: boolean\n  developMiddleware?: any\n  proxy?: any\n  assetPrefix?: string\n  mapping?: Record<string, string>\n  jsxRuntime?: \"classic\" | \"automatic\"\n  jsxImportSource?: string\n}\n\nexport interface IGatsbyNode {\n  id: Identifier\n  parent: Identifier\n  children: Array<Identifier>\n  internal: {\n    type: string\n    counter: number\n    owner: string\n    contentDigest: string\n    mediaType?: string\n    content?: string\n    description?: string\n  }\n  [key: string]: unknown\n  fields: Array<string>\n}\n\nexport interface IGatsbyPlugin {\n  id: Identifier\n  name: string\n  version: string\n  [key: string]: any\n}\n\nexport interface IGatsbyPluginContext {\n  [key: string]: (...args: Array<any>) => any\n}\n\nexport interface IDefinitionMeta {\n  name: string\n  def: DefinitionNode\n  filePath: string\n  text: string\n  templateLoc: SourceLocation\n  printedAst: string | null\n  isHook: boolean\n  isStaticQuery: boolean\n  isFragment: boolean\n  isConfigQuery: boolean\n  hash: number\n}\n\ntype GatsbyNodes = Map<string, IGatsbyNode>\n\nexport interface IGatsbyIncompleteJobV2 {\n  job: InternalJob\n}\n\nexport interface IGatsbyIncompleteJob {\n  job: InternalJob\n  plugin: IGatsbyPlugin\n}\n\nexport interface IGatsbyCompleteJobV2 {\n  result: JobResultInterface\n  inputPaths: InternalJob[\"inputPaths\"]\n}\n\nexport interface IPlugin {\n  name: string\n  options: Record<string, unknown>\n}\n\nexport interface IBabelStage {\n  plugins: Array<IPlugin>\n  presets: Array<IPlugin>\n  options?: {\n    cacheDirectory: boolean\n    sourceType: string\n    sourceMaps?: string\n  }\n}\n\nexport interface IStateProgram extends IProgram {\n  extensions: Array<string>\n}\n\nexport interface IQueryState {\n  dirty: number\n  running: number\n}\n\nexport type GatsbyNodeAPI =\n  | \"onPreBoostrap\"\n  | \"onPostBoostrap\"\n  | \"onCreateNode\"\n  | \"sourceNodes\"\n  | \"onPostBuild\"\n\nexport interface IGatsbyState {\n  program: IStateProgram\n  nodes: GatsbyNodes\n  nodesByType: Map<string, GatsbyNodes>\n  resolvedNodesCache: Map<string, any> // TODO\n  nodesTouched: Set<string>\n  typeOwners: {\n    pluginsToTypes: Map<\n      IGatsbyPlugin[`name`],\n      Set<IGatsbyNode[`internal`][`type`]>\n    >\n    typesToPlugins: Map<IGatsbyNode[`internal`][`type`], IGatsbyPlugin[`name`]>\n  }\n  requestHeaders: Map<string, { [header: string]: string }>\n  statefulSourcePlugins: Set<string>\n  telemetry: ITelemetry\n  lastAction: ActionsUnion\n  flattenedPlugins: Array<{\n    resolve: SystemPath\n    id: Identifier\n    name: string\n    version: string\n    pluginOptions: {\n      plugins: []\n      [key: string]: unknown\n    }\n    nodeAPIs: Array<GatsbyNodeAPI>\n    pluginFilepath: SystemPath\n    subPluginPaths?: Array<string>\n    modulePath?: string\n  }>\n  config: IGatsbyConfig\n  schema: GraphQLSchema\n  definitions: Map<string, IDefinitionMeta>\n  status: {\n    plugins: Record<string, IGatsbyPlugin>\n    PLUGINS_HASH: Identifier\n    LAST_NODE_COUNTER: number\n  }\n  // @deprecated\n  jobs: {\n    active: Array<any> // TODO\n    done: Array<any> // TODO\n  }\n  jobsV2: {\n    incomplete: Map<Identifier, IGatsbyIncompleteJobV2>\n    complete: Map<Identifier, IGatsbyCompleteJobV2>\n    jobsByRequest: Map<string, Set<Identifier>>\n  }\n  schemaCustomization: {\n    composer: null | SchemaComposer<any>\n    context: Record<string, any>\n    // @ts-ignore\n    fieldExtensions: GraphQLFieldExtensionDefinition\n    printConfig: {\n      path?: string\n      include?: { types?: Array<string>; plugins?: Array<string> }\n      exclude?: { types?: Array<string>; plugins?: Array<string> }\n      withFieldTypes?: boolean\n    } | null\n    thirdPartySchemas: Array<GraphQLSchema>\n    types: Array<\n      string | { typeOrTypeDef: DocumentNode; plugin: IGatsbyPlugin }\n    >\n  }\n  logs: IGatsbyCLIState\n  inferenceMetadata: {\n    step: string // TODO make enum or union\n    typeMap: {\n      [key: string]: ITypeMetadata\n    }\n  }\n}\n\nexport type GatsbyStateKeys = keyof IGatsbyState\n\nexport interface ICachedReduxState {\n  nodes?: IGatsbyState[\"nodes\"]\n  typeOwners?: IGatsbyState[\"typeOwners\"]\n  statefulSourcePlugins?: IGatsbyState[\"statefulSourcePlugins\"]\n  status: IGatsbyState[\"status\"]\n  jobsV2: IGatsbyState[\"jobsV2\"]\n}\n\nexport type ActionsUnion =\n  | IAddChildNodeToParentNodeAction\n  | IAddFieldToNodeAction\n  | IAddThirdPartySchema\n  | IApiFinishedAction\n  | ICreateFieldExtension\n  | ICreateNodeAction\n  | ICreatePageDependencyAction\n  | ICreateTypes\n  | IDeleteCacheAction\n  | IDeleteNodeAction\n  | IPageQueryRunAction\n  | IPrintTypeDefinitions\n  | IQueryClearDirtyQueriesListToEmitViaWebsocket\n  | IQueryExtractedAction\n  | IQueryExtractedBabelSuccessAction\n  | IQueryExtractionBabelErrorAction\n  | IQueryExtractionGraphQLErrorAction\n  | IQueryStartAction\n  | IReplaceComponentQueryAction\n  | IReplaceStaticQueryAction\n  | ISetPluginStatusAction\n  | ISetProgramStatusAction\n  | ISetResolvedNodesAction\n  | ISetSchemaAction\n  | ISetGraphQLDefinitionsAction\n  | ISetSiteFlattenedPluginsAction\n  | ITouchNodeAction\n  | IUpdatePluginsHashAction\n  | ICreateJobV2Action\n  | IEndJobV2Action\n  | IRemoveStaleJobV2Action\n  | ISetBabelPluginAction\n  | ISetBabelPresetAction\n  | ISetBabelOptionsAction\n  | ICreateJobAction\n  | ISetJobAction\n  | IEndJobAction\n  | ICreateResolverContext\n  | IClearSchemaCustomizationAction\n  | ISetSchemaComposerAction\n  | IStartIncrementalInferenceAction\n  | IBuildTypeMetadataAction\n  | IDisableTypeInferenceAction\n  | ISetProgramAction\n  | ISetProgramExtensions\n  | ISetSiteConfig\n  | ISetComponentFeatures\n  | ISetJobV2Context\n  | IClearJobV2Context\n  | ISetDomainRequestHeaders\n  | IEnableStatefulSourcePluginAction\n  | IProcessGatsbyImageSourceUrlAction\n  | IClearGatsbyImageSourceUrlAction\n\nexport interface ISetComponentFeatures {\n  type: `SET_COMPONENT_FEATURES`\n  payload: {\n    componentPath: string\n    serverData: boolean\n    config: boolean\n    Head: boolean\n  }\n}\n\nexport interface IApiFinishedAction {\n  type: `API_FINISHED`\n  payload: {\n    apiName: GatsbyNodeAPI\n  }\n}\n\ninterface ISetBabelPluginAction {\n  type: `SET_BABEL_PLUGIN`\n  payload: {\n    stage: Stage\n    name: IPlugin[\"name\"]\n    options: IPlugin[\"options\"]\n  }\n}\n\ninterface ISetBabelPresetAction {\n  type: `SET_BABEL_PRESET`\n  payload: {\n    stage: Stage\n    name: IPlugin[\"name\"]\n    options: IPlugin[\"options\"]\n  }\n}\n\ninterface ISetBabelOptionsAction {\n  type: `SET_BABEL_OPTIONS`\n  payload: {\n    stage: Stage\n    name: IPlugin[\"name\"]\n    options: IPlugin[\"options\"]\n  }\n}\n\nexport interface ICreateJobV2Action {\n  type: `CREATE_JOB_V2`\n  payload: {\n    job: IGatsbyIncompleteJobV2[\"job\"]\n  }\n  plugin: { name: string }\n}\n\nexport interface IEndJobV2Action {\n  type: `END_JOB_V2`\n  payload: {\n    jobContentDigest: string\n    result: JobResultInterface\n  }\n  plugin: { name: string }\n}\n\nexport interface IRemoveStaleJobV2Action {\n  type: `REMOVE_STALE_JOB_V2`\n  payload: {\n    contentDigest: string\n  }\n}\n\nexport type ICreateJobV2FromInternalAction = ThunkAction<\n  Promise<Record<string, unknown>>,\n  IGatsbyState,\n  void,\n  ActionsUnion\n>\n\ninterface ICreateJobAction {\n  type: `CREATE_JOB`\n  payload: {\n    id: string\n    job: IGatsbyIncompleteJob[\"job\"]\n  }\n  plugin: IGatsbyIncompleteJob[\"plugin\"]\n}\n\ninterface ISetJobAction {\n  type: `SET_JOB`\n  payload: {\n    id: string\n    job: IGatsbyIncompleteJob[\"job\"]\n  }\n  plugin: IGatsbyIncompleteJob[\"plugin\"]\n}\n\ninterface IEndJobAction {\n  type: `END_JOB`\n  payload: {\n    id: string\n    job: IGatsbyIncompleteJob[\"job\"]\n  }\n  plugin: IGatsbyIncompleteJob[\"plugin\"]\n}\n\nexport interface ICreatePageDependencyActionPayloadType {\n  path: string\n  nodeId?: string\n  connection?: string\n}\n\nexport interface ICreatePageDependencyAction {\n  type: `CREATE_COMPONENT_DEPENDENCY`\n  plugin?: string\n  payload: Array<ICreatePageDependencyActionPayloadType>\n}\n\nexport interface IDeleteComponentDependenciesAction {\n  type: \"DELETE_COMPONENTS_DEPENDENCIES\"\n  payload: {\n    paths: Array<string>\n  }\n}\n\nexport interface IReplaceComponentQueryAction {\n  type: \"REPLACE_COMPONENT_QUERY\"\n  payload: {\n    query: string\n    componentPath: string\n  }\n}\n\nexport interface IReplaceStaticQueryAction {\n  type: `REPLACE_STATIC_QUERY`\n  plugin: IGatsbyPlugin | null | undefined\n  payload: {\n    name: string\n    componentPath: string\n    id: string\n    query: string\n    hash: string\n  }\n}\n\nexport interface IQueryClearDirtyQueriesListToEmitViaWebsocket {\n  type: `QUERY_CLEAR_DIRTY_QUERIES_LIST_TO_EMIT_VIA_WEBSOCKET`\n}\n\nexport interface IQueryExtractedAction {\n  type: `QUERY_EXTRACTED`\n  plugin: IGatsbyPlugin\n  traceId: string | undefined\n  payload: { componentPath: string; query: string }\n}\n\nexport interface IQueryExtractionGraphQLErrorAction {\n  type: `QUERY_EXTRACTION_GRAPHQL_ERROR`\n  plugin: IGatsbyPlugin\n  traceId: string | undefined\n  payload: { componentPath: string; error: string }\n}\n\nexport interface IQueryExtractedBabelSuccessAction {\n  type: `QUERY_EXTRACTION_BABEL_SUCCESS`\n  plugin: IGatsbyPlugin\n  traceId: string | undefined\n  payload: { componentPath: string }\n}\n\nexport interface IQueryExtractionBabelErrorAction {\n  type: `QUERY_EXTRACTION_BABEL_ERROR`\n  plugin: IGatsbyPlugin\n  traceId: string | undefined\n  payload: {\n    componentPath: string\n    error: Error\n  }\n}\n\nexport interface ISetProgramStatusAction {\n  type: `SET_PROGRAM_STATUS`\n  plugin: IGatsbyPlugin\n  traceId: string | undefined\n  payload: ProgramStatus\n}\n\nexport interface IPageQueryRunAction {\n  type: `PAGE_QUERY_RUN`\n  plugin: IGatsbyPlugin\n  traceId: string | undefined\n  payload: {\n    path: string\n    componentPath: string\n    queryType: \"page\" | \"static\" | \"slice\"\n    resultHash: string\n    queryHash: string\n  }\n}\n\nexport interface IQueryStartAction {\n  type: `QUERY_START`\n  plugin: IGatsbyPlugin\n  traceId: string | undefined\n  payload: { path: string; componentPath: string; isPage: boolean }\n}\n\nexport interface IRemoveStaleJobAction {\n  type: `REMOVE_STALE_JOB_V2`\n  plugin: IGatsbyPlugin | undefined\n  traceId?: string\n  payload: { contentDigest: string }\n}\n\nexport interface IAddThirdPartySchema {\n  type: `ADD_THIRD_PARTY_SCHEMA`\n  plugin: IGatsbyPlugin\n  traceId?: string\n  payload: GraphQLSchema\n}\n\nexport interface ICreateTypes {\n  type: `CREATE_TYPES`\n  plugin: IGatsbyPlugin\n  traceId?: string\n  payload: DocumentNode | Array<DocumentNode>\n}\n\nexport interface ICreateFieldExtension {\n  type: `CREATE_FIELD_EXTENSION`\n  plugin: IGatsbyPlugin\n  traceId?: string\n  payload: {\n    name: string\n    extension: GraphQLFieldExtensionDefinition\n  }\n}\n\nexport interface IPrintTypeDefinitions {\n  type: `PRINT_SCHEMA_REQUESTED`\n  plugin: IGatsbyPlugin\n  traceId?: string\n  payload: {\n    path?: string\n    include?: { types?: Array<string>; plugins?: Array<string> }\n    exclude?: { types?: Array<string>; plugins?: Array<string> }\n    withFieldTypes?: boolean\n  }\n}\n\nexport interface ICreateResolverContext {\n  type: `CREATE_RESOLVER_CONTEXT`\n  plugin: IGatsbyPlugin\n  traceId?: string\n  payload:\n    | IGatsbyPluginContext\n    | { [camelCasedPluginNameWithoutPrefix: string]: IGatsbyPluginContext }\n}\n\ninterface IClearSchemaCustomizationAction {\n  type: `CLEAR_SCHEMA_CUSTOMIZATION`\n}\n\ninterface ISetSchemaComposerAction {\n  type: `SET_SCHEMA_COMPOSER`\n  payload: SchemaComposer<any>\n}\n\nexport interface IDeleteCacheAction {\n  type: `DELETE_CACHE`\n  cacheIsCorrupt?: boolean\n}\n\nexport interface IUpdatePluginsHashAction {\n  type: `UPDATE_PLUGINS_HASH`\n  payload: Identifier\n}\n\nexport interface ISetPluginStatusAction {\n  type: `SET_PLUGIN_STATUS`\n  plugin: IGatsbyPlugin\n  payload: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any\n  }\n}\n\nexport interface ISetSchemaAction {\n  type: `SET_SCHEMA`\n  payload: IGatsbyState[\"schema\"]\n}\n\nexport interface ISetGraphQLDefinitionsAction {\n  type: `SET_GRAPHQL_DEFINITIONS`\n  payload: IGatsbyState[\"definitions\"]\n}\n\nexport interface ISetSiteConfig {\n  type: `SET_SITE_CONFIG`\n  payload: IGatsbyState[\"config\"]\n}\n\nexport interface ICreateNodeAction {\n  type: `CREATE_NODE`\n  payload: IGatsbyNode\n  oldNode?: IGatsbyNode\n  traceId: string\n  parentSpan: Span\n  followsSpan: Span\n  plugin: IGatsbyPlugin\n}\n\nexport interface IAddFieldToNodeAction {\n  type: `ADD_FIELD_TO_NODE`\n  payload: IGatsbyNode\n  addedField: string\n}\n\nexport interface IAddChildNodeToParentNodeAction {\n  type: `ADD_CHILD_NODE_TO_PARENT_NODE`\n  payload: IGatsbyNode\n}\n\nexport interface IDeleteNodeAction {\n  type: `DELETE_NODE`\n  // FIXME: figure out why payload can be undefined here\n  payload: IGatsbyNode | void\n  plugin: IGatsbyPlugin\n  isRecursiveChildrenDelete?: boolean\n}\n\nexport interface ISetSiteFlattenedPluginsAction {\n  type: `SET_SITE_FLATTENED_PLUGINS`\n  payload: IGatsbyState[\"flattenedPlugins\"]\n}\n\nexport interface ISetResolvedNodesAction {\n  type: `SET_RESOLVED_NODES`\n  payload: {\n    key: string\n    nodes: IGatsbyState[\"resolvedNodesCache\"]\n  }\n}\n\nexport interface ITouchNodeAction {\n  type: `TOUCH_NODE`\n  payload: Identifier\n  typeName: IGatsbyNode[\"internal\"][\"type\"]\n  plugin: IGatsbyPlugin\n}\n\ninterface IStartIncrementalInferenceAction {\n  type: `START_INCREMENTAL_INFERENCE`\n}\n\ninterface IBuildTypeMetadataAction {\n  type: `BUILD_TYPE_METADATA`\n  payload: {\n    nodes: Array<IGatsbyNode>\n    clearExistingMetadata: boolean\n    typeName: string\n  }\n}\n\ninterface IDisableTypeInferenceAction {\n  type: `DISABLE_TYPE_INFERENCE`\n  payload: Array<string>\n}\n\ninterface ISetProgramAction {\n  type: `SET_PROGRAM`\n  payload: IStateProgram\n}\n\ninterface ISetProgramExtensions {\n  type: `SET_PROGRAM_EXTENSIONS`\n  payload: Array<string>\n}\n\nexport interface ISetDomainRequestHeaders {\n  type: `SET_REQUEST_HEADERS`\n  payload: {\n    domain: string\n    headers: {\n      [header: string]: string\n    }\n  }\n}\n\nexport interface IEnableStatefulSourcePluginAction {\n  type: `ENABLE_STATEFUL_SOURCE_PLUGIN`\n  plugin: IGatsbyPlugin\n}\n\nexport interface IProcessGatsbyImageSourceUrlAction {\n  type: `PROCESS_GATSBY_IMAGE_SOURCE_URL`\n  payload: {\n    sourceUrl: string\n  }\n}\n\nexport interface IClearGatsbyImageSourceUrlAction {\n  type: `CLEAR_GATSBY_IMAGE_SOURCE_URL`\n}\n\nexport interface ITelemetry {\n  gatsbyImageSourceUrls: Set<string>\n}\n\nexport interface ISetJobV2Context {\n  type: `SET_JOB_V2_CONTEXT`\n  payload: {\n    job: IGatsbyIncompleteJobV2[\"job\"]\n    requestId: string\n  }\n}\n\nexport interface IClearJobV2Context {\n  type: `CLEAR_JOB_V2_CONTEXT`\n  payload: {\n    requestId: string\n  }\n}\n"],"mappings":";;;;IAkBYA,aAAa;AAAA;AAAA,WAAbA,aAAa;EAAbA,aAAa;AAAA,GAAbA,aAAa,6BAAbA,aAAa"}