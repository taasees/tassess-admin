{"version":3,"file":"index.js","names":["isStringPayload","action","payload","sanitizeAction","copiedAction","text","stripAnsi","statusText","initializeIPCLogger","onLogAction","process","send","sanitizedAction","type","Actions","Log","LogLevels","Debug","includes","level","Success","Info","LogAction"],"sources":["../../../../src/reporter/loggers/ipc/index.ts"],"sourcesContent":["import { onLogAction } from \"../../redux/index\"\nimport { ISetStatus, ActionsUnion } from \"../../redux/types\"\nimport { Actions, LogLevels } from \"../../constants\"\nimport stripAnsi from \"strip-ansi\"\nimport { cloneDeep } from \"lodash\"\n\nconst isStringPayload = (action: ActionsUnion): action is ISetStatus =>\n  typeof action.payload === `string`\n\n/**\n * Payload can either be a String or an Object\n * See more at integration-tests/structured-logging/__tests__/to-do.js\n */\nconst sanitizeAction = (action: ActionsUnion): ActionsUnion => {\n  const copiedAction = cloneDeep(action)\n\n  if (isStringPayload(copiedAction)) {\n    return copiedAction\n  }\n\n  if (`text` in copiedAction.payload && copiedAction.payload.text) {\n    copiedAction.payload.text = stripAnsi(copiedAction.payload.text)\n  }\n  if (`statusText` in copiedAction.payload && copiedAction.payload.statusText) {\n    copiedAction.payload.statusText = stripAnsi(copiedAction.payload.statusText)\n  }\n\n  return copiedAction\n}\n\nexport const initializeIPCLogger = (): void => {\n  onLogAction((action: ActionsUnion) => {\n    if (!process.send) return\n\n    const sanitizedAction = sanitizeAction(action)\n\n    // we mutate sanitizedAction but this is already deep copy of action so we should be good\n    if (sanitizedAction.type === Actions.Log) {\n      // Don't emit Debug over IPC\n      if (\n        [LogLevels.Debug].includes(sanitizedAction.payload.level as LogLevels)\n      ) {\n        return\n      }\n      // Override Success and Log types to Info over IPC\n      if (\n        [LogLevels.Success, LogLevels.Log].includes(\n          sanitizedAction.payload.level as LogLevels\n        )\n      ) {\n        sanitizedAction.payload.level = LogLevels.Info\n      }\n    }\n\n    process.send({\n      type: Actions.LogAction,\n      action: sanitizedAction,\n    })\n  })\n}\n"],"mappings":";;;;;;AAAA;AAEA;AACA;AAGA,MAAMA,eAAe,GAAIC,MAAoB,IAC3C,OAAOA,MAAM,CAACC,OAAO,KAAM,QAAO;;AAEpC;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAIF,MAAoB,IAAmB;EAC7D,MAAMG,YAAY,GAAG,yBAAUH,MAAM,CAAC;EAEtC,IAAID,eAAe,CAACI,YAAY,CAAC,EAAE;IACjC,OAAOA,YAAY;EACrB;EAEA,IAAK,MAAK,IAAIA,YAAY,CAACF,OAAO,IAAIE,YAAY,CAACF,OAAO,CAACG,IAAI,EAAE;IAC/DD,YAAY,CAACF,OAAO,CAACG,IAAI,GAAG,IAAAC,kBAAS,EAACF,YAAY,CAACF,OAAO,CAACG,IAAI,CAAC;EAClE;EACA,IAAK,YAAW,IAAID,YAAY,CAACF,OAAO,IAAIE,YAAY,CAACF,OAAO,CAACK,UAAU,EAAE;IAC3EH,YAAY,CAACF,OAAO,CAACK,UAAU,GAAG,IAAAD,kBAAS,EAACF,YAAY,CAACF,OAAO,CAACK,UAAU,CAAC;EAC9E;EAEA,OAAOH,YAAY;AACrB,CAAC;AAEM,MAAMI,mBAAmB,GAAG,MAAY;EAC7C,IAAAC,kBAAW,EAAER,MAAoB,IAAK;IACpC,IAAI,CAACS,OAAO,CAACC,IAAI,EAAE;IAEnB,MAAMC,eAAe,GAAGT,cAAc,CAACF,MAAM,CAAC;;IAE9C;IACA,IAAIW,eAAe,CAACC,IAAI,KAAKC,kBAAO,CAACC,GAAG,EAAE;MACxC;MACA,IACE,CAACC,oBAAS,CAACC,KAAK,CAAC,CAACC,QAAQ,CAACN,eAAe,CAACV,OAAO,CAACiB,KAAK,CAAc,EACtE;QACA;MACF;MACA;MACA,IACE,CAACH,oBAAS,CAACI,OAAO,EAAEJ,oBAAS,CAACD,GAAG,CAAC,CAACG,QAAQ,CACzCN,eAAe,CAACV,OAAO,CAACiB,KAAK,CAC9B,EACD;QACAP,eAAe,CAACV,OAAO,CAACiB,KAAK,GAAGH,oBAAS,CAACK,IAAI;MAChD;IACF;IAEAX,OAAO,CAACC,IAAI,CAAC;MACXE,IAAI,EAAEC,kBAAO,CAACQ,SAAS;MACvBrB,MAAM,EAAEW;IACV,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAAA"}