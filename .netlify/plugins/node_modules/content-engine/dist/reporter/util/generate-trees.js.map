{"version":3,"file":"generate-trees.js","names":["generatePageTree","collections","LIMIT","SSGIterator","SSG","values","DSGIterator","DSG","SSRIterator","SSR","FNIterator","FN","SSGPages","generateLineUntilLimit","size","DSGPages","SSRPages","FNPages","concat","generateSliceTree","slices","slicesIterator","iterator","symbol","limit","max","output","item","next","done","length","push","text","value"],"sources":["../../../src/reporter/util/generate-trees.ts"],"sourcesContent":["type SYMBOLS = \" \" | \"D\" | \"∞\" | \"λ\"\n\nexport interface IComponentWithPageModes {\n  SSG: Set<string>\n  DSG: Set<string>\n  SSR: Set<string>\n  FN: Set<string>\n}\n\nexport interface ITreeLine {\n  text: string\n  symbol: SYMBOLS\n}\n\nexport function generatePageTree(\n  collections: IComponentWithPageModes,\n  LIMIT: number = 8\n): Array<ITreeLine> {\n  const SSGIterator = collections.SSG.values()\n  const DSGIterator = collections.DSG.values()\n  const SSRIterator = collections.SSR.values()\n  const FNIterator = collections.FN.values()\n\n  const SSGPages: Array<ITreeLine> = generateLineUntilLimit(\n    SSGIterator,\n    ` `,\n    LIMIT / 4,\n    collections.SSG.size\n  )\n  const DSGPages: Array<ITreeLine> = generateLineUntilLimit(\n    DSGIterator,\n    `D`,\n    LIMIT / 4,\n    collections.DSG.size\n  )\n  const SSRPages: Array<ITreeLine> = generateLineUntilLimit(\n    SSRIterator,\n    `∞`,\n    LIMIT / 4,\n    collections.SSR.size\n  )\n  const FNPages: Array<ITreeLine> = generateLineUntilLimit(\n    FNIterator,\n    `λ`,\n    LIMIT / 4,\n    collections.FN.size\n  )\n\n  return SSGPages.concat(DSGPages).concat(SSRPages).concat(FNPages)\n}\n\nexport function generateSliceTree(\n  slices: Set<string>,\n  LIMIT: number = 8\n): Array<ITreeLine> {\n  const slicesIterator = slices.values()\n\n  return generateLineUntilLimit(slicesIterator, ` `, LIMIT / 4, slices.size)\n}\n\nfunction generateLineUntilLimit(\n  iterator: IterableIterator<string>,\n  symbol: SYMBOLS,\n  limit: number,\n  max: number\n): Array<ITreeLine> {\n  const output: Array<ITreeLine> = []\n\n  for (\n    let item = iterator.next();\n    !item.done && output.length < limit;\n    item = iterator.next()\n  ) {\n    output.push({\n      text: item.value,\n      symbol,\n    })\n  }\n\n  if (output.length < max) {\n    output[output.length - 1].text = `...${\n      max - output.length + 1\n    } more pages available`\n  }\n\n  return output\n}\n"],"mappings":";;;;;AAcO,SAASA,gBAAgB,CAC9BC,WAAoC,EACpCC,KAAa,GAAG,CAAC,EACC;EAClB,MAAMC,WAAW,GAAGF,WAAW,CAACG,GAAG,CAACC,MAAM,EAAE;EAC5C,MAAMC,WAAW,GAAGL,WAAW,CAACM,GAAG,CAACF,MAAM,EAAE;EAC5C,MAAMG,WAAW,GAAGP,WAAW,CAACQ,GAAG,CAACJ,MAAM,EAAE;EAC5C,MAAMK,UAAU,GAAGT,WAAW,CAACU,EAAE,CAACN,MAAM,EAAE;EAE1C,MAAMO,QAA0B,GAAGC,sBAAsB,CACvDV,WAAW,EACV,GAAE,EACHD,KAAK,GAAG,CAAC,EACTD,WAAW,CAACG,GAAG,CAACU,IAAI,CACrB;EACD,MAAMC,QAA0B,GAAGF,sBAAsB,CACvDP,WAAW,EACV,GAAE,EACHJ,KAAK,GAAG,CAAC,EACTD,WAAW,CAACM,GAAG,CAACO,IAAI,CACrB;EACD,MAAME,QAA0B,GAAGH,sBAAsB,CACvDL,WAAW,EACV,GAAE,EACHN,KAAK,GAAG,CAAC,EACTD,WAAW,CAACQ,GAAG,CAACK,IAAI,CACrB;EACD,MAAMG,OAAyB,GAAGJ,sBAAsB,CACtDH,UAAU,EACT,GAAE,EACHR,KAAK,GAAG,CAAC,EACTD,WAAW,CAACU,EAAE,CAACG,IAAI,CACpB;EAED,OAAOF,QAAQ,CAACM,MAAM,CAACH,QAAQ,CAAC,CAACG,MAAM,CAACF,QAAQ,CAAC,CAACE,MAAM,CAACD,OAAO,CAAC;AACnE;AAEO,SAASE,iBAAiB,CAC/BC,MAAmB,EACnBlB,KAAa,GAAG,CAAC,EACC;EAClB,MAAMmB,cAAc,GAAGD,MAAM,CAACf,MAAM,EAAE;EAEtC,OAAOQ,sBAAsB,CAACQ,cAAc,EAAG,GAAE,EAAEnB,KAAK,GAAG,CAAC,EAAEkB,MAAM,CAACN,IAAI,CAAC;AAC5E;AAEA,SAASD,sBAAsB,CAC7BS,QAAkC,EAClCC,MAAe,EACfC,KAAa,EACbC,GAAW,EACO;EAClB,MAAMC,MAAwB,GAAG,EAAE;EAEnC,KACE,IAAIC,IAAI,GAAGL,QAAQ,CAACM,IAAI,EAAE,EAC1B,CAACD,IAAI,CAACE,IAAI,IAAIH,MAAM,CAACI,MAAM,GAAGN,KAAK,EACnCG,IAAI,GAAGL,QAAQ,CAACM,IAAI,EAAE,EACtB;IACAF,MAAM,CAACK,IAAI,CAAC;MACVC,IAAI,EAAEL,IAAI,CAACM,KAAK;MAChBV;IACF,CAAC,CAAC;EACJ;EAEA,IAAIG,MAAM,CAACI,MAAM,GAAGL,GAAG,EAAE;IACvBC,MAAM,CAACA,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC,CAACE,IAAI,GAAI,MAChCP,GAAG,GAAGC,MAAM,CAACI,MAAM,GAAG,CACvB,uBAAsB;EACzB;EAEA,OAAOJ,MAAM;AACf"}