{"version":3,"file":"reporter.js","names":["errorFormatter","getErrorFormatter","tracer","globalTracer","reporterActions","reduxReporterActions","isVerbose","isTruthy","process","env","GATSBY_REPORTER_ISVERBOSE","isLogIntentMessage","msg","type","Reporter","stripIndent","format","chalk","errorMap","setErrorMap","entry","setVerbose","_isVerbose","setNoColor","isNoColor","withoutColors","FORCE_COLOR","level","panic","errorMeta","error","pluginName","prematureEnd","exit","panicOnBuild","reporterError","gatsby_executing_command","details","context","Array","isArray","map","errorItem","sourceMessage","message","Error","id","isPrefixed","includes","structuredError","constructError","createLog","log","render","uptime","prefix","verbose","toFixed","text","LogLevels","Debug","success","Success","info","Info","warn","Warning","Log","pendingActivity","createPendingActivity","completeActivity","status","ActivityStatuses","endActivity","activityTimer","activityArgs","parentSpan","tags","spanArgs","childOf","span","startSpan","createTimerReporter","reporter","phantomActivity","createPhantomReporter","createProgress","total","start","createProgressReporter","_initReporterMessagingInWorker","sendMessage","intentifiedActionCreators","actionCreatorName","Object","keys","args","payload","name","_initReporterMessagingInMain","onMessage","call","_registerAdditionalDiagnosticOutputHandler","handler","registerAdditionalDiagnosticOutputHandler"],"sources":["../../src/reporter/reporter.ts"],"sourcesContent":["import { stripIndent } from \"common-tags\"\nimport chalk from \"chalk\"\n// import { trackError } from \"gatsby-telemetry\"\nimport { globalTracer, Span, SpanContext } from \"opentracing\"\n\nimport * as reduxReporterActions from \"./redux/actions\"\nimport { LogLevels, ActivityStatuses } from \"./constants\"\nimport { getErrorFormatter } from \"./errors\"\nimport constructError from \"../structured-errors/construct-error\"\nimport {\n  IErrorMapEntryPublicApi,\n  ErrorId,\n} from \"../structured-errors/error-map\"\nimport { prematureEnd } from \"./catch-exit-signals\"\nimport { IConstructError, IStructuredError } from \"../structured-errors/types\"\nimport { createTimerReporter, ITimerReporter } from \"./reporter-timer\"\nimport { createPhantomReporter, IPhantomReporter } from \"./reporter-phantom\"\nimport { createProgressReporter, IProgressReporter } from \"./reporter-progress\"\nimport { ErrorMeta, CreateLogAction, ILogIntent } from \"./types\"\nimport {\n  registerAdditionalDiagnosticOutputHandler,\n  AdditionalDiagnosticsOutputHandler,\n} from \"./redux/diagnostics\"\nimport { isTruthy } from \"../core-utils\"\n\nconst errorFormatter = getErrorFormatter()\nconst tracer = globalTracer()\n\nlet reporterActions = reduxReporterActions\n\nexport interface IActivityArgs {\n  id?: string\n  parentSpan?: Span | SpanContext\n  tags?: { [key: string]: any }\n}\n\n// eslint-disable-next-line prefer-const\nlet isVerbose = isTruthy(process.env.GATSBY_REPORTER_ISVERBOSE)\n\nfunction isLogIntentMessage(msg: any): msg is ILogIntent {\n  return msg && msg.type === `LOG_INTENT`\n}\n\n/**\n * Reporter module.\n * @module reporter\n */\nclass Reporter {\n  /**\n   * Strip initial indentation template function.\n   */\n  stripIndent = stripIndent\n  format = chalk\n\n  errorMap: Record<ErrorId, IErrorMapEntryPublicApi> = {}\n\n  /**\n   * Set a custom error map to the reporter. This allows\n   * the reporter to extend the internal error map\n   *\n   * Please note: The entered IDs ideally should be different from the ones we internally use:\n   * https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-cli/src/structured-errors/error-map.ts\n   */\n\n  setErrorMap = (entry: Record<string, IErrorMapEntryPublicApi>): void => {\n    this.errorMap = {\n      ...this.errorMap,\n      ...entry,\n    }\n  }\n\n  /**\n   * Toggle verbosity.\n   */\n  setVerbose = (_isVerbose: boolean = true): void => {\n    isVerbose = _isVerbose\n    process.env.GATSBY_REPORTER_ISVERBOSE = isVerbose ? `1` : `0`\n  }\n\n  /**\n   * Turn off colors in error output.\n   */\n  setNoColor = (isNoColor: boolean = false): void => {\n    if (isNoColor) {\n      errorFormatter.withoutColors()\n    }\n\n    // disables colors in popular terminal output coloring packages\n    //  - chalk: see https://www.npmjs.com/package/chalk#chalksupportscolor\n    //  - ansi-colors: see https://github.com/doowb/ansi-colors/blob/8024126c7115a0efb25a9a0e87bc5e29fd66831f/index.js#L5-L7\n    if (isNoColor) {\n      process.env.FORCE_COLOR = `0`\n      // chalk determines color level at import time. Before we reach this point,\n      // chalk was already imported, so we need to retroactively adjust level\n      chalk.level = 0\n    }\n  }\n\n  /**\n   * Log arguments and exit process with status 1.\n   */\n  panic = (\n    errorMeta: ErrorMeta,\n    error?: Error | Array<Error>,\n    pluginName?: string\n  ): never => {\n    // const reporterError =\n    this.error(errorMeta, error, pluginName)\n    // trackError(`GENERAL_PANIC`, { error: reporterError })\n    prematureEnd()\n    return process.exit(1)\n  }\n\n  panicOnBuild = (\n    errorMeta: ErrorMeta,\n    error?: Error | Array<Error>,\n    pluginName?: string\n  ): IStructuredError | Array<IStructuredError> => {\n    const reporterError = this.error(errorMeta, error, pluginName)\n    // trackError(`BUILD_PANIC`, { error: reporterError })\n    if (process.env.gatsby_executing_command === `build`) {\n      prematureEnd()\n      process.exit(1)\n    }\n    return reporterError\n  }\n\n  error = (\n    errorMeta: ErrorMeta | Array<ErrorMeta>,\n    error?: Error | Array<Error>,\n    pluginName?: string\n  ): IStructuredError | Array<IStructuredError> => {\n    let details: IConstructError[\"details\"] = {\n      context: {},\n    }\n\n    // Many paths to retain backcompat :scream:\n    // 1.\n    //   reporter.error(any, Error);\n    //   reporter.error(any, [Error]);\n    if (error) {\n      if (Array.isArray(error)) {\n        return error.map(errorItem =>\n          this.error(errorMeta, errorItem)\n        ) as Array<IStructuredError>\n      }\n      details.error = error\n      details.context = {\n        sourceMessage: errorMeta + ` ` + error.message,\n      }\n      // 2.\n      //    reporter.error(Error);\n    } else if (errorMeta instanceof Error) {\n      details.error = errorMeta\n      details.context = {\n        sourceMessage: errorMeta.message,\n      }\n      // 3.\n      //    reporter.error([Error]);\n    } else if (Array.isArray(errorMeta)) {\n      // when we get an array of messages, call this function once for each error\n      return errorMeta.map(errorItem =>\n        this.error(errorItem)\n      ) as Array<IStructuredError>\n      // 4.\n      //    reporter.error(errorMeta);\n    } else if (typeof errorMeta === `object`) {\n      details = { ...errorMeta }\n      // 5.\n      //    reporter.error('foo');\n    } else if (typeof errorMeta === `string`) {\n      details.context = {\n        sourceMessage: errorMeta,\n      }\n    }\n\n    if (pluginName) {\n      details.pluginName = pluginName\n      const id = details?.id\n\n      if (id) {\n        const isPrefixed = id.includes(`${pluginName}_`)\n        if (!isPrefixed) {\n          details.id = `${pluginName}_${id}`\n        }\n      }\n    }\n\n    const structuredError = constructError({ details }, this.errorMap)\n\n    if (structuredError) {\n      reporterActions.createLog(structuredError)\n      // trackError(`GENERIC_ERROR`, { error: structuredError })\n    }\n\n    // TODO: remove this once Error component can render this info\n    // log formatted stacktrace\n    if (structuredError.error) {\n      this.log(errorFormatter.render(structuredError.error))\n    }\n    return structuredError\n  }\n\n  /**\n   * Set prefix on uptime.\n   */\n  uptime = (prefix: string): void => {\n    this.verbose(`${prefix}: ${(process.uptime() * 1000).toFixed(3)}ms`)\n  }\n\n  verbose = (text: string): void => {\n    if (isVerbose) {\n      reporterActions.createLog({\n        level: LogLevels.Debug,\n        text,\n      })\n    }\n  }\n\n  success = (text?: string): CreateLogAction =>\n    reporterActions.createLog({ level: LogLevels.Success, text })\n  info = (text?: string): CreateLogAction =>\n    // if (isVerbose) {\n    reporterActions.createLog({ level: LogLevels.Info, text })\n  // }\n\n  warn = (text?: string): CreateLogAction =>\n    reporterActions.createLog({ level: LogLevels.Warning, text })\n  log = (text?: string): CreateLogAction =>\n    reporterActions.createLog({ level: LogLevels.Log, text })\n\n  pendingActivity = reporterActions.createPendingActivity\n\n  completeActivity = (\n    id: string,\n    status: ActivityStatuses = ActivityStatuses.Success\n  ): void => {\n    reporterActions.endActivity({ id, status })\n  }\n\n  /**\n   * Time an activity.\n   */\n  activityTimer = (\n    text: string,\n    activityArgs: IActivityArgs = {},\n    pluginName?: string\n  ): ITimerReporter => {\n    let { parentSpan, id, tags } = activityArgs\n    const spanArgs = parentSpan ? { childOf: parentSpan, tags } : { tags }\n    if (!id) {\n      id = text\n    }\n\n    const span = tracer.startSpan(text, spanArgs)\n\n    return createTimerReporter({\n      text,\n      id,\n      span,\n      reporter: this,\n      reporterActions,\n      pluginName,\n    })\n  }\n\n  /**\n   * Create an Activity that is not visible to the user\n   *\n   * During the lifecycle of the Gatsby process, sometimes we need to do some\n   * async work and wait for it to complete. A typical example of this is a job.\n   * This work should set the status of the process to `in progress` while running and\n   * `complete` (or `failure`) when complete. Activities do just this! However, they\n   * are visible to the user. So this function can be used to create a _hidden_ activity\n   * that while not displayed in the CLI, still triggers a change in process status.\n   */\n  phantomActivity = (\n    text: string,\n    activityArgs: IActivityArgs = {}\n  ): IPhantomReporter => {\n    let { parentSpan, id, tags } = activityArgs\n    const spanArgs = parentSpan ? { childOf: parentSpan, tags } : { tags }\n    if (!id) {\n      id = text\n    }\n\n    const span = tracer.startSpan(text, spanArgs)\n\n    return createPhantomReporter({ id, text, span, reporterActions })\n  }\n\n  /**\n   * Create a progress bar for an activity\n   */\n  createProgress = (\n    text: string,\n    total = 0,\n    start = 0,\n    activityArgs: IActivityArgs = {},\n    pluginName?: string\n  ): IProgressReporter => {\n    let { parentSpan, id, tags } = activityArgs\n    const spanArgs = parentSpan ? { childOf: parentSpan, tags } : { tags }\n    if (!id) {\n      id = text\n    }\n    const span = tracer.startSpan(text, spanArgs)\n\n    return createProgressReporter({\n      id,\n      text,\n      total,\n      start,\n      span,\n      reporter: this,\n      reporterActions,\n      pluginName,\n    })\n  }\n\n  // This method is called by core when initializing worker process, so it can communicate with main process\n  // and dispatch structured logs created by workers to parent process.\n  _initReporterMessagingInWorker(sendMessage: (msg: ILogIntent) => void): void {\n    const intentifiedActionCreators = {}\n    for (const actionCreatorName of Object.keys(reduxReporterActions) as Array<\n      keyof typeof reduxReporterActions\n    >) {\n      // swap each reporter action creator with function that send intent\n      // to main process\n      intentifiedActionCreators[actionCreatorName] = (...args): void => {\n        sendMessage({\n          type: `LOG_INTENT`,\n          payload: {\n            name: actionCreatorName,\n            args,\n          } as any,\n        })\n      }\n    }\n    reporterActions = intentifiedActionCreators as typeof reduxReporterActions\n  }\n\n  // This method is called by core when initializing worker pool, so main process can receive\n  // messages from workers and dispatch structured logs created by workers to parent process.\n  _initReporterMessagingInMain(\n    onMessage: (listener: (msg: ILogIntent | unknown) => void) => void\n  ): void {\n    onMessage(msg => {\n      if (isLogIntentMessage(msg)) {\n        reduxReporterActions[msg.payload.name].call(\n          reduxReporterActions,\n          // @ts-ignore Next line (`...msg.payload.args`) cause \"A spread argument\n          // must either have a tuple type or be passed to a rest parameter\"\n          ...msg.payload.args\n        )\n      }\n    })\n  }\n\n  _registerAdditionalDiagnosticOutputHandler(\n    handler: AdditionalDiagnosticsOutputHandler\n  ): void {\n    registerAdditionalDiagnosticOutputHandler(handler)\n  }\n}\nexport type { Reporter }\nexport const reporter = new Reporter()\n"],"mappings":"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"}