{"version":3,"file":"internal-actions.js","names":["ActivityStatusToLogLevel","ActivityStatuses","Interrupted","ActivityLogLevels","Failed","Success","weShouldExit","signalExit","cancelDelayedSetStatus","pendingStatus","setStatus","status","force","dispatch","currentStatus","getStore","getState","logs","InProgress","type","Actions","SetStatus","payload","pendingOrCurrentStatus","delayedCall","createLog","level","text","statusText","duration","group","code","category","filePath","location","docsUrl","context","activity_current","activity_total","activity_type","activity_uuid","stack","pluginName","Log","timestamp","Date","toJSON","createPendingActivity","id","NotStarted","globalStatus","getGlobalStatus","PendingActivity","ActivityTypes","Pending","startTime","process","hrtime","startActivity","current","total","StartActivity","uuid","v4","endActivity","activity","getActivity","actionsToEmit","durationMS","getElapsedTimeMS","durationS","push","CancelActivity","Cancelled","errored","EndActivity","Hidden","Progress","toFixed","undefined","updateActivity","rest","UpdateActivity","setActivityErrored","ActivityErrored","setActivityStatusText","setActivityTotal","activityTick","increment","setLogs","SetLogs"],"sources":["../../../src/reporter/redux/internal-actions.ts"],"sourcesContent":["import { uuid } from \"../../core-utils\"\n// import { trackCli } from \"gatsby-telemetry\"\nimport signalExit from \"signal-exit\"\nimport { Dispatch } from \"redux\"\n\nimport { getStore } from \".\"\nimport {\n  Actions,\n  ActivityLogLevels,\n  ActivityStatuses,\n  ActivityTypes,\n} from \"../constants\"\nimport {\n  IPendingActivity,\n  ICreateLog,\n  ISetStatus,\n  IStartActivity,\n  ICancelActivity,\n  IEndActivity,\n  IUpdateActivity,\n  IActivityErrored,\n  IGatsbyCLIState,\n  ISetLogs,\n} from \"./types\"\nimport {\n  delayedCall,\n  getActivity,\n  getElapsedTimeMS,\n  getGlobalStatus,\n} from \"./utils\"\nimport { IStructuredError, ErrorCategory } from \"../../structured-errors/types\"\n\nconst ActivityStatusToLogLevel = {\n  [ActivityStatuses.Interrupted]: ActivityLogLevels.Interrupted,\n  [ActivityStatuses.Failed]: ActivityLogLevels.Failed,\n  [ActivityStatuses.Success]: ActivityLogLevels.Success,\n}\n\nlet weShouldExit = false\nsignalExit(() => {\n  weShouldExit = true\n})\n\nlet cancelDelayedSetStatus: (() => void) | null\n\nlet pendingStatus: ActivityStatuses | \"\" = ``\n\n// We debounce \"done\" statuses because activities don't always overlap\n// and there is timing window after one activity ends and before next one starts\n// where technically we are \"done\" (all activities are done).\n// We don't want to emit multiple SET_STATUS events that would toggle between\n// IN_PROGRESS and SUCCESS/FAILED in short succession in those cases.\nexport const setStatus =\n  (status: ActivityStatuses | \"\", force: boolean = false) =>\n  (dispatch: Dispatch<ISetStatus>): void => {\n    const currentStatus = getStore().getState().logs.status\n\n    if (cancelDelayedSetStatus) {\n      cancelDelayedSetStatus()\n      cancelDelayedSetStatus = null\n    }\n\n    if (\n      status !== currentStatus &&\n      (status === ActivityStatuses.InProgress || force || weShouldExit)\n    ) {\n      dispatch({\n        type: Actions.SetStatus,\n        payload: status,\n      })\n      pendingStatus = ``\n    } else {\n      // use pending status if truthy, fallback to current status if we don't have pending status\n      const pendingOrCurrentStatus = pendingStatus || currentStatus\n\n      if (status !== pendingOrCurrentStatus) {\n        pendingStatus = status\n        cancelDelayedSetStatus = delayedCall(() => {\n          setStatus(status, true)(dispatch)\n        }, 1000)\n      }\n    }\n  }\n\nexport const createLog = ({\n  level,\n  text,\n  statusText,\n  duration,\n  group,\n  code,\n  type,\n  category,\n  filePath,\n  location,\n  docsUrl,\n  context,\n  activity_current,\n  activity_total,\n  activity_type,\n  activity_uuid,\n  stack,\n  pluginName,\n}: {\n  level: string\n  text?: string\n  statusText?: string\n  duration?: number\n  group?: string\n  code?: string\n  type?: string\n  category?: keyof typeof ErrorCategory\n  filePath?: string\n  location?: IStructuredError[\"location\"]\n  docsUrl?: string\n  context?: string\n  activity_current?: number\n  activity_total?: number\n  activity_type?: string\n  activity_uuid?: string\n  stack?: IStructuredError[\"stack\"]\n  pluginName?: string\n}): ICreateLog => {\n  return {\n    type: Actions.Log,\n    payload: {\n      level,\n      text: !text ? `\\u2800` : text,\n      statusText,\n      duration,\n      group,\n      code,\n      type,\n      category,\n      filePath,\n      location,\n      docsUrl,\n      context,\n      activity_current,\n      activity_total,\n      activity_type,\n      activity_uuid,\n      timestamp: new Date().toJSON(),\n      stack,\n      pluginName,\n    },\n  }\n}\n\ntype ActionsToEmit = Array<IPendingActivity | ReturnType<typeof setStatus>>\nexport const createPendingActivity = ({\n  id,\n  status = ActivityStatuses.NotStarted,\n}: {\n  id: string\n  status?: ActivityStatuses\n}): ActionsToEmit => {\n  const globalStatus = getGlobalStatus(id, status)\n  return [\n    setStatus(globalStatus),\n    {\n      type: Actions.PendingActivity,\n      payload: {\n        id,\n        type: ActivityTypes.Pending,\n        startTime: process.hrtime(),\n        status,\n      },\n    },\n  ]\n}\n\ntype QueuedStartActivityActions = Array<\n  IStartActivity | ReturnType<typeof setStatus>\n>\nexport const startActivity = ({\n  id,\n  text,\n  type,\n  status = ActivityStatuses.InProgress,\n  current,\n  total,\n}: {\n  id: string\n  text: string\n  type: ActivityTypes\n  status?: ActivityStatuses\n  current?: number\n  total?: number\n}): QueuedStartActivityActions => {\n  const globalStatus = getGlobalStatus(id, status)\n\n  return [\n    setStatus(globalStatus),\n    {\n      type: Actions.StartActivity,\n      payload: {\n        id,\n        uuid: uuid.v4(),\n        text,\n        type,\n        status,\n        startTime: process.hrtime(),\n        statusText: ``,\n        current,\n        total,\n      },\n    },\n  ]\n}\n\ntype QueuedEndActivity = Array<\n  ICancelActivity | IEndActivity | ICreateLog | ReturnType<typeof setStatus>\n>\n\nexport const endActivity = ({\n  id,\n  status,\n}: {\n  id: string\n  status: ActivityStatuses\n}): QueuedEndActivity | null => {\n  const activity = getActivity(id)\n  if (!activity) {\n    return null\n  }\n\n  const actionsToEmit: QueuedEndActivity = []\n  const durationMS = getElapsedTimeMS(activity)\n  const durationS = durationMS / 1000\n\n  if (activity.type === ActivityTypes.Pending) {\n    actionsToEmit.push({\n      type: Actions.CancelActivity,\n      payload: {\n        id,\n        status: ActivityStatuses.Cancelled,\n        type: activity.type,\n        duration: durationS,\n      },\n    })\n  } else if (activity.status === ActivityStatuses.InProgress) {\n    // trackCli(`ACTIVITY_DURATION`, {\n    //   name: activity.text,\n    //   duration: Math.round(durationMS),\n    // })\n\n    if (activity.errored) {\n      status = ActivityStatuses.Failed\n    }\n    actionsToEmit.push({\n      type: Actions.EndActivity,\n      payload: {\n        uuid: activity.uuid,\n        id,\n        status,\n        duration: durationS,\n        type: activity.type,\n      },\n    })\n\n    if (activity.type !== ActivityTypes.Hidden) {\n      actionsToEmit.push(\n        createLog({\n          text: activity.text,\n          level: ActivityStatusToLogLevel[status],\n          duration: durationS,\n          statusText:\n            activity.statusText ||\n            (status === ActivityStatuses.Success &&\n            activity.type === ActivityTypes.Progress\n              ? `${activity.current}/${activity.total} ${(\n                  (activity.total || 0) / durationS\n                ).toFixed(2)}/s`\n              : undefined),\n          activity_uuid: activity.uuid,\n          activity_current: activity.current,\n          activity_total: activity.total,\n          activity_type: activity.type,\n        })\n      )\n    }\n  }\n\n  const globalStatus = getGlobalStatus(id, status)\n  actionsToEmit.push(setStatus(globalStatus))\n\n  return actionsToEmit\n}\n\nexport const updateActivity = ({\n  id = ``,\n  ...rest\n}: {\n  id: string\n  statusText?: string\n  total?: number\n  current?: number\n}): IUpdateActivity | null => {\n  const activity = getActivity(id)\n  if (!activity) {\n    return null\n  }\n\n  return {\n    type: Actions.UpdateActivity,\n    payload: {\n      uuid: activity.uuid,\n      id,\n      ...rest,\n    },\n  }\n}\n\nexport const setActivityErrored = ({\n  id,\n}: {\n  id: string\n}): IActivityErrored | null => {\n  const activity = getActivity(id)\n  if (!activity) {\n    return null\n  }\n\n  return {\n    type: Actions.ActivityErrored,\n    payload: {\n      id,\n    },\n  }\n}\n\nexport const setActivityStatusText = ({\n  id,\n  statusText,\n}: {\n  id: string\n  statusText: string\n}): IUpdateActivity | null =>\n  updateActivity({\n    id,\n    statusText,\n  })\n\nexport const setActivityTotal = ({\n  id,\n  total,\n}: {\n  id: string\n  total: number\n}): IUpdateActivity | null =>\n  updateActivity({\n    id,\n    total,\n  })\n\nexport const activityTick = ({\n  id,\n  increment = 1,\n}: {\n  id: string\n  increment: number\n}): IUpdateActivity | null => {\n  const activity = getActivity(id)\n  if (!activity) {\n    return null\n  }\n\n  return updateActivity({\n    id,\n    current: (activity.current || 0) + increment,\n  })\n}\n\nexport const setLogs = (logs: IGatsbyCLIState): ISetLogs => {\n  return {\n    type: Actions.SetLogs,\n    payload: logs,\n  }\n}\n"],"mappings":"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"}