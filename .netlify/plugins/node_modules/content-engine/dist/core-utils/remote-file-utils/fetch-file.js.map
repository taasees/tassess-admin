{"version":3,"file":"fetch-file.js","names":["STALL_RETRY_LIMIT","process","env","GATSBY_STALL_RETRY_LIMIT","parseInt","STALL_TIMEOUT","GATSBY_STALL_TIMEOUT","CONNECTION_TIMEOUT","GATSBY_CONNECTION_TIMEOUT","INCOMPLETE_RETRY_LIMIT","GATSBY_INCOMPLETE_RETRY_LIMIT","BACKOFF_TIME","NODE_ENV","range","start","end","Array","fill","map","_","i","STATUS_CODES_TO_RETRY","ERROR_CODES_TO_RETRY","requestRemoteNode","url","headers","tmpFilename","httpOptions","attempt","default","got","RequestError","require","Promise","resolve","reject","timeout","fsWriteStream","fs","createWriteStream","on","error","clearTimeout","handleTimeout","close","remove","resetTimeout","setTimeout","responseStream","stream","send","isStream","haveAllBytesBeenWritten","totalSize","progress","total","transferred","pipe","statusCode","response","errorCode","code","message","includes","undefined","join","details","Object","entries","method","options","responseStatusCode","responseStatusMessage","statusMessage","requestHeaders","responseHeaders","reduce","a","k","v","keys","length","JSON","stringify","once","setImmediate"],"sources":["../../../src/core-utils/remote-file-utils/fetch-file.ts"],"sourcesContent":["import fs from \"fs-extra\"\nimport type { IncomingMessage } from \"http\"\nimport type { Headers, Options } from \"got\"\nimport type { GatsbyCache } from \"../../types\"\n\n// keeping the I for backward compatibility\nexport type IFetchRemoteFileOptions = {\n  url: string\n  auth?: {\n    htaccess_pass?: string\n    htaccess_user?: string\n  }\n  httpHeaders?: Headers\n  ext?: string\n  name?: string\n  cacheKey?: string\n  excludeDigest?: boolean\n} & (\n  | {\n      directory: string\n      cache?: never\n    }\n  | {\n      directory?: never\n      cache: GatsbyCache\n    }\n)\n\nconst STALL_RETRY_LIMIT = process.env.GATSBY_STALL_RETRY_LIMIT\n  ? parseInt(process.env.GATSBY_STALL_RETRY_LIMIT, 10)\n  : 3\nconst STALL_TIMEOUT = process.env.GATSBY_STALL_TIMEOUT\n  ? parseInt(process.env.GATSBY_STALL_TIMEOUT, 10)\n  : 30000\n\nconst CONNECTION_TIMEOUT = process.env.GATSBY_CONNECTION_TIMEOUT\n  ? parseInt(process.env.GATSBY_CONNECTION_TIMEOUT, 10)\n  : 30000\n\nconst INCOMPLETE_RETRY_LIMIT = process.env.GATSBY_INCOMPLETE_RETRY_LIMIT\n  ? parseInt(process.env.GATSBY_INCOMPLETE_RETRY_LIMIT, 10)\n  : 3\n\n// jest doesn't allow us to run all timings infinitely, so we set it 0  in tests\nconst BACKOFF_TIME = process.env.NODE_ENV === `test` ? 0 : 1000\n\nfunction range(start: number, end: number): Array<number> {\n  return Array(end - start)\n    .fill(null)\n    .map((_, i) => start + i)\n}\n\n// Based on the defaults of https://github.com/JustinBeckwith/retry-axios\nconst STATUS_CODES_TO_RETRY = [...range(100, 200), 429, ...range(500, 600)]\nconst ERROR_CODES_TO_RETRY = [\n  `ETIMEDOUT`,\n  `ECONNRESET`,\n  `EADDRINUSE`,\n  `ECONNREFUSED`,\n  `EPIPE`,\n  `ENOTFOUND`,\n  `ENETUNREACH`,\n  `EAI_AGAIN`,\n  `ERR_NON_2XX_3XX_RESPONSE`,\n  `ERR_GOT_REQUEST_ERROR`,\n]\n\n/**\n * requestRemoteNode\n * --\n * Download the requested file\n *\n * @param  {String}   url\n * @param  {Headers}  headers\n * @param  {String}   tmpFilename\n * @param  {Object}   httpOptions\n * @param  {number}   attempt\n * @return {Promise<Object>}  Resolves with the [http Result Object]{@link https://nodejs.org/api/http.html#http_class_http_serverresponse}\n */\nexport async function requestRemoteNode(\n  url: string | URL,\n  headers: Headers,\n  tmpFilename: string,\n  httpOptions?: Options,\n  attempt: number = 1\n): Promise<IncomingMessage> {\n  // TODO(v5): use dynamic import syntax - it's currently blocked because older v4 versions have V8-compile-cache\n  // const { default: got, RequestError } = await import(`got`)\n  const { default: got, RequestError } = require(`got`)\n\n  return new Promise((resolve, reject) => {\n    let timeout: NodeJS.Timeout\n    const fsWriteStream = fs.createWriteStream(tmpFilename)\n    fsWriteStream.on(`error`, (error: unknown) => {\n      if (timeout) {\n        clearTimeout(timeout)\n      }\n\n      reject(error)\n    })\n\n    // Called if we stall for 30s without receiving any data\n    const handleTimeout = async (): Promise<void> => {\n      fsWriteStream.close()\n      await fs.remove(tmpFilename)\n\n      if (attempt < STALL_RETRY_LIMIT) {\n        // Retry by calling ourself recursively\n        resolve(\n          requestRemoteNode(url, headers, tmpFilename, httpOptions, attempt + 1)\n        )\n      } else {\n        // TODO move to new Error type\n        // eslint-disable-next-line prefer-promise-reject-errors\n        reject(`Failed to download ${url} after ${STALL_RETRY_LIMIT} attempts`)\n      }\n    }\n\n    const resetTimeout = (): void => {\n      if (timeout) {\n        clearTimeout(timeout)\n      }\n      timeout = setTimeout(handleTimeout, STALL_TIMEOUT)\n    }\n    const responseStream = got.stream(url, {\n      headers,\n      timeout: {\n        send: CONNECTION_TIMEOUT, // https://github.com/sindresorhus/got#timeout\n      },\n      ...httpOptions,\n      isStream: true,\n    })\n\n    let haveAllBytesBeenWritten = false\n    // Fixes a bug in latest got where progress.total gets reset when stream ends, even if it wasn't complete.\n    let totalSize: number | null = null\n    responseStream.on(`downloadProgress`, progress => {\n      // reset the timeout on each progress event to make sure large files don't timeout\n      resetTimeout()\n\n      if (\n        progress.total != null &&\n        (!totalSize || totalSize < progress.total)\n      ) {\n        totalSize = progress.total\n      }\n\n      if (progress.transferred === totalSize || totalSize === null) {\n        haveAllBytesBeenWritten = true\n      }\n    })\n\n    responseStream.pipe(fsWriteStream)\n\n    // If there's a 400/500 response or other error.\n    // it will trigger a finish event on fsWriteStream\n    responseStream.on(`error`, async error => {\n      if (timeout) {\n        clearTimeout(timeout)\n      }\n\n      fsWriteStream.close()\n      await fs.remove(tmpFilename)\n\n      if (!(error instanceof RequestError)) {\n        return reject(error)\n      }\n\n      // This is a replacement for the stream retry logic of got\n      // till we can update all got instances to v12\n      // https://github.com/sindresorhus/got/blob/main/documentation/7-retry.md\n      // https://github.com/sindresorhus/got/blob/main/documentation/3-streams.md#retry\n      const statusCode = error.response?.statusCode\n      const errorCode = error.code || error.message // got gives error.code, but msw/node returns the error codes in the message only\n\n      if (\n        // HTTP STATUS CODE ERRORS\n        (statusCode && STATUS_CODES_TO_RETRY.includes(statusCode)) ||\n        // GENERAL NETWORK ERRORS\n        (errorCode && ERROR_CODES_TO_RETRY.includes(errorCode))\n      ) {\n        if (attempt < INCOMPLETE_RETRY_LIMIT) {\n          setTimeout(() => {\n            resolve(\n              requestRemoteNode(\n                url,\n                headers,\n                tmpFilename,\n                httpOptions,\n                attempt + 1\n              )\n            )\n          }, BACKOFF_TIME * attempt)\n\n          return undefined\n        }\n        // Throw user friendly error\n        error.message = [\n          `Unable to fetch:`,\n          url,\n          `---`,\n          `Reason: ${error.message}`,\n          `---`,\n        ].join(`\\n`)\n\n        // Gather details about what went wrong from the error object and the request\n        const details = Object.entries({\n          attempt,\n          method: error.options?.method,\n          errorCode: error.code,\n          responseStatusCode: error.response?.statusCode,\n          responseStatusMessage: error.response?.statusMessage,\n          requestHeaders: error.options?.headers,\n          responseHeaders: error.response?.headers,\n        })\n          // Remove undefined values from the details to keep it clean\n          .reduce((a, [k, v]) => (v === undefined ? a : ((a[k] = v), a)), {})\n\n        if (Object.keys(details).length) {\n          error.message = [\n            error.message,\n            `Fetch details:`,\n            JSON.stringify(details, null, 2),\n            `---`,\n          ].join(`\\n`)\n        }\n      }\n\n      return reject(error)\n    })\n\n    responseStream.on(`response`, response => {\n      resetTimeout()\n\n      fsWriteStream.once(`finish`, async () => {\n        if (timeout) {\n          clearTimeout(timeout)\n        }\n\n        // We have an incomplete download\n        if (!haveAllBytesBeenWritten) {\n          await fs.remove(tmpFilename)\n\n          if (attempt < INCOMPLETE_RETRY_LIMIT) {\n            // let's give node time to remove the file\n            setImmediate(() =>\n              resolve(\n                requestRemoteNode(\n                  url,\n                  headers,\n                  tmpFilename,\n                  httpOptions,\n                  attempt + 1\n                )\n              )\n            )\n\n            return undefined\n          } else {\n            // TODO move to new Error type\n            // eslint-disable-next-line prefer-promise-reject-errors\n            return reject(\n              `Failed to download ${url} after ${INCOMPLETE_RETRY_LIMIT} attempts`\n            )\n          }\n        }\n\n        return resolve(response)\n      })\n    })\n  })\n}\n"],"mappings":"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"}