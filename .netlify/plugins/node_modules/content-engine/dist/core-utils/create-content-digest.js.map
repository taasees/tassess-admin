{"version":3,"file":"create-content-digest.js","names":["hasher","objectHash","coerce","alg","enc","sort","map","object","array","set","hashPrimitive","input","crypto","createHash","update","digest","createContentDigest","Buffer","isBuffer","hash"],"sources":["../../src/core-utils/create-content-digest.ts"],"sourcesContent":["import crypto, { BinaryLike } from \"crypto\"\nimport objectHash from \"node-object-hash\"\n\nconst hasher = objectHash({\n  coerce: false,\n  alg: `md5`,\n  enc: `hex`,\n  sort: {\n    map: true,\n    object: true,\n    array: false,\n    set: false,\n  },\n})\n\nconst hashPrimitive = (input: BinaryLike | string): string =>\n  crypto.createHash(`md5`).update(input).digest(`hex`)\n\n/**\n * Hashes an input using md5 hash of hexadecimal digest.\n *\n * @param input The input to encrypt\n * @return The content digest\n */\n\nexport const createContentDigest = (\n  input: BinaryLike | string | any\n): string => {\n  if (typeof input === `object` && !Buffer.isBuffer(input)) {\n    return hasher.hash(input)\n  }\n\n  return hashPrimitive(input)\n}\n"],"mappings":";;;;;AAAA;AACA;AAEA,MAAMA,MAAM,GAAG,IAAAC,uBAAU,EAAC;EACxBC,MAAM,EAAE,KAAK;EACbC,GAAG,EAAG,KAAI;EACVC,GAAG,EAAG,KAAI;EACVC,IAAI,EAAE;IACJC,GAAG,EAAE,IAAI;IACTC,MAAM,EAAE,IAAI;IACZC,KAAK,EAAE,KAAK;IACZC,GAAG,EAAE;EACP;AACF,CAAC,CAAC;AAEF,MAAMC,aAAa,GAAIC,KAA0B,IAC/CC,eAAM,CAACC,UAAU,CAAE,KAAI,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC,CAACI,MAAM,CAAE,KAAI,CAAC;;AAEtD;AACA;AACA;AACA;AACA;AACA;;AAEO,MAAMC,mBAAmB,GAC9BL,KAAgC,IACrB;EACX,IAAI,OAAOA,KAAK,KAAM,QAAO,IAAI,CAACM,MAAM,CAACC,QAAQ,CAACP,KAAK,CAAC,EAAE;IACxD,OAAOX,MAAM,CAACmB,IAAI,CAACR,KAAK,CAAC;EAC3B;EAEA,OAAOD,aAAa,CAACC,KAAK,CAAC;AAC7B,CAAC;AAAA"}