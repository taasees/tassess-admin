"use strict";

exports.__esModule = true;
exports.getDataStore = getDataStore;
var _createRequireFromPath = require("./../core-utils/create-require-from-path");
var _redux = require("../redux");
const dataStores = new Map();
function getDataStore(dbPath) {
  const dbName = dbPath || `default`;
  if (dataStores.has(dbName)) {
    return dataStores.get(dbName);
  }
  const {
    setupLmdbStore
  } = require(`./lmdb/setup-datastore`);
  dataStores.set(dbName, setupLmdbStore({
    dbPath
  }));
  return dataStores.get(dbName);
}
const gatsbyRedux = (0, _createRequireFromPath.requireFromInstalledGatsbyDist)(`redux/index.js`);

// this will log twice if we're hooking into the gatsby emitter
if (!(gatsbyRedux !== null && gatsbyRedux !== void 0 && gatsbyRedux.emitter)) {
  // It is possible that the store is not initialized yet when calling `DELETE_CACHE`.
  //  The code below ensures we wipe cache from the proper store
  //  (mostly relevant for tests)
  _redux.emitter.on(`DELETE_CACHE`, action => {
    getDataStore(action.dbPath);
  });
}
//# sourceMappingURL=datastore.js.map