{"version":3,"file":"datastore.js","names":["dataStores","Map","getDataStore","dbPath","dbName","has","get","setupLmdbStore","require","set","gatsbyRedux","requireFromInstalledGatsbyDist","emitter","on","action"],"sources":["../../src/datastore/datastore.ts"],"sourcesContent":["import { requireFromInstalledGatsbyDist } from \"./../core-utils/create-require-from-path\"\nimport { IDataStore } from \"./types\"\nimport { emitter } from \"../redux\"\n\nconst dataStores = new Map<string, IDataStore>()\n\nexport function getDataStore(dbPath?: string): IDataStore {\n  const dbName = dbPath || `default`\n  if (dataStores.has(dbName)) {\n    return dataStores.get(dbName) as IDataStore\n  }\n  const { setupLmdbStore } = require(`./lmdb/setup-datastore`)\n  dataStores.set(\n    dbName,\n    setupLmdbStore({\n      dbPath,\n    })\n  )\n\n  return dataStores.get(dbName) as IDataStore\n}\n\nconst gatsbyRedux = requireFromInstalledGatsbyDist(`redux/index.js`)\n\n// this will log twice if we're hooking into the gatsby emitter\nif (!gatsbyRedux?.emitter) {\n  // It is possible that the store is not initialized yet when calling `DELETE_CACHE`.\n  //  The code below ensures we wipe cache from the proper store\n  //  (mostly relevant for tests)\n  emitter.on(`DELETE_CACHE`, action => {\n    getDataStore(action.dbPath)\n  })\n}\n"],"mappings":";;;;AAAA;AAEA;AAEA,MAAMA,UAAU,GAAG,IAAIC,GAAG,EAAsB;AAEzC,SAASC,YAAY,CAACC,MAAe,EAAc;EACxD,MAAMC,MAAM,GAAGD,MAAM,IAAK,SAAQ;EAClC,IAAIH,UAAU,CAACK,GAAG,CAACD,MAAM,CAAC,EAAE;IAC1B,OAAOJ,UAAU,CAACM,GAAG,CAACF,MAAM,CAAC;EAC/B;EACA,MAAM;IAAEG;EAAe,CAAC,GAAGC,OAAO,CAAE,wBAAuB,CAAC;EAC5DR,UAAU,CAACS,GAAG,CACZL,MAAM,EACNG,cAAc,CAAC;IACbJ;EACF,CAAC,CAAC,CACH;EAED,OAAOH,UAAU,CAACM,GAAG,CAACF,MAAM,CAAC;AAC/B;AAEA,MAAMM,WAAW,GAAG,IAAAC,qDAA8B,EAAE,gBAAe,CAAC;;AAEpE;AACA,IAAI,EAACD,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEE,OAAO,GAAE;EACzB;EACA;EACA;EACAA,cAAO,CAACC,EAAE,CAAE,cAAa,EAAEC,MAAM,IAAI;IACnCZ,YAAY,CAACY,MAAM,CAACX,MAAM,CAAC;EAC7B,CAAC,CAAC;AACJ"}