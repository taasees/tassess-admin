{"version":3,"file":"types.js","names":["isImage","node","mimeType","Error","startsWith"],"sources":["../../../src/plugin-utils/polyfill-remote-file/types.ts"],"sourcesContent":["import type { Node, GatsbyNode, NodeInput } from \"../../types\"\n\ninterface IRemoteFileNodeFields {\n  url: string\n  mimeType: string\n  filename: string\n  filesize?: number\n}\n\nexport interface IRemoteFileNode extends IRemoteFileNodeFields, Node {}\n\nexport interface IRemoteFileNodeInput\n  extends IRemoteFileNodeFields,\n    NodeInput {}\n\ninterface IRemoteImageNodeFields {\n  width: number\n  height: number\n  placeholderUrl?: string\n}\n\nexport interface IRemoteImageNode\n  extends IRemoteImageNodeFields,\n    IRemoteFileNode {}\n\nexport interface IRemoteImageNodeInput\n  extends IRemoteImageNodeFields,\n    IRemoteFileNodeInput {}\n\ntype GraphqlType<T> = T extends number\n  ? \"Int\" | \"Float\"\n  : T extends boolean\n  ? \"Boolean\"\n  : string\n\nexport interface IGraphQLFieldConfigDefinition<\n  TSource,\n  R,\n  TArgs = Record<string, unknown>\n> {\n  type: string\n  description?: string\n  args?: {\n    [Property in keyof TArgs]:\n      | GraphqlType<TArgs[Property]>\n      | {\n          type: GraphqlType<TArgs[Property]>\n          description?: string\n          defaultValue?: TArgs[Property]\n        }\n  }\n  resolve(source: TSource, args: TArgs): R\n}\n\nexport type SchemaBuilder = Parameters<\n  NonNullable<GatsbyNode[\"createSchemaCustomization\"]>\n>[0][\"schema\"]\n\nexport type ImageFit = import(\"sharp\").FitEnum[keyof import(\"sharp\").FitEnum]\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\"\nexport type ImageLayout = \"fixed\" | \"constrained\" | \"fullWidth\"\nexport type ImageCropFocus =\n  | \"center\"\n  | \"top\"\n  | \"right\"\n  | \"bottom\"\n  | \"left\"\n  | \"entropy\"\n  | \"edges\"\n  | \"faces\"\n\nexport type WidthOrHeight =\n  | { width: number; height: number }\n  | { width: number; height?: never }\n  | { width?: never; height: number }\n\nexport type CalculateImageSizesArgs = {\n  fit: ImageFit\n  layout: ImageLayout\n  outputPixelDensities: Array<number>\n  breakpoints?: Array<number>\n  aspectRatio?: number\n} & WidthOrHeight\n\nexport function isImage(node: {\n  mimeType: IRemoteFileNode[\"mimeType\"]\n}): node is IRemoteImageNode {\n  if (!node.mimeType) {\n    throw new Error(\n      `RemoteFileNode does not have a mimeType. The field is required.`\n    )\n  }\n\n  return node.mimeType.startsWith(`image/`) && node.mimeType !== `image/svg+xml`\n}\n"],"mappings":";;;;AAoFO,SAASA,OAAO,CAACC,IAEvB,EAA4B;EAC3B,IAAI,CAACA,IAAI,CAACC,QAAQ,EAAE;IAClB,MAAM,IAAIC,KAAK,CACZ,iEAAgE,CAClE;EACH;EAEA,OAAOF,IAAI,CAACC,QAAQ,CAACE,UAAU,CAAE,QAAO,CAAC,IAAIH,IAAI,CAACC,QAAQ,KAAM,eAAc;AAChF"}