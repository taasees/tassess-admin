{"version":3,"file":"resize-resolver.js","names":["DEFAULT_QUALITY","allowedFormats","resizeResolver","source","args","actions","store","isImage","format","quality","includes","Error","url","width","height","formats","validateAndNormalizeFormats","getImageFormatFromMimeType","mimeType","calculateImageDimensions","shouldDispatch","dispatchLocalImageServiceJob","filename","contentDigest","internal","src","generateImageUrl","generateResizeFieldConfig","enums","type","aspectRatio","fit","getTypeName","defaultValue","getField","value","description","stripIndent","cropFocus","List","resolve"],"sources":["../../../../src/plugin-utils/polyfill-remote-file/graphql/resize-resolver.ts"],"sourcesContent":["import { generateImageUrl } from \"../utils/url-generator\"\nimport { getImageFormatFromMimeType } from \"../utils/mime-type-helpers\"\nimport { stripIndent } from \"../utils/strip-indent\"\nimport {\n  dispatchLocalImageServiceJob,\n  shouldDispatch,\n} from \"../jobs/dispatchers\"\nimport { isImage } from \"../types\"\nimport { validateAndNormalizeFormats, calculateImageDimensions } from \"./utils\"\n\nimport type { Actions, Store } from \"../../../types\"\nimport type {\n  IRemoteFileNode,\n  IGraphQLFieldConfigDefinition,\n  ImageFit,\n  ImageFormat,\n  ImageCropFocus,\n  WidthOrHeight,\n} from \"../types\"\nimport type { getRemoteFileEnums } from \"./get-remote-file-enums\"\n\ninterface IResizeArgs {\n  fit: ImageFit\n  format: ImageFormat\n  cropFocus: Array<ImageCropFocus>\n  quality: number\n  aspectRatio: number\n}\n\nconst DEFAULT_QUALITY = 75\n\nconst allowedFormats: Array<ImageFormat> = [\n  `jpg`,\n  `png`,\n  `webp`,\n  `avif`,\n  `auto`,\n]\n\nexport async function resizeResolver(\n  source: IRemoteFileNode,\n  args: Partial<IResizeArgs> & WidthOrHeight,\n  actions: Actions,\n  store?: Store\n): Promise<{\n  width: number\n  height: number\n  src: string\n} | null> {\n  if (!isImage(source)) {\n    return null\n  }\n\n  if (!args.format) {\n    args.format = `auto`\n  }\n\n  if (!args.quality) {\n    args.quality = DEFAULT_QUALITY\n  }\n\n  if (!allowedFormats.includes(args.format)) {\n    throw new Error(\n      `Unknown format \"${args.format}\" was given to resize ${source.url}`\n    )\n  }\n\n  if (!args.width && !args.height) {\n    throw new Error(`No width or height is given to resize \"${source.url}\"`)\n  }\n\n  const formats = validateAndNormalizeFormats(\n    [args.format],\n    getImageFormatFromMimeType(source.mimeType)\n  )\n  const [format] = formats\n  const { width, height } = calculateImageDimensions(\n    source,\n    args as IResizeArgs & WidthOrHeight\n  )\n\n  if (shouldDispatch()) {\n    dispatchLocalImageServiceJob(\n      {\n        url: source.url,\n        mimeType: source.mimeType,\n        filename: source.filename,\n        contentDigest: source.internal.contentDigest,\n      },\n      {\n        ...(args as IResizeArgs),\n        width,\n        height,\n        format,\n      },\n      actions,\n      store\n    )\n  }\n\n  const src = generateImageUrl(\n    source,\n    {\n      ...(args as IResizeArgs),\n      width,\n      height,\n      format,\n    },\n    store\n  )\n\n  return {\n    src,\n    width,\n    height,\n  }\n}\n\nexport function generateResizeFieldConfig(\n  enums: ReturnType<typeof getRemoteFileEnums>,\n  actions: Actions,\n  store?: Store\n): IGraphQLFieldConfigDefinition<\n  IRemoteFileNode,\n  ReturnType<typeof resizeResolver>,\n  IResizeArgs & WidthOrHeight\n> {\n  return {\n    type: `RemoteFileResize`,\n    args: {\n      width: `Int`,\n      height: `Int`,\n      aspectRatio: `Float`,\n      fit: {\n        type: enums.fit.getTypeName(),\n        defaultValue: enums.fit.getField(`COVER`).value,\n      },\n      format: {\n        type: enums.format.getTypeName(),\n        defaultValue: enums.format.getField(`AUTO`).value,\n        description: stripIndent`\n      The image formats to generate. Valid values are AUTO (meaning the same format as the source image), JPG, PNG, WEBP and AVIF.\n      The default value is [AUTO, WEBP, AVIF], and you should rarely need to change this. Take care if you specify JPG or PNG when you do\n      not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying\n      both PNG and JPG is not supported and will be ignored.`,\n      },\n      cropFocus: {\n        type: enums.cropFocus.List.getTypeName(),\n      },\n      quality: {\n        type: `Int`,\n        defaultValue: DEFAULT_QUALITY,\n      },\n    },\n    resolve(source, args): ReturnType<typeof resizeResolver> {\n      return resizeResolver(source, args, actions, store)\n    },\n  }\n}\n"],"mappings":"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"}