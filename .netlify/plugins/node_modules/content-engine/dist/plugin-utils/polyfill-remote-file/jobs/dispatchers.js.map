{"version":3,"file":"dispatchers.js","names":["shouldDispatch","process","env","GATSBY_CLOUD_IMAGE_CDN","NODE_ENV","dispatchLocalFileServiceJob","url","filename","contentDigest","actions","store","GATSBY_VERSION","getGatsbyVersion","publicUrl","generateFileUrl","split","unshift","outputFilename","decodeURI","pop","httpHeaders","getRequestHeadersForUrl","createJobV2","name","inputPaths","outputDir","path","join","global","__GATSBY","root","cwd","filter","Boolean","args","version","resolve","__dirname","dispatchLocalImageServiceJob","mimeType","imageArgs","generateImageUrl","internal"],"sources":["../../../../src/plugin-utils/polyfill-remote-file/jobs/dispatchers.ts"],"sourcesContent":["import path from \"path\"\nimport { getGatsbyVersion } from \"../utils/get-gatsby-version\"\nimport { generateFileUrl, generateImageUrl } from \"../utils/url-generator\"\nimport type { Actions, Store } from \"../../../types\"\nimport { getRequestHeadersForUrl } from \"../utils/get-request-headers-for-url\"\n\nexport function shouldDispatch(): boolean {\n  return (\n    !(\n      process.env.GATSBY_CLOUD_IMAGE_CDN === `1` ||\n      process.env.GATSBY_CLOUD_IMAGE_CDN === `true`\n    ) && process.env.NODE_ENV === `production`\n  )\n}\n\nexport function dispatchLocalFileServiceJob(\n  {\n    url,\n    filename,\n    contentDigest,\n  }: { url: string; filename: string; contentDigest: string },\n  actions: Actions,\n  store?: Store\n): void {\n  const GATSBY_VERSION = getGatsbyVersion()\n  const publicUrl = generateFileUrl(\n    {\n      url,\n      filename,\n    },\n    store\n  ).split(`/`)\n\n  publicUrl.unshift(`public`)\n  // get filename and remove querystring\n  const outputFilename = decodeURI(publicUrl.pop()?.split(`?`)?.[0] as string)\n\n  const httpHeaders = getRequestHeadersForUrl(url, store)\n\n  actions.createJobV2(\n    {\n      name: `FILE_CDN`,\n      inputPaths: [],\n      // we know it's an image so we just mimic an image\n      outputDir: path.join(\n        global.__GATSBY?.root || process.cwd(),\n        ...publicUrl.filter(Boolean)\n      ),\n      args: {\n        url,\n        filename: outputFilename,\n        contentDigest,\n        httpHeaders,\n      },\n    },\n    {\n      name: `gatsby`,\n      // @ts-ignore - version is allowed\n      version: GATSBY_VERSION,\n      resolve: __dirname,\n    }\n  )\n}\n\nexport function dispatchLocalImageServiceJob(\n  {\n    url,\n    filename,\n    mimeType,\n    contentDigest,\n  }: {\n    url: string\n    filename: string\n    mimeType: string\n    contentDigest: string\n  },\n  imageArgs: Parameters<typeof generateImageUrl>[1],\n  actions: Actions,\n  store?: Store\n): void {\n  const GATSBY_VERSION = getGatsbyVersion()\n  const publicUrl = generateImageUrl(\n    {\n      url,\n      mimeType,\n      filename,\n      internal: { contentDigest },\n    },\n    imageArgs,\n    store\n  ).split(`/`)\n  publicUrl.unshift(`public`)\n  // get filename and remove querystring\n  const outputFilename = decodeURI(publicUrl.pop()?.split(`?`)?.[0] as string)\n\n  const httpHeaders = getRequestHeadersForUrl(url, store) as\n    | Record<string, string>\n    | undefined\n\n  actions.createJobV2(\n    {\n      name: `IMAGE_CDN`,\n      inputPaths: [],\n      outputDir: path.join(\n        global.__GATSBY?.root || process.cwd(),\n        ...publicUrl.filter(Boolean)\n      ),\n      args: {\n        url,\n        filename: outputFilename,\n        contentDigest,\n        httpHeaders,\n        ...imageArgs,\n      },\n    },\n    {\n      name: `gatsby`,\n      // @ts-ignore - version is allowed\n      version: GATSBY_VERSION,\n      resolve: __dirname,\n    }\n  )\n}\n"],"mappings":"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"}