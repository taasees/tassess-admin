{"version":3,"file":"http-routes.js","names":["polyfillImageServiceDevRoutes","app","store","hasFeature","addImageRoutes","get","req","res","outputDir","path","join","global","__GATSBY","root","process","cwd","url","query","ImageCDNUrlKeys","URL","filePath","fetchRemoteFile","directory","name","params","filename","httpHeaders","getRequestHeadersForUrl","fs","createReadStream","pipe","remoteUrl","decodeURIComponent","searchParams","URLSearchParams","ARGS","resizeParams","width","height","quality","format","key","value","Number","transformImage","args","setHeader","getFileExtensionFromMimeType","extname"],"sources":["../../../src/plugin-utils/polyfill-remote-file/http-routes.ts"],"sourcesContent":["import path from \"path\"\nimport fs from \"fs-extra\"\nimport { fetchRemoteFile } from \"../../core-utils/fetch-remote-file\"\nimport { hasFeature } from \"../has-feature\"\nimport { ImageCDNUrlKeys } from \"./utils/url-generator\"\nimport { getFileExtensionFromMimeType } from \"./utils/mime-type-helpers\"\nimport { transformImage } from \"./transform-images\"\nimport { getRequestHeadersForUrl } from \"./utils/get-request-headers-for-url\"\n\nimport type { Application } from \"express\"\nimport type { Store } from \"../../types\"\n\nexport function polyfillImageServiceDevRoutes(\n  app: Application,\n  store?: Store\n): void {\n  if (hasFeature(`image-cdn`)) {\n    return\n  }\n\n  addImageRoutes(app, store)\n}\n\nexport function addImageRoutes(app: Application, store?: Store): Application {\n  app.get(`/_gatsby/file/:url/:filename`, async (req, res) => {\n    const outputDir = path.join(\n      global.__GATSBY?.root || process.cwd(),\n      `public`,\n      `_gatsby`,\n      `file`\n    )\n\n    const url = req.query[ImageCDNUrlKeys.URL] as string\n\n    const filePath = await fetchRemoteFile({\n      directory: outputDir,\n      url,\n      name: req.params.filename,\n      httpHeaders: getRequestHeadersForUrl(url, store),\n    })\n\n    fs.createReadStream(filePath).pipe(res)\n  })\n\n  app.get(`/_gatsby/image/:url/:params/:filename`, async (req, res) => {\n    const { url, params, filename } = req.params\n    const remoteUrl = decodeURIComponent(\n      req.query[ImageCDNUrlKeys.URL] as string\n    )\n    const searchParams = new URLSearchParams(\n      decodeURIComponent(req.query[ImageCDNUrlKeys.ARGS] as string)\n    )\n\n    const resizeParams: {\n      width: number\n      height: number\n      quality: number\n      format: string\n    } = {\n      width: 0,\n      height: 0,\n      quality: 75,\n      format: ``,\n    }\n\n    for (const [key, value] of searchParams) {\n      switch (key) {\n        case `w`: {\n          resizeParams.width = Number(value)\n          break\n        }\n        case `h`: {\n          resizeParams.height = Number(value)\n          break\n        }\n        case `fm`: {\n          resizeParams.format = value\n          break\n        }\n        case `q`: {\n          resizeParams.quality = Number(value)\n          break\n        }\n      }\n    }\n\n    const outputDir = path.join(\n      global.__GATSBY?.root || process.cwd(),\n      `public`,\n      `_gatsby`,\n      `_image`,\n      url,\n      params\n    )\n\n    const httpHeaders = getRequestHeadersForUrl(remoteUrl, store) as\n      | Record<string, string>\n      | undefined\n\n    const filePath = await transformImage({\n      outputDir,\n      args: {\n        url: remoteUrl,\n        filename,\n        httpHeaders,\n        ...resizeParams,\n      },\n    })\n\n    res.setHeader(\n      `content-type`,\n      getFileExtensionFromMimeType(path.extname(filename))\n    )\n\n    fs.createReadStream(filePath).pipe(res)\n  })\n\n  return app\n}\n"],"mappings":"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"}