"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isArraySchemaType = isArraySchemaType;
exports.isBlockSchemaType = isBlockSchemaType;
exports.isCrossDatasetReferenceSchemaType = isCrossDatasetReferenceSchemaType;
exports.isListObjectField = isListObjectField;
exports.isObjectSchemaType = isObjectSchemaType;
exports.isReferenceSchemaType = isReferenceSchemaType;
exports.isSpanChildrenObjectField = isSpanChildrenObjectField;
exports.isSpanSchemaType = isSpanSchemaType;
exports.isStyleObjectField = isStyleObjectField;
exports.isTitledListValue = isTitledListValue;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function isRecord(value) {
  return !!value && (typeof value == 'object' || typeof value == 'function');
}
function isObjectSchemaType(type) {
  if (!isRecord(type)) return false;
  return type.jsonType === 'object';
}
function isArraySchemaType(type) {
  if (!isRecord(type)) return false;
  return type.jsonType === 'array';
}
function isReferenceSchemaType(type) {
  return isRecord(type) && (type.name === 'reference' || isReferenceSchemaType(type.type));
}
function isCrossDatasetReferenceSchemaType(type) {
  return isRecord(type) && (type.name === 'crossDatasetReference' || isCrossDatasetReferenceSchemaType(type.type));
}
function isTitledListValue(item) {
  return typeof item === 'object' && item !== null && 'title' in item && 'value' in item;
}
function isSpanSchemaType(type) {
  if (!isRecord(type)) return false;
  // we check for `annotations` and `decorators` instead of `type.name` because
  // schema names can technically change if someone extends the type
  return Array.isArray(type.annotations) && Array.isArray(type.decorators);
}
function isBlockSchemaType(type) {
  if (!isRecord(type)) return false;
  if (!Array.isArray(type.fields)) return false;
  var _type$fields = _slicedToArray(type.fields, 3),
    maybeSpanChildren = _type$fields[0],
    maybeStyle = _type$fields[1],
    maybeList = _type$fields[2];
  return isSpanChildrenObjectField(maybeSpanChildren) && isStyleObjectField(maybeStyle) && isListObjectField(maybeList);
}
function isStyleObjectField(field) {
  if (!isRecord(field)) return false;
  if (field.name !== 'style') return false;
  return isRecord(field.type) && field.type.jsonType === 'string';
}
function isListObjectField(field) {
  if (!isRecord(field)) return false;
  if (field.name !== 'list') return false;
  return isRecord(field.type) && field.type.jsonType === 'string';
}
function isSpanChildrenObjectField(field) {
  if (!isRecord(field)) return false;
  if (field.name !== 'children') return false;
  if (!isArraySchemaType(field.type)) return false;
  // there will always be a span item in `SpanChildrenObjectField`
  return field.type.of.some(isSpanSchemaType);
}