"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = guessPreviewFields;
var _isUndefined2 = _interopRequireDefault(require("lodash/isUndefined"));
var _omitBy2 = _interopRequireDefault(require("lodash/omitBy"));
var _arrify = _interopRequireDefault(require("arrify"));
var _fallbackPrepare = require("./fallbackPrepare");
var _portableText = require("./portableText");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var TITLE_CANDIDATES = ['title', 'name', 'label', 'heading', 'header', 'caption'];
var DESCRIPTION_CANDIDATES = ['description', ...TITLE_CANDIDATES];
function fieldHasReferenceTo(fieldDef, refType) {
  return (0, _arrify.default)(fieldDef.to || []).some(memberTypeDef => memberTypeDef.type === refType);
}
function isImageAssetField(fieldDef) {
  return fieldHasReferenceTo(fieldDef, 'sanity.imageAsset');
}
function resolveImageAssetPath(typeDef) {
  var fields = typeDef.fields || [];
  var imageAssetField = fields.find(isImageAssetField);
  if (imageAssetField) {
    return imageAssetField.name;
  }
  var fieldWithImageAsset = fields.find(fieldDef => (fieldDef.fields || []).some(isImageAssetField));
  return fieldWithImageAsset ? "".concat(fieldWithImageAsset.name, ".asset") : undefined;
}
function isFileAssetField(fieldDef) {
  return fieldHasReferenceTo(fieldDef, 'sanity.fileAsset');
}
function resolveFileAssetPath(typeDef) {
  var fields = typeDef.fields || [];
  var assetField = fields.find(isFileAssetField);
  if (assetField) {
    return assetField.name;
  }
  var fieldWithFileAsset = fields.find(fieldDef => (fieldDef.fields || []).some(isFileAssetField));
  return fieldWithFileAsset ? "".concat(fieldWithFileAsset.name, ".asset") : undefined;
}
function guessPreviewFields(rawObjectTypeDef) {
  var objectTypeDef = _objectSpread({
    fields: []
  }, rawObjectTypeDef);
  var stringFieldNames = objectTypeDef.fields.filter(field => field.type === 'string').map(field => field.name);
  var blockFieldNames = objectTypeDef.fields.filter(_portableText.isBlockField).map(field => field.name);

  // Check if we have fields with names that is listed in candidate fields
  var titleField = TITLE_CANDIDATES.find(candidate => stringFieldNames.includes(candidate) || blockFieldNames.includes(candidate));
  var descField = DESCRIPTION_CANDIDATES.find(candidate => candidate !== titleField && (stringFieldNames.includes(candidate) || blockFieldNames.includes(candidate)));
  if (!titleField) {
    // Pick first defined string field
    titleField = stringFieldNames[0] || blockFieldNames[0];
    // Pick next as desc
    descField = stringFieldNames[1] || blockFieldNames[1];
  }
  var mediaField = objectTypeDef.fields.find(field => field.type === 'image');
  var imageAssetPath = resolveImageAssetPath(objectTypeDef);
  if (!titleField) {
    var fileAssetPath = resolveFileAssetPath(objectTypeDef);
    if (fileAssetPath) {
      titleField = "".concat(fileAssetPath, ".originalFilename");
    }
    if (imageAssetPath) {
      titleField = "".concat(imageAssetPath, ".originalFilename");
    }
  }
  if (!titleField && !imageAssetPath) {
    // last resort, pick all fields and concat them
    var fieldNames = objectTypeDef.fields.map(field => field.name);
    var fieldMapping = fieldNames.reduce((acc, fieldName) => {
      acc[fieldName] = fieldName;
      return acc;
    }, {});
    return {
      select: fieldMapping,
      prepare: (0, _fallbackPrepare.createFallbackPrepare)(fieldNames)
    };
  }
  var select = (0, _omitBy2.default)({
    title: titleField,
    description: descField,
    imageUrl: !mediaField && imageAssetPath ? "".concat(imageAssetPath, ".url") : undefined,
    media: mediaField ? mediaField.name : undefined
  }, _isUndefined2.default);
  return {
    select: select
  };
}