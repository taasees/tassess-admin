"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WEAK_FIELD = exports.ReferenceType = exports.REF_FIELD = void 0;
var _pick2 = _interopRequireDefault(require("lodash/pick"));
var _arrify = _interopRequireDefault(require("arrify"));
var _utils = require("./utils");
var _constants = require("./constants");
var _excluded = ["name"];
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }
var REF_FIELD = exports.REF_FIELD = {
  name: '_ref',
  title: 'Referenced document ID',
  type: 'string'
};
var WEAK_FIELD = exports.WEAK_FIELD = {
  name: '_weak',
  title: 'Weak reference',
  type: 'boolean'
};
var REFERENCE_FIELDS = [REF_FIELD, WEAK_FIELD];
var OVERRIDABLE_FIELDS = [..._constants.DEFAULT_OVERRIDEABLE_FIELDS];
var REFERENCE_CORE = {
  name: 'reference',
  type: null,
  jsonType: 'object'
};
function humanize(arr, conjunction) {
  var len = arr.length;
  if (len === 1) {
    return arr[0];
  }
  var first = arr.slice(0, len - 1);
  var last = arr[len - 1];
  return "".concat(first.join(', '), " ").concat(conjunction, " ").concat(last);
}
function buildTitle(type) {
  if (!type.to || type.to.length === 0) {
    return 'Reference';
  }
  return "Reference to ".concat(humanize((0, _arrify.default)(type.to).map(toType => toType.title), 'or').toLowerCase());
}
var ReferenceType = exports.ReferenceType = {
  get() {
    return REFERENCE_CORE;
  },
  extend(subTypeDef, createMemberType) {
    if (!subTypeDef.to) {
      throw new Error("Missing \"to\" field in reference definition. Check the type ".concat(subTypeDef.name));
    }
    var parsed = Object.assign((0, _pick2.default)(REFERENCE_CORE, OVERRIDABLE_FIELDS), subTypeDef, {
      type: REFERENCE_CORE
    });
    (0, _utils.lazyGetter)(parsed, 'fields', () => {
      return REFERENCE_FIELDS.map(fieldDef => {
        var name = fieldDef.name,
          type = _objectWithoutProperties(fieldDef, _excluded);
        return {
          name: name,
          type: createMemberType(type)
        };
      });
    });
    (0, _utils.lazyGetter)(parsed, 'to', () => {
      return (0, _arrify.default)(subTypeDef.to).map(toType => createMemberType(toType));
    });
    (0, _utils.lazyGetter)(parsed, 'title', () => subTypeDef.title || buildTitle(parsed));
    return subtype(parsed);
    function subtype(parent) {
      return {
        get() {
          return parent;
        },
        extend: extensionDef => {
          if (extensionDef.of) {
            throw new Error('Cannot override `of` of subtypes of "reference"');
          }
          var current = Object.assign({}, parent, (0, _pick2.default)(extensionDef, OVERRIDABLE_FIELDS), {
            type: parent
          });
          return subtype(current);
        }
      };
    }
  }
};