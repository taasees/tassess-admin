"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectType = void 0;
var _startCase2 = _interopRequireDefault(require("lodash/startCase"));
var _pick2 = _interopRequireDefault(require("lodash/pick"));
var _keyBy2 = _interopRequireDefault(require("lodash/keyBy"));
var _flatMap2 = _interopRequireDefault(require("lodash/flatMap"));
var _castArray2 = _interopRequireDefault(require("lodash/castArray"));
var _createPreviewGetter = _interopRequireDefault(require("../preview/createPreviewGetter"));
var _guessOrderingConfig = _interopRequireDefault(require("../ordering/guessOrderingConfig"));
var _normalize = require("../searchConfig/normalize");
var _resolve = _interopRequireDefault(require("../searchConfig/resolve"));
var _utils = require("./utils");
var _constants = require("./constants");
var _excluded = ["name", "fieldset", "group"];
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var OVERRIDABLE_FIELDS = [..._constants.DEFAULT_OVERRIDEABLE_FIELDS, 'orderings', '__experimental_search', 'blockEditor', 'icon'];
var ObjectType = exports.ObjectType = {
  get() {
    return {
      name: 'object',
      type: null,
      jsonType: 'object'
    };
  },
  extend(rawSubTypeDef, createMemberType) {
    var subTypeDef = _objectSpread({
      fields: []
    }, rawSubTypeDef);
    var options = _objectSpread({}, subTypeDef.options || {});
    var parsed = Object.assign((0, _pick2.default)(this.get(), OVERRIDABLE_FIELDS), subTypeDef, {
      type: this.get(),
      title: subTypeDef.title || (subTypeDef.name ? (0, _startCase2.default)(subTypeDef.name) : ''),
      options: options,
      orderings: subTypeDef.orderings || (0, _guessOrderingConfig.default)(subTypeDef),
      fields: subTypeDef.fields.map(fieldDef => {
        var name = fieldDef.name,
          fieldset = fieldDef.fieldset,
          group = fieldDef.group,
          rest = _objectWithoutProperties(fieldDef, _excluded);
        var compiledField = {
          name,
          group,
          fieldset
        };
        return (0, _utils.lazyGetter)(compiledField, 'type', () => {
          return createMemberType(_objectSpread(_objectSpread({}, rest), {}, {
            title: fieldDef.title || (0, _startCase2.default)(name)
          }));
        });
      })
    });
    (0, _utils.lazyGetter)(parsed, 'fieldsets', () => {
      return createFieldsets(subTypeDef, parsed.fields);
    });
    (0, _utils.lazyGetter)(parsed, 'groups', () => {
      return createFieldsGroups(subTypeDef, parsed.fields);
    });
    (0, _utils.lazyGetter)(parsed, 'preview', (0, _createPreviewGetter.default)(subTypeDef));
    (0, _utils.lazyGetter)(parsed, '__experimental_search', () => {
      var userProvidedSearchConfig = subTypeDef.__experimental_search ? (0, _normalize.normalizeUserSearchConfigs)(subTypeDef.__experimental_search) : null;
      if (userProvidedSearchConfig) {
        return userProvidedSearchConfig.map(entry => entry === 'defaults' ? (0, _normalize.normalizeUserSearchConfigs)(subTypeDef) : entry);
      }
      return (0, _resolve.default)(parsed);
    }, {
      enumerable: false
    });
    return subtype(parsed);
    function subtype(parent) {
      return {
        get() {
          return parent;
        },
        extend: extensionDef => {
          if (extensionDef.fields) {
            throw new Error('Cannot override `fields` of subtypes of "object"');
          }
          var current = Object.assign({}, parent, (0, _pick2.default)(extensionDef, OVERRIDABLE_FIELDS), {
            title: extensionDef.title || subTypeDef.title || (subTypeDef.name ? (0, _startCase2.default)(subTypeDef.name) : ''),
            type: parent
          });
          (0, _utils.lazyGetter)(current, '__experimental_search', () => parent.__experimental_search);
          return subtype(current);
        }
      };
    }
  }
};
function createFieldsets(typeDef, fields) {
  var fieldsetsDef = typeDef.fieldsets || [];
  var fieldsets = fieldsetsDef.map(fieldset => {
    var name = fieldset.name,
      title = fieldset.title,
      description = fieldset.description,
      options = fieldset.options,
      group = fieldset.group,
      hidden = fieldset.hidden,
      readOnly = fieldset.readOnly;
    return {
      name,
      title,
      description,
      options,
      group,
      fields: [],
      hidden,
      readOnly
    };
  });
  var fieldsetsByName = (0, _keyBy2.default)(fieldsets, 'name');
  return fields.map(field => {
    if (field.fieldset) {
      var fieldset = fieldsetsByName[field.fieldset];
      if (!fieldset) {
        throw new Error("Group '".concat(field.fieldset, "' is not defined in schema for type '").concat(typeDef.name, "'"));
      }
      fieldset.fields.push(field);
      // Return the fieldset if its the first time we encounter a field in this fieldset
      return fieldset.fields.length === 1 ? fieldset : null;
    }
    return {
      single: true,
      field
    };
  }).filter(Boolean);
}
function createFieldsGroups(typeDef, fields) {
  var groupsDef = typeDef.groups || [];
  var groups = groupsDef.map(group => {
    var name = group.name,
      title = group.title,
      description = group.description,
      icon = group.icon,
      readOnly = group.readOnly,
      hidden = group.hidden;
    return {
      name,
      title,
      description,
      icon,
      readOnly,
      default: group.default,
      hidden,
      fields: []
    };
  });
  var defaultGroups = groups.filter(group => group.default);
  if (defaultGroups.length > 1) {
    var _typeDef$title;
    // Throw if you have multiple default field groups defined
    throw new Error("You currently have ".concat(defaultGroups.length, " default field groups defined for type '").concat(typeDef.name ? (0, _startCase2.default)(typeDef.name) : (_typeDef$title = typeDef.title) !== null && _typeDef$title !== void 0 ? _typeDef$title : "", "', but only 1 is supported"));
  }
  var groupsByName = (0, _keyBy2.default)(groups, 'name');
  fields.forEach(field => {
    if (field.group) {
      var fieldGroupNames = (0, _castArray2.default)(field.group);
      if (fieldGroupNames.length > 0) {
        fieldGroupNames.forEach(fieldGroupName => {
          var currentGroup = groupsByName[fieldGroupName];
          if (!currentGroup) {
            var _ref, _typeDef$name;
            throw new Error("Field group '".concat(fieldGroupName, "' is not defined in schema for type '").concat((_ref = (_typeDef$name = typeDef.name) !== null && _typeDef$name !== void 0 ? _typeDef$name : typeDef.title) !== null && _ref !== void 0 ? _ref : "", "'"));
          }
          currentGroup.fields.push(field);
        });
      }
    }
  });
  return (0, _flatMap2.default)(groupsByName).filter(group => group.fields.length > 0);
}