"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockType = void 0;
var _pick2 = _interopRequireDefault(require("lodash/pick"));
var _utils = require("../utils");
var _createPreviewGetter = _interopRequireDefault(require("../../preview/createPreviewGetter"));
var _defaults = require("./defaults");
var _excluded = ["marks", "styles", "lists", "of"],
  _excluded2 = ["name"];
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var INHERITED_FIELDS = ['type', 'name', 'title', 'jsonType', 'description', 'options', 'fieldsets', 'icon'];
var BLOCK_CORE = {
  name: 'block',
  type: null,
  jsonType: 'object'
};
var DEFAULT_OPTIONS = {};
var BlockType = exports.BlockType = {
  get() {
    return BLOCK_CORE;
  },
  extend(subTypeDef, extendMember) {
    var options = _objectSpread({}, subTypeDef.options || DEFAULT_OPTIONS);
    var marks = subTypeDef.marks,
      styles = subTypeDef.styles,
      lists = subTypeDef.lists,
      of = subTypeDef.of,
      rest = _objectWithoutProperties(subTypeDef, _excluded);
    var spansField = createSpansField(marks, of);
    var stylesField = createStylesField(styles);
    var listsField = createListsField(lists);

    // NOTE: if you update this please also update `BlockSchemaType` in`@sanity/types`
    var fields = [spansField, stylesField, listsField].concat(subTypeDef.fields || []);
    var parsed = Object.assign((0, _pick2.default)(BLOCK_CORE, INHERITED_FIELDS), rest, {
      type: BLOCK_CORE,
      options: options
    });
    (0, _utils.lazyGetter)(parsed, 'fields', () => {
      return fields.map(fieldDef => {
        var name = fieldDef.name,
          type = _objectWithoutProperties(fieldDef, _excluded2);
        return {
          name: name,
          type: extendMember(type)
        };
      });
    });
    (0, _utils.lazyGetter)(parsed, 'preview', (0, _createPreviewGetter.default)(subTypeDef));
    return subtype(parsed);
    function subtype(parent) {
      return {
        get() {
          return parent;
        },
        extend: extensionDef => {
          if (extensionDef.fields) {
            throw new Error('Cannot override `fields` of subtypes of "block"');
          }
          var current = Object.assign({}, parent, (0, _pick2.default)(extensionDef, INHERITED_FIELDS), {
            type: parent
          });
          return subtype(current);
        }
      };
    }
  }
};
function ensureNormalStyle(styles) {
  return styles.some(style => style.value === 'normal') ? styles : [_defaults.BLOCK_STYLES.normal, ...styles];
}
function createStylesField(styles) {
  return {
    name: 'style',
    title: 'Style',
    type: 'string',
    options: {
      list: ensureNormalStyle(styles || _defaults.DEFAULT_BLOCK_STYLES)
    }
  };
}
function createListsField(lists) {
  return {
    name: 'list',
    title: 'List type',
    type: 'string',
    options: {
      list: lists || _defaults.DEFAULT_LIST_TYPES
    }
  };
}
var DEFAULT_ANNOTATIONS = [_defaults.DEFAULT_LINK_ANNOTATION];
function createSpansField(marks) {
  var of = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return {
    name: 'children',
    title: 'Content',
    type: 'array',
    of: [{
      type: 'span',
      fields: [_defaults.DEFAULT_TEXT_FIELD, _defaults.DEFAULT_MARKS_FIELD],
      annotations: marks && marks.annotations ? marks.annotations : DEFAULT_ANNOTATIONS,
      decorators: marks && marks.decorators ? marks.decorators : _defaults.DEFAULT_DECORATORS
    }, ...of.filter(memberType => memberType.type !== 'span')]
  };
}