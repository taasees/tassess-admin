"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpanType = void 0;
var _pick2 = _interopRequireDefault(require("lodash/pick"));
var _utils = require("../utils");
var _createPreviewGetter = _interopRequireDefault(require("../../preview/createPreviewGetter"));
var _excluded = ["name"];
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var INHERITED_FIELDS = ['type', 'name', 'title', 'jsonType', 'description', 'options', 'fieldsets', 'icon'];
var SPAN_CORE = {
  name: 'span',
  type: null,
  jsonType: 'object'
};
var MARKS_FIELD = {
  name: 'marks',
  title: 'Marks',
  type: 'array',
  of: [{
    type: 'string'
  }]
};
var TEXT_FIELD = {
  name: 'text',
  title: 'Text',
  type: 'string'
};
var DEFAULT_OPTIONS = {};
var SpanType = exports.SpanType = {
  get() {
    return SPAN_CORE;
  },
  extend(subTypeDef, extendMember) {
    var options = _objectSpread({}, subTypeDef.options || DEFAULT_OPTIONS);
    var _subTypeDef$annotatio = subTypeDef.annotations,
      annotations = _subTypeDef$annotatio === void 0 ? [] : _subTypeDef$annotatio,
      _subTypeDef$marks = subTypeDef.marks,
      marks = _subTypeDef$marks === void 0 ? [] : _subTypeDef$marks;

    // NOTE: if you update this please also update `SpanSchemaType` in`@sanity/types`
    var fields = [MARKS_FIELD, TEXT_FIELD];
    var parsed = Object.assign((0, _pick2.default)(SPAN_CORE, INHERITED_FIELDS), subTypeDef, {
      type: SPAN_CORE,
      options: options
    });
    (0, _utils.lazyGetter)(parsed, 'fields', () => {
      return fields.map(fieldDef => {
        var name = fieldDef.name,
          type = _objectWithoutProperties(fieldDef, _excluded);
        return {
          name: name,
          type: extendMember(type)
        };
      });
    });
    (0, _utils.lazyGetter)(parsed, 'annotations', () => annotations.map(extendMember));
    (0, _utils.lazyGetter)(parsed, 'marks', () => marks.map(extendMember));
    (0, _utils.lazyGetter)(parsed, 'preview', (0, _createPreviewGetter.default)(subTypeDef));
    return subtype(parsed);
    function subtype(parent) {
      return {
        get() {
          return parent;
        },
        extend: extensionDef => {
          if (extensionDef.fields) {
            throw new Error('Cannot override `fields` of subtypes of "span"');
          }
          var current = Object.assign({}, parent, (0, _pick2.default)(extensionDef, INHERITED_FIELDS), {
            type: parent
          });
          return subtype(current);
        }
      };
    }
  }
};