"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validateSchema;
var _traverseSchema = _interopRequireDefault(require("./traverseSchema"));
var _object = _interopRequireDefault(require("./validation/types/object"));
var _document = _interopRequireDefault(require("./validation/types/document"));
var _reference = _interopRequireDefault(require("./validation/types/reference"));
var _array = _interopRequireDefault(require("./validation/types/array"));
var _slug = _interopRequireDefault(require("./validation/types/slug"));
var _file = _interopRequireDefault(require("./validation/types/file"));
var _image = _interopRequireDefault(require("./validation/types/image"));
var _block = _interopRequireDefault(require("./validation/types/block"));
var _common = _interopRequireDefault(require("./validation/types/common"));
var _rootType = _interopRequireDefault(require("./validation/types/rootType"));
var _crossDatasetReference = _interopRequireDefault(require("./validation/types/crossDatasetReference"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var typeVisitors = {
  array: _array.default,
  object: _object.default,
  slug: _slug.default,
  file: _file.default,
  image: _image.default,
  block: _block.default,
  document: _document.default,
  reference: _reference.default,
  crossDatasetReference: _crossDatasetReference.default
};
var getNoopVisitor = visitorContext => schemaDef => _objectSpread(_objectSpread({
  name: "<unnamed_type_@_index_".concat(visitorContext.index, ">")
}, schemaDef), {}, {
  _problems: []
});
function combine() {
  for (var _len = arguments.length, visitors = new Array(_len), _key = 0; _key < _len; _key++) {
    visitors[_key] = arguments[_key];
  }
  return (schemaType, visitorContext) => {
    return visitors.reduce((result, visitor) => {
      var res = visitor(result, visitorContext);
      return _objectSpread(_objectSpread({}, res), {}, {
        _problems: result._problems.concat(res._problems)
      });
    }, _objectSpread({
      _problems: []
    }, schemaType));
  };
}

// Future improvements:
// - Provide an easy way to determine if schema has problems of a certain class (e.g. errors)
// Clean up the api
function validateSchema(schemaTypes) {
  return (0, _traverseSchema.default)(schemaTypes, (schemaDef, visitorContext) => {
    var typeVisitor = schemaDef && schemaDef.type && typeVisitors[schemaDef.type] || getNoopVisitor(visitorContext);
    if (visitorContext.isRoot) {
      return combine(_rootType.default, _common.default, typeVisitor)(schemaDef, visitorContext);
    }
    return combine(_common.default, typeVisitor)(schemaDef, visitorContext);
  });
}