"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.validateField = validateField;
exports.validateFields = validateFields;
exports.validatePreview = validatePreview;
var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));
var _createValidationResult = require("../createValidationResult");
var _inspect = _interopRequireDefault(require("../../inspect"));
var _validateInputComponent = require("../utils/validateInputComponent");
var _excluded = ["name"],
  _excluded2 = ["_problems"];
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var VALID_FIELD_RE = /^[A-Za-z]+[0-9A-Za-z_]*$/;
var CONVENTIONAL_FIELD_RE = /^[A-Za-z_]+[0-9A-Za-z_]*$/;
function validateFieldName(name) {
  if (typeof name !== 'string') {
    return [(0, _createValidationResult.error)("Field names must be strings. Saw \"".concat((0, _inspect.default)(name), "\""), _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID)];
  }
  if (name.startsWith('_')) {
    return [(0, _createValidationResult.error)("Invalid field name \"".concat(name, "\". Field names cannot start with underscores \"_\" as it's reserved for system fields."), _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID)];
  }
  if (!VALID_FIELD_RE.test(name)) {
    return [(0, _createValidationResult.error)("Invalid field name: \"".concat(name, "\". Fields can only contain characters from A-Z, numbers and underscores and should not start with a number (must pass the regular expression ").concat(String(VALID_FIELD_RE), ")."), _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID)];
  }
  if (!CONVENTIONAL_FIELD_RE.test(name)) {
    return [(0, _createValidationResult.warning)('Thats an interesting field name for sure! But it is... how to put it... a bit... unconventional?' + ' It may be wise to keep special characters out of field names for easier access later on.'), _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID];
  }
  return [];
}
function validateField(field, _visitorContext) {
  if (!(0, _isPlainObject2.default)(field)) {
    return [(0, _createValidationResult.error)("Incorrect type for field definition - should be an object, saw ".concat((0, _inspect.default)(field)), _createValidationResult.HELP_IDS.OBJECT_FIELD_DEFINITION_INVALID_TYPE)];
  }
  var problems = [];
  problems.push(...('name' in field ? validateFieldName(field.name) : [(0, _createValidationResult.error)('Missing field name', _createValidationResult.HELP_IDS.OBJECT_FIELD_NAME_INVALID)]));
  problems.push(...(0, _validateInputComponent.validateInputComponent)(field));
  return problems;
}
function getDuplicateFields(array) {
  var dupes = {};
  array.forEach(field => {
    if (!dupes[field.name]) {
      dupes[field.name] = [];
    }
    dupes[field.name].push(field);
  });
  return Object.keys(dupes).map(fieldName => dupes[fieldName].length > 1 ? dupes[fieldName] : null).filter(Boolean);
}
function validateFields(fields) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    allowEmpty: false
  };
  var problems = [];
  var fieldsIsArray = Array.isArray(fields);
  if (!fieldsIsArray) {
    return [(0, _createValidationResult.error)("The \"fields\" property must be an array of fields. Instead saw \"".concat(typeof fields, "\""), _createValidationResult.HELP_IDS.OBJECT_FIELDS_INVALID)];
  }
  var fieldsWithNames = fields.filter(field => typeof field.name === 'string');
  getDuplicateFields(fieldsWithNames).forEach(dupes => {
    problems.push((0, _createValidationResult.error)("Found ".concat(dupes.length, " fields with name \"").concat(dupes[0].name, "\" in object"), _createValidationResult.HELP_IDS.OBJECT_FIELD_NOT_UNIQUE));
  });
  if (fields.length === 0 && !options.allowEmpty) {
    problems.push((0, _createValidationResult.error)('Object should have at least one field', _createValidationResult.HELP_IDS.OBJECT_FIELDS_INVALID));
  }
  return problems;
}
function validatePreview(preview) {
  if (!(0, _isPlainObject2.default)(preview)) {
    return [(0, _createValidationResult.error)("The \"preview\" property must be an object, instead saw \"".concat(typeof preview, "\""))];
  }
  if (typeof preview.prepare !== 'undefined' && typeof preview.prepare !== 'function') {
    return [(0, _createValidationResult.error)("The \"preview.prepare\" property must be a function, instead saw \"".concat(typeof preview.prepare, "\""))];
  }
  if (!preview.select) {
    return [];
  }
  if (!(0, _isPlainObject2.default)(preview.select)) {
    return [(0, _createValidationResult.error)("The \"preview.select\" property must be an object, instead saw \"".concat(typeof preview.prepare, "\""))];
  }
  return Object.keys(preview.select).reduce((errs, key) => {
    return typeof preview.select[key] === 'string' ? errs : errs.concat((0, _createValidationResult.error)("The key \"".concat(key, "\" of \"preview.select\" must be a string, instead saw \"").concat(typeof preview.select[key], "\"")));
  }, []);
}
var _default = (typeDef, visitorContext) => {
  var problems = validateFields(typeDef.fields);
  var preview = typeDef.preview;
  if (preview) {
    var previewErrors = validatePreview(typeDef.preview);
    problems = problems.concat(previewErrors);
    preview = previewErrors.some(err => err.severity === 'error') ? {} : preview;
  }
  if (typeDef.type !== 'document' && typeDef.type !== 'object' && typeof typeDef.initialValue !== 'undefined') {
    problems.push((0, _createValidationResult.error)("The \"initialValue\" property is currently only supported for document & object types."));
  }
  return _objectSpread(_objectSpread({}, typeDef), {}, {
    preview,
    fields: (Array.isArray(typeDef.fields) ? typeDef.fields : []).map((field, index) => {
      var name = field.name,
        fieldTypeDef = _objectWithoutProperties(field, _excluded);
      var _visitorContext$visit = visitorContext.visit(fieldTypeDef, index),
        _problems = _visitorContext$visit._problems,
        fieldType = _objectWithoutProperties(_visitorContext$visit, _excluded2);
      return _objectSpread(_objectSpread({
        name
      }, fieldType), {}, {
        _problems: validateField(field, visitorContext).concat(_problems || [])
      });
    }),
    _problems: problems
  });
};
exports.default = _default;