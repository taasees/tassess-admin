"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateTypeName = validateTypeName;
var _leven = _interopRequireDefault(require("leven"));
var _humanizeList = _interopRequireDefault(require("humanize-list"));
var _createValidationResult = require("../createValidationResult");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var quote = str => "\"".concat(str, "\"");
function validateTypeName(typeName, visitorContext) {
  var possibleTypeNames = visitorContext.getTypeNames();
  if (!typeName) {
    return [(0, _createValidationResult.error)("Type is missing a type. Valid types are: ".concat((0, _humanizeList.default)(possibleTypeNames)), _createValidationResult.HELP_IDS.TYPE_MISSING_TYPE)];
  }
  if (typeof typeName !== 'string') {
    return [(0, _createValidationResult.error)("Type has an invalid \"type\"-property - should be a string. Valid types are: ".concat((0, _humanizeList.default)(possibleTypeNames)), _createValidationResult.HELP_IDS.TYPE_MISSING_TYPE)];
  }
  var isValid = possibleTypeNames.includes(typeName);
  if (!isValid) {
    var suggestions = possibleTypeNames.map(possibleTypeName => {
      if (!possibleTypeName || !typeName) {}
      return [(0, _leven.default)(typeName, possibleTypeName), possibleTypeName];
    }).filter(_ref => {
      var _ref2 = _slicedToArray(_ref, 1),
        distance = _ref2[0];
      return distance < 3;
    }).map(_ref3 => {
      var _ref4 = _slicedToArray(_ref3, 2),
        _ = _ref4[0],
        name = _ref4[1];
      return name;
    });
    var suggestion = suggestions.length > 0 ? " Did you mean ".concat((0, _humanizeList.default)(suggestions.map(quote), {
      conjunction: 'or'
    }), "?") : '';
    return [(0, _createValidationResult.error)("Unknown type: ".concat(typeName, ".").concat(suggestion, " Valid types are: ").concat((0, _humanizeList.default)(possibleTypeNames)))];
  }
  return [];
}