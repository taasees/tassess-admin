"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));
var _flatten2 = _interopRequireDefault(require("lodash/flatten"));
var _createValidationResult = require("../createValidationResult");
var _getDupes = require("../utils/getDupes");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function normalizeToProp(typeDef) {
  if (Array.isArray(typeDef.to)) {
    return typeDef.to;
  }
  return typeDef.to ? [typeDef.to] : typeDef.to;
}
var _default = (typeDef, visitorContext) => {
  var isValidTo = Array.isArray(typeDef.to) || (0, _isPlainObject2.default)(typeDef.to);
  var normalizedTo = normalizeToProp(typeDef);
  var problems = (0, _flatten2.default)([isValidTo ? (0, _getDupes.getDupes)(normalizedTo, t => "".concat(t.name, ";").concat(t.type)).map(dupes => (0, _createValidationResult.error)("Found ".concat(dupes.length, " members with same type, but not unique names \"").concat(dupes[0].type, "\" in reference. This makes it impossible to tell their values apart and you should consider naming them"), _createValidationResult.HELP_IDS.REFERENCE_TO_INVALID)) : (0, _createValidationResult.error)('The reference type is missing or having an invalid value for the required "to" property. It should be an array of accepted types.', _createValidationResult.HELP_IDS.REFERENCE_TO_INVALID)]);
  if (isValidTo && normalizedTo.length === 0) {
    problems.push((0, _createValidationResult.error)('The reference type should define at least one accepted type. Please check the "to" property.', _createValidationResult.HELP_IDS.REFERENCE_TO_INVALID));
  }
  problems.push(...getOptionErrors(typeDef));
  return _objectSpread(_objectSpread({}, typeDef), {}, {
    to: (isValidTo ? normalizedTo : []).map(visitorContext.visit),
    _problems: problems
  });
};
exports.default = _default;
function getOptionErrors(typeDef) {
  var options = typeDef.options;
  var problems = [];
  problems.push(...['filter', 'filterParams'].filter(key => key in typeDef).map(key => (0, _createValidationResult.error)("`".concat(key, "` is not allowed on a reference type definition - did you mean `options.").concat(key, "`?"), _createValidationResult.HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION)));
  if (!options) {
    return problems;
  }
  if (!(0, _isPlainObject2.default)(options)) {
    return problems.concat((0, _createValidationResult.error)('The reference type expects `options` to be an object', _createValidationResult.HELP_IDS.REFERENCE_INVALID_OPTIONS));
  }
  if (typeof options.filter === 'function' && typeof options.filterParams !== 'undefined') {
    return problems.concat((0, _createValidationResult.error)('`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.', _createValidationResult.HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION));
  }
  if (typeof options.filter === 'function' || !options.filter && !options.filterParams) {
    return problems;
  }
  if (typeof options.filter !== 'string') {
    return problems.concat((0, _createValidationResult.error)("If set, `filter` must be a string. Got ".concat(typeof options.filter)));
  }
  if (typeof options.filterParams !== 'undefined' && !(0, _isPlainObject2.default)(options.filterParams)) {
    return problems.concat((0, _createValidationResult.error)("If set, `filterParams` must be an object."));
  }
  if (options.filterParams) {
    return problems.concat(Object.keys(options.filterParams).filter(key => key.startsWith('__') || key.startsWith('$')).map(key => (0, _createValidationResult.error)("Filter parameter cannot be prefixed with \"$\" or \"__\". Got ".concat(key, "\"."))));
  }
  return problems;
}