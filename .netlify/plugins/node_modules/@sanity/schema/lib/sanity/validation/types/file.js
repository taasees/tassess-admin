"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _createValidationResult = require("../createValidationResult");
var _object = require("./object");
var _excluded = ["name"],
  _excluded2 = ["_problems"];
function _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }
function _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var _default = (typeDef, visitorContext) => {
  var problems = [];
  var fields = typeDef.fields;
  if (fields) {
    problems.push(...(0, _object.validateFields)(fields, {
      allowEmpty: true
    }));
  }
  if (typeDef.options && typeof typeDef.options.metadata !== 'undefined' && !Array.isArray(typeDef.options.metadata)) {
    problems.push((0, _createValidationResult.error)("Invalid type for file `metadata` field - must be an array of strings", _createValidationResult.HELP_IDS.ASSET_METADATA_FIELD_INVALID));
  }
  return _objectSpread(_objectSpread({}, typeDef), {}, {
    fields: (Array.isArray(fields) ? fields : []).map((field, index) => {
      var name = field.name,
        fieldTypeDef = _objectWithoutProperties(field, _excluded);
      var _visitorContext$visit = visitorContext.visit(fieldTypeDef, index),
        _problems = _visitorContext$visit._problems,
        fieldType = _objectWithoutProperties(_visitorContext$visit, _excluded2);
      return _objectSpread(_objectSpread({
        name
      }, fieldType), {}, {
        _problems: (0, _object.validateField)(field, visitorContext).concat(_problems || [])
      });
    }),
    _problems: problems
  });
};
exports.default = _default;