"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _flatten2 = _interopRequireDefault(require("lodash/flatten"));
var _createValidationResult = require("../createValidationResult");
var _getDupes = require("../utils/getDupes");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var _default = (typeDef, visitorContext) => {
  // name should already have been marked
  var ofIsArray = Array.isArray(typeDef.of);
  if (ofIsArray) {
    var invalid = typeDef.of.reduce((errs, def, idx) => {
      if (def.type === 'array') {
        return errs.concat((0, _createValidationResult.error)("Found array member declaration of type \"array\" - multidimensional arrays are not currently supported by Sanity", _createValidationResult.HELP_IDS.ARRAY_OF_ARRAY));
      }
      if (def) {
        return errs;
      }
      var err = "Found ".concat(def === null ? 'null' : typeof def, ", expected member declaration");
      return errs.concat((0, _createValidationResult.error)("Found invalid type member declaration in array at index ".concat(idx, ": ").concat(err), _createValidationResult.HELP_IDS.ARRAY_OF_INVALID));
    }, []);
    if (invalid.length > 0) {
      return _objectSpread(_objectSpread({}, typeDef), {}, {
        of: [],
        _problems: invalid
      });
    }
  }
  var problems = (0, _flatten2.default)([ofIsArray ? (0, _getDupes.getDupes)(typeDef.of, t => "".concat(t.name, ";").concat(t.type)).map(dupes => (0, _createValidationResult.error)("Found ".concat(dupes.length, " members with same type, but not unique names \"").concat(dupes[0].type, "\" in array. This makes it impossible to tell their values apart and you should consider naming them"), _createValidationResult.HELP_IDS.ARRAY_OF_NOT_UNIQUE)) : (0, _createValidationResult.error)('The array type is missing or having an invalid value for the required "of" property', _createValidationResult.HELP_IDS.ARRAY_OF_INVALID)]);
  var of = ofIsArray ? typeDef.of : [];

  // Don't allow object types without a name in block arrays
  var hasObjectTypesWithoutName = of.some(type => type.type === 'object' && typeof type.name === 'undefined');
  var hasBlockType = of.some(ofType => ofType.type === 'block');
  if (hasBlockType && hasObjectTypesWithoutName) {
    problems.push((0, _createValidationResult.error)("The array type's 'of' property can't have an object type without a 'name' property as member, when the 'block' type is also a member of that array.", _createValidationResult.HELP_IDS.ARRAY_OF_INVALID));
  }
  return _objectSpread(_objectSpread({}, typeDef), {}, {
    of: of.map(visitorContext.visit),
    _problems: problems
  });
};
exports.default = _default;