"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _createValidationResult = require("../createValidationResult");
var _validateInputComponent = require("../utils/validateInputComponent");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var _default = (typeDef, visitorContext) => {
  var hasName = Boolean(typeDef.name);
  if (!hasName && Object.keys(typeDef).length === 1) {
    // Short-circuit on obviously invalid types (only key is _problems)
    return _objectSpread(_objectSpread({}, typeDef), {}, {
      _problems: [(0, _createValidationResult.error)('Invalid/undefined type declaration, check declaration or the import/export of the schema type.', _createValidationResult.HELP_IDS.TYPE_INVALID)]
    });
  }
  var problems = [];
  if (looksLikeEsmModule(typeDef)) {
    problems.push((0, _createValidationResult.error)('Type appears to be an ES6 module imported through CommonJS require - use an import statement or access the `.default` property', _createValidationResult.HELP_IDS.TYPE_IS_ESM_MODULE));
  } else if (!hasName) {
    problems.push((0, _createValidationResult.error)('Missing type name', _createValidationResult.HELP_IDS.TYPE_MISSING_NAME));
  } else if (visitorContext.isReserved(typeDef.name)) {
    problems.push((0, _createValidationResult.error)("Invalid type name: \"".concat(typeDef.name, "\" is a reserved name."), _createValidationResult.HELP_IDS.TYPE_NAME_RESERVED));
  }
  if (visitorContext.isDuplicate(typeDef.name)) {
    problems.push((0, _createValidationResult.error)("Invalid type name: A type with name \"".concat(typeDef.name, "\" is already defined in the schema.")));
  }
  problems.push(...(0, _validateInputComponent.validateInputComponent)(typeDef));
  if (!('title' in typeDef)) {
    problems.push((0, _createValidationResult.warning)("Type is missing title. It's recommended to always set a descriptive title.", _createValidationResult.HELP_IDS.TYPE_TITLE_RECOMMENDED));
  } else if (typeof typeDef.title !== 'string') {
    problems.push((0, _createValidationResult.warning)('Type title is not a string.', _createValidationResult.HELP_IDS.TYPE_TITLE_INVALID));
  }
  return _objectSpread(_objectSpread({}, typeDef), {}, {
    _problems: problems
  });
};
exports.default = _default;
function looksLikeEsmModule(typeDef) {
  return !typeDef.name && typeDef.default && (typeDef.default.name || typeDef.default.title);
}