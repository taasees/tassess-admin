"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createHTMLRules;
exports.resolveListItem = resolveListItem;
var _randomKey = _interopRequireDefault(require("../../util/randomKey"));
var _constants = require("../../constants");
var _helpers = require("../helpers");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function resolveListItem(listNodeTagName) {
  var listStyle;
  switch (listNodeTagName) {
    case 'ul':
      listStyle = 'bullet';
      break;
    case 'ol':
      listStyle = 'number';
      break;
    default:
      listStyle = 'bullet';
  }
  return listStyle;
}
function createHTMLRules(blockContentType) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return [
  // Text nodes
  {
    // eslint-disable-next-line complexity
    deserialize(el) {
      var isValidWhiteSpace = el.nodeType === 3 && el.textContent.replace(/[\r\n]/g, ' ').replace(/\s\s+/g, ' ') === ' ' && el.nextSibling && el.nextSibling.nodeType !== 3 && el.previousSibling && el.previousSibling.nodeType !== 3;
      var isValidText = (isValidWhiteSpace || el.textContent !== ' ') && (0, _helpers.tagName)(el.parentNode) !== 'body';
      if (el.nodeName === '#text' && isValidText) {
        return _objectSpread(_objectSpread({}, _constants.DEFAULT_SPAN), {}, {
          marks: [],
          text: el.textContent.replace(/\s\s+/g, ' ')
        });
      }
      return undefined;
    }
  },
  // Blockquote element
  {
    deserialize(el, next) {
      if ((0, _helpers.tagName)(el) !== 'blockquote') {
        return undefined;
      }
      var blocks = _objectSpread(_objectSpread({}, _constants.HTML_BLOCK_TAGS), _constants.HTML_HEADER_TAGS);
      delete blocks.blockquote;
      var children = [];
      el.childNodes.forEach((node, index) => {
        if (node.nodeType === 1 && Object.keys(blocks).includes(node.localName.toLowerCase())) {
          var span = el.ownerDocument.createElement('span');
          span.appendChild(el.ownerDocument.createTextNode('\r'));
          node.childNodes.forEach(cn => {
            span.appendChild(cn.cloneNode(true));
          });
          if (index !== el.childNodes.length) {
            span.appendChild(el.ownerDocument.createTextNode('\r'));
          }
          children.push(span);
        } else {
          children.push(node);
        }
      });
      return {
        _type: 'block',
        style: 'blockquote',
        markDefs: [],
        children: next(children)
      };
    }
  },
  // Block elements
  {
    deserialize(el, next) {
      var blocks = _objectSpread(_objectSpread({}, _constants.HTML_BLOCK_TAGS), _constants.HTML_HEADER_TAGS);
      var block = blocks[(0, _helpers.tagName)(el)];
      if (!block) {
        return undefined;
      }
      // Don't add blocks into list items
      if (el.parentNode && (0, _helpers.tagName)(el.parentNode) === 'li') {
        return next(el.childNodes);
      }
      // If style is not supported, return a defaultBlockType
      if (!options.enabledBlockStyles.includes(block.style)) {
        block = _constants.DEFAULT_BLOCK;
      }
      return _objectSpread(_objectSpread({}, block), {}, {
        children: next(el.childNodes)
      });
    }
  },
  // Ignore span tags
  {
    deserialize(el, next) {
      var span = _constants.HTML_SPAN_TAGS[(0, _helpers.tagName)(el)];
      if (!span) {
        return undefined;
      }
      return next(el.childNodes);
    }
  },
  // Ignore div tags
  {
    deserialize(el, next) {
      var div = (0, _helpers.tagName)(el) === 'div';
      if (!div) {
        return undefined;
      }
      return next(el.childNodes);
    }
  },
  // Ignore list containers
  {
    deserialize(el, next) {
      var listContainer = _constants.HTML_LIST_CONTAINER_TAGS[(0, _helpers.tagName)(el)];
      if (!listContainer) {
        return undefined;
      }
      return next(el.childNodes);
    }
  },
  // Deal with br's
  {
    deserialize(el, next) {
      if ((0, _helpers.tagName)(el) === 'br') {
        return _objectSpread(_objectSpread({}, _constants.DEFAULT_SPAN), {}, {
          text: '\n'
        });
      }
      return undefined;
    }
  },
  // Deal with list items
  {
    deserialize(el, next) {
      var listItem = _constants.HTML_LIST_ITEM_TAGS[(0, _helpers.tagName)(el)];
      if (!listItem || !el.parentNode || !_constants.HTML_LIST_CONTAINER_TAGS[(0, _helpers.tagName)(el.parentNode)]) {
        return undefined;
      }
      listItem.listItem = resolveListItem((0, _helpers.tagName)(el.parentNode));
      return _objectSpread(_objectSpread({}, listItem), {}, {
        children: next(el.childNodes)
      });
    }
  },
  // Deal with decorators
  {
    deserialize(el, next) {
      var decorator = _constants.HTML_DECORATOR_TAGS[(0, _helpers.tagName)(el)];
      if (!decorator || !options.enabledSpanDecorators.includes(decorator)) {
        return undefined;
      }
      return {
        _type: '__decorator',
        name: decorator,
        children: next(el.childNodes)
      };
    }
  },
  // Special case for hyperlinks, add annotation (if allowed by schema),
  // If not supported just write out the link text and href in plain text.
  {
    deserialize(el, next) {
      if ((0, _helpers.tagName)(el) != 'a') {
        return undefined;
      }
      var linkEnabled = options.enabledBlockAnnotations.includes('link');
      var href = el.getAttribute('href');
      if (!href) {
        return next(el.childNodes);
      }
      var markDef;
      if (linkEnabled) {
        markDef = {
          _key: (0, _randomKey.default)(12),
          _type: 'link',
          href: href
        };
        return {
          _type: '__annotation',
          markDef: markDef,
          children: next(el.childNodes)
        };
      }
      return el.appendChild(el.ownerDocument.createTextNode(" (".concat(href, ")"))) && next(el.childNodes);
    }
  }];
}