"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createWordRules;
var _constants = require("../../constants");
var _helpers = require("../helpers");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function getListItemStyle(el) {
  var style;
  if (style = el.getAttribute('style')) {
    if (!style.match(/lfo\d+/)) {
      return undefined;
    }
    return style.match('lfo1') ? 'bullet' : 'number';
  }
  return undefined;
}
function getListItemLevel(el) {
  var style;
  if (style = el.getAttribute('style')) {
    var levelMatch = style.match(/level\d+/);
    if (!levelMatch) {
      return undefined;
    }
    var level = levelMatch[0].match(/\d/)[0];
    return parseInt(level, 10) || 1;
  }
  return undefined;
}
function isWordListElement(el) {
  if (el.className) {
    return el.className === 'MsoListParagraphCxSpFirst' || el.className === 'MsoListParagraphCxSpMiddle' || el.className === 'MsoListParagraphCxSpLast';
  }
  return undefined;
}
function createWordRules(blockContentType) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return [{
    deserialize(el, next) {
      if ((0, _helpers.tagName)(el) === 'p' && isWordListElement(el)) {
        return _objectSpread(_objectSpread({}, _constants.DEFAULT_BLOCK), {}, {
          listItem: getListItemStyle(el),
          level: getListItemLevel(el),
          style: _constants.BLOCK_DEFAULT_STYLE,
          children: next(el.childNodes)
        });
      }
      return undefined;
    }
  }];
}