"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createGDocsRules;
var _constants = require("../../constants");
var _helpers = require("../helpers");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var LIST_CONTAINER_TAGS = Object.keys(_constants.HTML_LIST_CONTAINER_TAGS);

// font-style:italic seems like the most important rule for italic / emphasis in their html
function isEmphasis(el) {
  var style = el.getAttribute('style');
  return !!style.match(/font-style:italic/);
}

// font-weight:700 seems like the most important rule for bold in their html
function isStrong(el) {
  var style = el.getAttribute('style');
  return !!style.match(/font-weight:700/);
}

// Check for attribute given by the gdocs preprocessor
function isGoogleDocs(el) {
  return el.getAttribute('data-is-google-docs');
}
function getListItemStyle(el) {
  if (!LIST_CONTAINER_TAGS.includes((0, _helpers.tagName)(el.parentNode))) {
    return undefined;
  }
  return (0, _helpers.tagName)(el.parentNode) === 'ul' ? 'bullet' : 'number';
}
function getListItemLevel(el) {
  var level = 0;
  if ((0, _helpers.tagName)(el) === 'li') {
    var parentNode = el.parentNode;
    while (parentNode) {
      // eslint-disable-next-line max-depth
      if (LIST_CONTAINER_TAGS.includes((0, _helpers.tagName)(parentNode))) {
        level++;
      }
      parentNode = parentNode.parentNode;
    }
  } else {
    level = 1;
  }
  return level;
}
var blocks = _objectSpread(_objectSpread({}, _constants.HTML_BLOCK_TAGS), _constants.HTML_HEADER_TAGS);
function getBlockStyle(el, enabledBlockStyles) {
  var block = blocks[(0, _helpers.tagName)(el.firstChild)];
  if (!block) {
    return _constants.BLOCK_DEFAULT_STYLE;
  }
  if (!enabledBlockStyles.includes(block.style)) {
    return _constants.BLOCK_DEFAULT_STYLE;
  }
  return block.style;
}
function createGDocsRules(blockContentType) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return [{
    deserialize(el, next) {
      if ((0, _helpers.tagName)(el) === 'span' && isGoogleDocs(el)) {
        var span = _objectSpread(_objectSpread({}, _constants.DEFAULT_SPAN), {}, {
          marks: [],
          text: el.innerText
        });
        if (isStrong(el)) {
          span.marks.push('strong');
        }
        if (isEmphasis(el)) {
          span.marks.push('em');
        }
        return span;
      }
      return undefined;
    }
  }, {
    deserialize(el, next) {
      if ((0, _helpers.tagName)(el) === 'li' && isGoogleDocs(el)) {
        return _objectSpread(_objectSpread({}, _constants.DEFAULT_BLOCK), {}, {
          listItem: getListItemStyle(el),
          level: getListItemLevel(el),
          style: getBlockStyle(el, options.enabledBlockStyles),
          children: next(el.firstChild.childNodes)
        });
      }
      return undefined;
    }
  }];
}