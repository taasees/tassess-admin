export = GitEncoderDelegate;
declare class GitEncoderDelegate {
    constructor(options: any);
    schema: any;
    models: any;
    modelsByName: _.Dictionary<any>;
    pageLayoutKey: any;
    castReferenceToModel: boolean;
    projectId: any;
    projectUrl: any;
    branch: any;
    noEncodeFields: any;
    omitFields: any[];
    encodedFieldTypes: any;
    assetsReferenceType: any;
    assetsDir: any;
    staticDir: any;
    staticAssetsPublicPath: any;
    getModelsByName(): _.Dictionary<any>;
    getEncodedFieldTypes(): any;
    getNoEncodeFields(): any;
    getItemId(item: any): any;
    getModelForRootItem(rootItem: any): any;
    isLinkItem(): boolean;
    getReferenceId(item: any): any;
    getModelForItemOfReferenceType(item: any): any;
    getModelForItemOfModelsType(item: any): any;
    getItemMetadata(item: any, model: any, isRoot: any): _.Dictionary<any>;
    getItemLabelFieldValue(item: any, model: any): any;
    getItemFields(item: any, model: any): {
        name: string;
        value: never;
        encodedDataPath: string;
        unset: boolean;
    }[];
    encodeField(fieldValue: any, fieldModel: any, fieldDataPath: any): {
        fieldData: {
            isUnset: boolean;
            srcObjectId?: undefined;
            fields?: undefined;
        };
        encodedData?: undefined;
        encodedFieldPath?: undefined;
        relativeFieldDataPath?: undefined;
    } | {
        encodedData: any;
        encodedFieldPath: string;
        relativeFieldDataPath: string[];
        fieldData: {
            srcObjectId: any;
            fields: {
                title: {
                    type: string;
                    value: string;
                };
                url: {
                    type: string;
                    value: any;
                };
            };
            isUnset?: undefined;
        };
    } | null;
}
import _ = require("lodash");
//# sourceMappingURL=encoder-delegate.d.ts.map