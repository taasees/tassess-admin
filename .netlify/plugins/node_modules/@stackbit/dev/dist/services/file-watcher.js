"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.watchDir = void 0;
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const chokidar_1 = __importDefault(require("chokidar"));
const logger_1 = __importDefault(require("./logger"));
function watchDir(dir, onFileChange, throttleDelay = 1000) {
    const fullDir = path_1.default.resolve(process.cwd(), dir);
    logger_1.default.debug('Watch dir for changes: ' + fullDir);
    const watcher = chokidar_1.default.watch('.', {
        cwd: fullDir,
        ignored: (filePath) => {
            return (filePath.includes(`/.git/`) ||
                filePath.includes(`/.next/`) ||
                filePath.includes(`/.cache/`) ||
                filePath.includes(`/.stackbit/cache`) ||
                filePath.includes(`/node_modules`) ||
                ((filePath.includes(`/.`) || filePath.startsWith(`.`)) && !(filePath.includes(`/.stackbit`) || filePath.startsWith(`.stackbit`))));
        },
        persistent: true,
        ignoreInitial: true
    });
    let changedFiles = [];
    const throttledFileChange = lodash_1.default.throttle(() => {
        if (changedFiles.length) {
            onFileChange(changedFiles);
            changedFiles = [];
        }
    }, throttleDelay);
    const handleFileChange = (filePath) => {
        if (!changedFiles.includes(filePath)) {
            changedFiles.push(filePath);
        }
        throttledFileChange();
    };
    watcher
        .on('add', handleFileChange)
        .on('change', handleFileChange)
        .on('unlink', handleFileChange)
        .on('addDir', handleFileChange)
        .on('unlinkDir', handleFileChange);
    return watcher;
}
exports.watchDir = watchDir;
//# sourceMappingURL=file-watcher.js.map