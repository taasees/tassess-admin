"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLogger = void 0;
const lodash_1 = __importDefault(require("lodash"));
const winston_1 = __importDefault(require("winston"));
const config_1 = __importDefault(require("../config"));
const formatError = winston_1.default.format((info, opts) => {
    if (lodash_1.default.has(info, 'err')) {
        info.error = info.err;
        delete info.err;
    }
    if (lodash_1.default.has(info, 'error.message')) {
        info.error = lodash_1.default.omitBy({
            message: lodash_1.default.get(info, 'error.message'),
            stack: lodash_1.default.get(info, 'error.stack', null)
        }, lodash_1.default.isNil);
    }
    return info;
});
const timestampFormat = winston_1.default.format((info) => {
    const MESSAGE = Symbol.for('message');
    if (typeof info[MESSAGE] === 'string') {
        info[MESSAGE] = `[${new Date().toISOString().substring(11, 23)}] ${info[MESSAGE]}`;
    }
    return info;
});
const defaultFormats = [formatError(), winston_1.default.format.colorize(), winston_1.default.format.simple()];
if (process.env.LOG_TIMESTAMP) {
    defaultFormats.push(timestampFormat());
}
const transports = [
    new winston_1.default.transports.Console({
        format: winston_1.default.format.combine(...defaultFormats)
    })
];
const logger = winston_1.default.createLogger({
    level: config_1.default.logLevel,
    transports: transports
});
const createLogger = ({ label }) => {
    const formats = defaultFormats.slice();
    if (label) {
        formats.push(winston_1.default.format.label({
            label: label,
            message: true
        }));
    }
    const logger = winston_1.default.createLogger({
        level: config_1.default.logLevel,
        format: winston_1.default.format.combine(...formats),
        transports: transports
    });
    logger.createLogger = exports.createLogger;
    return logger;
};
exports.createLogger = createLogger;
logger.createLogger = exports.createLogger;
exports.default = logger;
//# sourceMappingURL=logger.js.map