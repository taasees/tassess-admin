"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = void 0;
const http_1 = __importDefault(require("http"));
const express_1 = __importDefault(require("express"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const logger_1 = __importDefault(require("../services/logger"));
const routes_1 = __importDefault(require("./routes"));
const proxy_1 = __importDefault(require("./proxy"));
const runner_1 = __importDefault(require("../runner"));
const consts_1 = __importDefault(require("../consts"));
const config_1 = __importDefault(require("../config"));
const socket_service_1 = __importDefault(require("@stackbit/dev-common/dist/services/socket-service"));
const proxy_utils_1 = require("@stackbit/dev-common/dist/utils/proxy-utils");
async function start({ serverPort, ssgPort, ssgHost, rootDir, runnableDir, uuid, cmsType, localDetails, ...options }) {
    logger_1.default.debug('Starting Stackbit dev server...');
    const runner = new runner_1.default({
        rootDir,
        runnableDir,
        cmsType,
        ...options
    });
    await runner.install();
    logger_1.default.debug('Done runner init');
    if (ssgHost?.toLowerCase().startsWith('https')) {
        process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
    }
    const server = (0, express_1.default)();
    const httpServer = http_1.default.createServer(server);
    socket_service_1.default.use(httpServer, logger_1.default);
    // manual handling for private network CORS is needed until cors library supports this natively
    // https://github.com/expressjs/cors/pull/274
    server.use((req, res, next) => {
        if (req.headers['access-control-request-private-network'] === 'true' || req.headers['access-control-request-local-network'] === 'true') {
            res.setHeader('access-control-allow-private-network', 'true');
            res.setHeader('access-control-allow-local-network', 'true');
        }
        next();
    });
    server.use(require('cors')());
    server.use((req, res, next) => {
        // log requests
        logger_1.default.debug(`got request ${req.method} ${req.path}`, { method: req.method, originalUrl: req.originalUrl, url: req.url, path: req.path });
        next();
    });
    if (process.env.PERF) {
        const responseTime = require('response-time');
        server.use(responseTime());
    }
    server.use(`${consts_1.default.STATIC_ASSETS_PUBLIC_PATH}/*`, async (req, res, next) => {
        const assetFileName = req.params[0];
        if (!assetFileName) {
            return next();
        }
        const filePath = path_1.default.join(rootDir, decodeURIComponent(assetFileName));
        if (!(await fs_extra_1.default.pathExists(filePath))) {
            return next();
        }
        return res.sendFile(filePath);
    });
    server.use(consts_1.default.STATIC_ASSETS_PUBLIC_PATH, express_1.default.static(path_1.default.join(rootDir, consts_1.default.STATIC_ASSETS_FILE_PATH)));
    server.use(`${consts_1.default.STATIC_THEME_ASSETS_PUBLIC_PATH}/*`, async (req, res, next) => {
        const assetFileName = req.params[0];
        if (!assetFileName) {
            return next();
        }
        const filePath = path_1.default.join(rootDir, decodeURIComponent(assetFileName));
        if (!(await fs_extra_1.default.pathExists(filePath))) {
            return next();
        }
        const extension = path_1.default.extname(filePath).substring(1);
        const contentType = express_1.default.static.mime.lookup(extension);
        if (contentType !== 'text/html') {
            return res.sendFile(filePath);
        }
        res.setHeader('content-type', contentType);
        let data = await fs_extra_1.default.readFile(filePath, 'utf-8');
        data = (0, proxy_utils_1.injectScript)(data, config_1.default.controlUrl);
        return res.send(data);
    });
    server.use(consts_1.default.STATIC_THEME_ASSETS_PUBLIC_PATH, express_1.default.static(path_1.default.join(rootDir, consts_1.default.STATIC_THEME_ASSETS_FILE_PATH)));
    server.use('/_static', express_1.default.static('static'));
    const openUrl = `${config_1.default.appUrl}/local/${Buffer.from(JSON.stringify({
        ...localDetails,
        csi: runner.isCsiEnabled()
    })).toString('base64')}`;
    (0, routes_1.default)(server, runner, uuid, openUrl);
    (0, proxy_1.default)(server, ssgHost, ssgPort, runner);
    return new Promise((resolve) => {
        httpServer.listen(serverPort, () => {
            logger_1.default.debug('Server running on port ' + serverPort);
            resolve(runner);
        });
    });
}
exports.start = start;
//# sourceMappingURL=index.js.map