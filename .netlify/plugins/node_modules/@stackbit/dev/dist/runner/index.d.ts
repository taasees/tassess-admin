import { LoadConfigResult, ConfigLoadError, StackbitConfigNotFoundError } from '@stackbit/sdk';
import { APIMethodInterface, APIMethodCreateDocument, APIMethodCreatePreset, APIMethodDeleteDocument, APIMethodDeletePreset, APIMethodDuplicateDocument, APIMethodGetAssets, APIMethodUpdateDocument, APIMethodUploadAssets, APIMethodValidateDocuments, APIMethodPublishDocuments, APIMethodCreateAndLinkDocument, APIMethodUploadAndLinkAsset, APIMethodSearchDocuments, APIMethodHasAccess, APIMethodOnWebhook, APIMethodCreateAndCrossLinkDocument, APIMethodCreateScheduledAction, APIMethodGetScheduledActions, APIMethodCancelScheduledAction, APIMethodUpdateScheduledAction, APIMethodGetCustomActions, APIMethodRunCustomAction, APIMethodGetDocumentVersions, APIMethodGetDocumentForVersion, APIMethodGetCollections, APIMethodGetSiteMap, APIMethodGetTreeViews, APIMethodGetSchema, APIMethodGetObjects, APIMethodGetObjectsWithAnnotations, APIMethodGetDocuments, APIMethodGetCSIDocuments, APIMethodUnpublishDocuments, APIMethodArchiveDocument, APIMethodGetStagedChanges, APIMethodUnarchiveDocument } from '../types/api-methods';
import * as StackbitTypes from '@stackbit/types';
interface RunnerOptions {
    rootDir: string;
    runnableDir?: string;
    cmsType?: string;
    csiEnabled?: boolean;
    csiWebhookUrl?: string;
    contentfulAccessToken?: string;
    contentfulSpaceIds?: [string];
    contentfulPreviewTokens?: [string];
    sanityToken?: string;
    sanityStudioPath?: string;
    sanityDataset?: string;
    sanityProjectId?: string;
    sanityStudioUrl?: string;
    logger?: StackbitTypes.Logger;
}
export default class Runner implements APIMethodInterface {
    private readonly contentStoreAdapter;
    private readonly workers;
    private readonly rootDir;
    private readonly appDir;
    private readonly logger;
    private stackbitConfigResult;
    private editor;
    private watcher;
    private ssg;
    constructor(options: RunnerOptions);
    install(): Promise<void>;
    loadStackbitConfig(): Promise<{
        config: import("@stackbit/sdk").Config | null;
        errors: import("@stackbit/sdk").ConfigValidationError[] | (StackbitConfigNotFoundError | ConfigLoadError)[];
    }>;
    onStackbitConfigUpdate(result: LoadConfigResult): Promise<void>;
    handleFileChanges(filePaths: string[]): Promise<void>;
    getDirectPaths(): string[] | undefined;
    /**
     * Function retuning a map or a function that rewrites direct proxy requests.
     * https://github.com/chimurai/http-proxy-middleware#http-proxy-middleware-options
     * @return {Function|Object}
     */
    getDirectRoutes(): {
        [hostOrPath: string]: string;
    };
    getDirectChangeOrigin(): boolean | undefined;
    getDirectChangeSocketOrigin(): boolean | undefined;
    getObjects({ objectIds, locale, user }: APIMethodGetObjects['data']): Promise<APIMethodGetObjects['result']>;
    getDocuments({ documentSpecs, user }: APIMethodGetDocuments['data']): Promise<APIMethodGetDocuments['result']>;
    getCSIDocuments(data?: APIMethodGetCSIDocuments['data']): Promise<APIMethodGetCSIDocuments['result']>;
    getStagedChanges(data: APIMethodGetStagedChanges['data']): Promise<APIMethodGetStagedChanges['result']>;
    getObjectsWithAnnotations({ annotationTree, clientAnnotationErrors, resolveAllReferences, sourcemaps, locale, user }: APIMethodGetObjectsWithAnnotations['data']): Promise<APIMethodGetObjectsWithAnnotations['result']>;
    getCollections({ locale, user }: APIMethodGetCollections['data']): Promise<APIMethodGetCollections['result']>;
    getSiteMap({ locale, user }: APIMethodGetSiteMap['data']): Promise<APIMethodGetSiteMap['result']>;
    getTreeViews({ user }: APIMethodGetTreeViews['data']): Promise<APIMethodGetTreeViews['result']>;
    getSchema({ locale, user }: APIMethodGetSchema['data']): Promise<APIMethodGetSchema['result']>;
    getUrl(srcDocumentId: string, srcProjectId: string, srcType: string, locale?: string): Promise<string | null>;
    getObject(objectId: string, projectId: string): Promise<any>;
    listAssets(filterParams: any): Promise<any>;
    uploadAsset(url: string, filename: string, user: any): Promise<any>;
    hasAccess(data: APIMethodHasAccess['data']): Promise<APIMethodHasAccess['result']>;
    createDocument(data: APIMethodCreateDocument['data']): Promise<APIMethodCreateDocument['result']>;
    createAndLinkDocument(data: APIMethodCreateAndLinkDocument['data']): Promise<APIMethodCreateAndLinkDocument['result']>;
    createAndCrossLinkDocument(data: APIMethodCreateAndCrossLinkDocument['data']): Promise<APIMethodCreateAndCrossLinkDocument['result']>;
    uploadAndLinkAsset(data: APIMethodUploadAndLinkAsset['data']): Promise<APIMethodUploadAndLinkAsset['result']>;
    duplicateDocument(data: APIMethodDuplicateDocument['data']): Promise<APIMethodDuplicateDocument['result']>;
    updateDocument(data: APIMethodUpdateDocument['data']): Promise<APIMethodUpdateDocument['result']>;
    deleteDocument(data: APIMethodDeleteDocument['data']): Promise<APIMethodDeleteDocument['result']>;
    archiveDocument(data: APIMethodArchiveDocument['data']): Promise<APIMethodArchiveDocument['result']>;
    unarchiveDocument(data: APIMethodUnarchiveDocument['data']): Promise<APIMethodUnarchiveDocument['result']>;
    getScheduledActions(): Promise<APIMethodGetScheduledActions['result']>;
    createScheduledAction(data: APIMethodCreateScheduledAction['data']): Promise<APIMethodCreateScheduledAction['result']>;
    cancelScheduledAction(data: APIMethodCancelScheduledAction['data']): Promise<APIMethodCancelScheduledAction['result']>;
    updateScheduledAction(data: APIMethodUpdateScheduledAction['data']): Promise<APIMethodUpdateScheduledAction['result']>;
    searchDocuments(data: APIMethodSearchDocuments['data']): Promise<APIMethodSearchDocuments['result']>;
    onWebhook(data: APIMethodOnWebhook['data']): Promise<APIMethodOnWebhook['result']>;
    validateDocuments(data: APIMethodValidateDocuments['data']): Promise<APIMethodValidateDocuments['result']>;
    publishDocuments(data: APIMethodPublishDocuments['data']): Promise<APIMethodPublishDocuments['result']>;
    unpublishDocuments(data: APIMethodUnpublishDocuments['data']): Promise<APIMethodUnpublishDocuments['result']>;
    getAssets(data: APIMethodGetAssets['data']): Promise<APIMethodGetAssets['result']>;
    uploadAssets(data: APIMethodUploadAssets['data']): Promise<APIMethodUploadAssets['result']>;
    createPreset(data: APIMethodCreatePreset['data']): Promise<APIMethodCreatePreset['result']>;
    deletePreset(data: APIMethodDeletePreset['data']): Promise<APIMethodDeletePreset['result']>;
    getCustomActions(data: APIMethodGetCustomActions['data']): Promise<APIMethodGetCustomActions['result']>;
    runCustomAction(data: APIMethodRunCustomAction['data']): Promise<APIMethodRunCustomAction['result']>;
    getDocumentVersions(data: APIMethodGetDocumentVersions['data']): Promise<APIMethodGetDocumentVersions['result']>;
    getDocumentForVersion(data: APIMethodGetDocumentForVersion['data']): Promise<APIMethodGetDocumentForVersion['result']>;
    makeAction(action: string, data: any): Promise<any>;
    keepAlive(): void;
    isCsiEnabled(): boolean;
    getAssetFilePath(url: string): string | undefined;
    destroy(): Promise<void>;
}
export {};
//# sourceMappingURL=index.d.ts.map