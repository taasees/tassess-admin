"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deletePreset = exports.generatePresetFileName = exports.createAndSavePreset = exports.savePreset = exports.createPreset = void 0;
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = require("fs-extra");
const uuid_1 = require("uuid");
const utils_1 = require("@stackbit/cms-core/dist/utils");
const cms_core_1 = require("@stackbit/cms-core");
const cms_utils_1 = require("../utils/cms-utils");
const git_based_assets_manager_1 = require("../cms/git/git-based-assets-manager");
function convertDocumentFieldsToPresetData({ assetsById, documentsById, object, locale, defaultLocale, referenceBehavior, staticAssetsPublicPath }) {
    function _deepMapDocumentField(documentField, seenReferences) {
        const docField = (0, cms_core_1.getDocumentFieldForLocale)(documentField, locale ?? defaultLocale);
        if (!docField) {
            return null;
        }
        if ('isUnset' in docField && docField.isUnset) {
            return null;
        }
        if (docField.type === 'object') {
            return lodash_1.default.mapValues(docField.fields, (field) => {
                return _deepMapDocumentField(field, seenReferences);
            });
        }
        else if (docField.type === 'model') {
            return {
                $$type: docField.srcModelName,
                ...lodash_1.default.mapValues(docField.fields, (field) => {
                    return _deepMapDocumentField(field, seenReferences);
                })
            };
        }
        else if (docField.type === 'list') {
            return lodash_1.default.map(docField.items, (item) => {
                return _deepMapDocumentField(item, seenReferences);
            });
        }
        else if (docField.type === 'image') {
            if (docField.sourceData) {
                return docField.sourceData;
            }
            const url = (0, cms_core_1.getDocumentFieldForLocale)(docField.fields?.url, locale ?? defaultLocale)?.value;
            if (staticAssetsPublicPath && url?.startsWith(staticAssetsPublicPath)) {
                return url.substr(staticAssetsPublicPath.length);
            }
            return url ?? null;
        }
        else if (docField.type === 'reference') {
            if (docField.refType === 'asset') {
                const referencedAsset = assetsById[docField.refId];
                if (!referencedAsset) {
                    return null;
                }
                return {
                    $$ref: docField.refId,
                    $$type: referencedAsset.srcModelName
                };
            }
            const referencedDocument = documentsById[docField.refId];
            if (!referencedDocument) {
                return null;
            }
            const modelName = referencedDocument.srcModelName;
            const shouldDuplicate = shouldDuplicateReference(docField, modelName, referenceBehavior, seenReferences);
            if (shouldDuplicate) {
                seenReferences.push(docField.refId);
                return {
                    $$type: referencedDocument.srcModelName,
                    $$refSrcType: referencedDocument.srcType,
                    $$refProjectId: referencedDocument.srcProjectId,
                    ...lodash_1.default.mapValues(referencedDocument.fields, (field) => {
                        return _deepMapDocumentField(field, seenReferences);
                    })
                };
            }
            return {
                $$ref: docField.refId,
                $$type: modelName
            };
        }
        else if (docField.type === 'cross-reference') {
            if (docField.refType === 'asset') {
                const referencedAsset = assetsById[docField.refId];
                if (!referencedAsset) {
                    return null;
                }
                return {
                    $$ref: docField.refId,
                    $$refSrcType: referencedAsset.srcType,
                    $$refProjectId: referencedAsset.srcProjectId,
                    $$type: referencedAsset.srcModelName
                };
            }
            const referencedDocument = documentsById[docField.refId];
            if (!referencedDocument) {
                return null;
            }
            const modelName = referencedDocument.srcModelName;
            const shouldDuplicate = shouldDuplicateReference(docField, modelName, referenceBehavior, seenReferences);
            if (shouldDuplicate) {
                seenReferences.push(docField.refId);
                return {
                    $$type: referencedDocument.srcModelName,
                    $$refSrcType: referencedDocument.srcType,
                    $$refProjectId: referencedDocument.srcProjectId,
                    ...lodash_1.default.mapValues(referencedDocument.fields, (field) => {
                        return _deepMapDocumentField(field, seenReferences);
                    })
                };
            }
            return {
                $$ref: docField.refId,
                $$type: modelName,
                $$refSrcType: referencedDocument.srcType,
                $$refProjectId: referencedDocument.srcProjectId
            };
        }
        // for all other fields, return its value as is
        return docField.value ?? null;
    }
    return lodash_1.default.mapValues(object.fields, (field) => {
        return _deepMapDocumentField(field, object.type === 'document' ? [object.srcObjectId] : []);
    });
}
function shouldDuplicateReference(referenceField, modelName, referenceBehavior, seenReferences) {
    return (seenReferences?.includes(referenceField.refId) !== true &&
        modelName !== cms_core_1.IMAGE_MODEL.name &&
        ((referenceBehavior?.behavior === 'duplicateContents' && !(referenceBehavior?.nonDuplicatableModels ?? []).includes(modelName)) ||
            (referenceBehavior?.behavior !== 'duplicateContents' && (referenceBehavior?.duplicatableModels ?? []).includes(modelName))));
}
async function handleThumbnail(dir, presetFileName, thumbnail, logger) {
    const assetsManager = new git_based_assets_manager_1.GitBasedAssetsManager({
        rootDir: dir,
        appDir: dir,
        staticAssetsFilePath: '',
        staticAssetsPublicPath: ''
    });
    assetsManager.assetsDir = '';
    assetsManager.staticDir = '';
    try {
        const filePath = path_1.default.join(dir, '.stackbit/presets/images', path_1.default.parse(presetFileName).name + path_1.default.extname(lodash_1.default.get(thumbnail, 'metadata.name')));
        await assetsManager.uploadFileTo(thumbnail.url, filePath, thumbnail.data);
        return filePath;
    }
    catch (err) {
        logger?.error('Error getting thumbnail', { err });
    }
    return null;
}
async function createPreset({ documentsById, assetsById, fieldDataPath, presetParams, contentStoreLocales, referenceBehavior, staticAssetsPublicPath }) {
    const documentId = fieldDataPath[0];
    if (!documentId) {
        throw new Error('fieldDataPath is empty');
    }
    const document = documentsById[documentId];
    if (!document) {
        throw new Error(`'document with id '${documentId}' not found'`);
    }
    const defaultLocale = contentStoreLocales?.find((contentStoreLocale) => contentStoreLocale.srcType === document.srcType && contentStoreLocale.srcProjectId === document.srcProjectId)?.defaultLocale;
    let modelName = document.srcModelName;
    let presetData;
    if (fieldDataPath.length === 1) {
        presetData = convertDocumentFieldsToPresetData({
            documentsById,
            assetsById,
            object: document,
            locale: presetParams.locale,
            defaultLocale,
            referenceBehavior,
            staticAssetsPublicPath
        });
    }
    else {
        const documentField = (0, cms_core_1.getDocumentFieldAtFieldPath)({
            document: document,
            fieldPath: fieldDataPath.slice(1),
            locale: presetParams.locale,
            isFullFieldPath: true
        });
        // in tests, old git-cms returns model fields with type === object
        // if (documentField.type !== 'model') {
        if (!('srcModelName' in documentField)) {
            throw new Error('object for preset must be a document or a field of type model');
        }
        if (documentField.isUnset) {
            throw new Error(`object has no value for locale '${presetParams.locale}'`);
        }
        modelName = documentField.srcModelName;
        presetData = convertDocumentFieldsToPresetData({
            documentsById,
            assetsById,
            object: documentField,
            locale: presetParams.locale,
            defaultLocale,
            referenceBehavior,
            staticAssetsPublicPath
        });
    }
    return {
        ...lodash_1.default.omit(presetParams, 'thumbnail'),
        modelName,
        srcType: document.srcType,
        srcProjectId: document.srcProjectId,
        data: presetData
    };
}
exports.createPreset = createPreset;
async function savePreset(dir, presetParams, preset, logger) {
    const presetsDir = path_1.default.join(dir, '.stackbit/presets');
    const presetsImagesDir = path_1.default.join(presetsDir, 'images');
    await (0, fs_extra_1.ensureDir)(presetsImagesDir);
    const presetFileName = generatePresetFileName(preset);
    const presetFilePath = path_1.default.join(presetsDir, presetFileName);
    const files = [presetFilePath];
    let thumbnailFilePath;
    if (presetParams.thumbnail) {
        const thumbnailFileName = await handleThumbnail(dir, presetFileName, presetParams.thumbnail, logger);
        if (thumbnailFileName) {
            thumbnailFilePath = path_1.default.relative(presetsDir, thumbnailFileName);
            files.push(thumbnailFileName);
        }
    }
    const fullPreset = {
        ...preset,
        thumbnail: thumbnailFilePath
    };
    const { modelName, srcType, srcProjectId, ...innerPreset } = fullPreset;
    const presetFileData = {
        model: modelName,
        srcType,
        srcProjectId,
        presets: [innerPreset]
    };
    await (0, fs_extra_1.writeJSON)(presetFilePath, presetFileData, {
        spaces: 4
    });
    return {
        files: files.map((fileName) => path_1.default.relative(dir, fileName)),
        preset: fullPreset
    };
}
exports.savePreset = savePreset;
async function createAndSavePreset(dir, documentsById, assetsById, fieldDataPath, presetParams, referenceBehavior, contentStoreLocales, logger) {
    const preset = await createPreset({
        documentsById,
        assetsById,
        fieldDataPath,
        presetParams,
        contentStoreLocales,
        referenceBehavior
    });
    return savePreset(dir, presetParams, preset, logger);
}
exports.createAndSavePreset = createAndSavePreset;
function generatePresetFileName(preset) {
    return `${(0, cms_utils_1.sanitizeSlug)(lodash_1.default.startCase(preset.modelName))}-${(0, cms_utils_1.sanitizeSlug)(preset.label)}-${(0, uuid_1.v4)().slice(0, 4)}.json`;
}
exports.generatePresetFileName = generatePresetFileName;
async function deletePreset(dir, presetId, logger) {
    const [fileName, presetPath] = presetId.split(':');
    if (!fileName || !presetPath) {
        return [];
    }
    const filePath = path_1.default.join(dir, fileName);
    if (!(await (0, fs_extra_1.pathExists)(filePath))) {
        return [];
    }
    const data = await (0, utils_1.parseFile)(filePath);
    const presetData = lodash_1.default.get(data, presetPath);
    if (!presetData) {
        return [];
    }
    const result = [fileName];
    if (data.presets?.length === 1) {
        await (0, fs_extra_1.unlink)(filePath);
    }
    else {
        data.presets = data.presets.filter((preset) => preset !== presetData);
        await (0, utils_1.outputData)(filePath, data);
    }
    if (presetData.thumbnail) {
        const thumbnailFilePath = path_1.default.join('.stackbit/presets', presetData.thumbnail);
        await (0, fs_extra_1.unlink)(path_1.default.join(dir, thumbnailFilePath));
        result.push(thumbnailFilePath);
    }
    return result;
}
exports.deletePreset = deletePreset;
//# sourceMappingURL=presets-service.js.map