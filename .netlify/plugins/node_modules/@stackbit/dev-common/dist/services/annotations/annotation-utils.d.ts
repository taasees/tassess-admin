/**
 * This method translates fieldPath (object.sections[0].title) to fieldDataPath (object.fields.sections.items[0].fields.title)
 * It follows references, and returns both the fieldDataPath from the nearest object that has an ID, but also the fieldDataPath from the original passed object
 *
 * FieldDataPathsFromRoot contains fieldPaths to current fieldPathStr from every object in the reference chain.
 * example: Oid1.fields.sections.items.1.fields.features.items.0.fields.featureTitle
 *                                  Oid2.fields.features.items.0.fields.featureTitle
 *                                                          Oid3.fields.featureTitle
 * all three fieldpaths are required to resolve every object in the reference chain
 * @param objectId
 * @param fieldPathStr
 * @param fieldData
 * @returns {{fieldDataPathsFromRoot: string[], fieldDataPath: string}|{}}
 */
export function fieldPathToFieldDataPath(objectId: any, fieldPathStr: any, getObjectById: any): {} | {
    fieldDataPathsFromRoot: string[];
    fieldDataPath: string;
};
/**
 * This converts a fieldPath array to a string, it puts complex strings inside single quotes '', and uses square brackets [] for number keys.
 * @param fieldPath
 * @returns {*}
 */
export function fieldPathToString(fieldPath: any): any;
export function appendOrArray(object: any, path: any, item: any): void;
//# sourceMappingURL=annotation-utils.d.ts.map