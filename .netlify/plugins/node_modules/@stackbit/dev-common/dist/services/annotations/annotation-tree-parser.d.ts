/**
 * Receive a list of objectIds, and the annotationTree, and resolves the annotations into a pathMap, and returns any additional referenced objects that were used in the annotations.
 * Also returns validation errors to the client.
 * @param annotationTree
 * @param {object} fieldData
 * @param resolveAllReferences
 * @returns {{pathMap: {}, objects, errors: *[]}}
 */
export function resolveObjectsWithAnnotationTree(annotationTree: {} | undefined, fieldData: object, { resolveAllReferences }?: {
    resolveAllReferences?: boolean | undefined;
}): {
    pathMap: {};
    objects;
    errors: any[];
};
/**
 * Receive a list of objectIds, and the annotationTree, and resolves the annotations into a pathMap, and returns any additional referenced objects that were used in the annotations.
 * Also returns validation errors to the client.
 * @param annotationTree
 * @param {object} getObjectById
 * @param resolveAllReferences
 * @returns {{pathMap: {}, objects, errors: *[]}}
 */
export function lazilyResolveObjectsWithAnnotationTree(annotationTree: {} | undefined, getObjectById: object, { resolveAllReferences }?: {
    resolveAllReferences?: boolean | undefined;
}): {
    pathMap: {};
    objects: any;
    errors: any[];
};
//# sourceMappingURL=annotation-tree-parser.d.ts.map