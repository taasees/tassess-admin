"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require('lodash');
const { Server } = require('socket.io');
class SocketService {
    use(server, logger) {
        this.logger = logger.createLogger({ label: 'socket-service' });
        this.socket = new Server(server, {
            pingTimeout: 30000,
            path: '/_socket/',
            cors: true,
            allowEIO3: true
        });
        // override cors middleware until cors library adds native support for access-control-allow-private-network
        // https://github.com/expressjs/cors/pull/274
        const corsMiddleware = this.socket.engine.corsMiddleware;
        this.socket.engine.corsMiddleware = (...args) => {
            const req = args[0];
            const res = args[1];
            if (_.get(req, ['headers', 'access-control-request-private-network']) === 'true' && _.isFunction(res.setHeader)) {
                res.setHeader('access-control-allow-private-network', 'true');
            }
            return corsMiddleware(...args);
        };
        this.logger.debug('created socket server');
        this.socket.on('connection', (socket) => {
            this.logger.debug('client connected');
        });
        this.socket.on('disconnect', (socket) => {
            this.logger.debug('client disconnected');
        });
    }
    broadcast(type, data) {
        if (!this.socket) {
            return;
        }
        this.socket.emit('message', { type, data });
    }
    notifyError(message) {
        if (!this.socket) {
            return;
        }
        this.logger.debug('notifying error', { message });
        this.broadcast('errorOccurred', message);
    }
    notifySchemaChange() {
        if (!this.socket) {
            return;
        }
        this.logger.debug('notifying schema change');
        this.broadcast('schemaChanged');
    }
    notifyObjectsChanged(update) {
        if (!this.socket) {
            return;
        }
        this.logger.debug('notifying objects change');
        this.broadcast('objectsChanged', update);
    }
    notifyActionStateChange(actionStateChange) {
        if (!this.socket) {
            return;
        }
        this.logger.debug('notifying action state change');
        this.broadcast('customActionStateChanged', actionStateChange);
    }
}
module.exports = new SocketService();
//# sourceMappingURL=socket-service.js.map