export function getFieldDefaultValue(type: any): string | false | 0 | undefined;
export function getDefaultFieldsFromModel(model: any, schema: any, objectDeepLevel?: number, { processAsset, duplicatableModels, createReferences }?: {
    processAsset: any;
    duplicatableModels: any;
    createReferences?: boolean | undefined;
}): any;
export function convertValueToType(value: any, type: any): any;
export function generateNameId(prefix: any): string;
/**
 * Updates slug field by slugifying it (e.g. replacing spaces to minuses etc)
 * The `stackbit_url_path` field exists in pages of projects that were generated by stackbit-factory for API-based CMS.
 * This field should always hold the full URL path of the page, even when page model's urlPath consists of several
 * parts like "/posts/{slug}" (the `stackbit_url_path` is not the `slug` part).
 * When `stackbit_url_path` is present, stackbit-container sets it as `pageModel.slugField`, thus making stackbit-app
 * send user provided slug as `stackbit_url_path` field. In this case, interpolate page URL using model's `urlPath` by
 * replacing `slug` with the value of `stackbit_url_path`, and then store the final result in `stackbit_url_path`.
 * In case it's non stackbit factory created site, just sanitize slug and save it in the fields.
 *
 * @param {Object} pageModel Page model as received from client
 * @param {Object} fields User provided parameters for page creation
 */
export function updateSlugField(pageModel: Object, fields: Object): Object;
/**
 * Interpolates url or file path pattern from data.
 * If token does not exist in data returns original token.
 *
 * @example
 * interpolateFileName('posts/{slug}', { slug: 'hello' })
 * => 'posts/hello'
 * interpolateFileName('_posts/{moment_format("YYYY-MM-DD")}-{slug}.md', { slug: 'hello' })
 * => '_posts/2020-11-16-hello.md'
 *
 * @param {string} pathTemplate
 * @param {Object} data
 * @return {string}
 */
export function interpolatePath(pathTemplate: string, data: Object): string;
export function sanitizeSlug(slug: any): any;
export function getObjectReferenceType(obj: any): any;
export function getObjectReferenceId(obj: any): any;
export function objectOmitInternalKeys(obj: any): _.Omit<any, "$$ref" | "$$type">;
import _ = require("lodash");
//# sourceMappingURL=cms-utils.d.ts.map