export class GitBasedAssetsManager {
    constructor(options: any);
    rootDir: any;
    appDir: any;
    writer: any;
    assetIdPrefix: any;
    staticAssetsFilePath: string;
    staticAssetsPublicPath: any;
    assetsDir: any;
    staticDir: any;
    uploadDir: string;
    publicPath: string;
    referenceType: string;
    maxImageSize: any;
    assetExtensions: string[];
    copyAssets(): Promise<void>;
    copyAssetToStaticFolder(filePath: any, relativeDir: any, staticAssetsFilePath: any): Promise<void>;
    listAssetFiles(assetsDir: any): Promise<{
        filePath: string;
        stats: fse.Stats;
    }[]>;
    getAssetsDir(): string;
    getUploadDir(): string;
    getPublicUrlPath(filePath: any): any;
    getAssetId(filePath: any): string;
    getAssetFilePath(assetId: any): string;
    isPrefixedAssetId(assetId: any): boolean;
    relativeFilePathFromPrefixedAssetId(assetId: any, filePath: any): string;
    replaceAssetLinks(value: any, objectId: any): string;
    uploadFileTo(url: any, filePath: any, data: any): Promise<{
        objectId: string;
        fileName: string;
        url: any;
        size: any;
        createdAt: any;
    }>;
    upload(url: any, filename: any, data: any, user: any): Promise<{
        objectId: string;
        fileName: string;
        url: any;
        size: any;
        createdAt: any;
    }>;
    normalizeAssetForResponse(filePath: any, stats: any): {
        objectId: string;
        fileName: string;
        url: any;
        size: any;
        createdAt: any;
    };
    getUniqueFilePath(baseName: any, ext: any, uploadDir: any, { randStr, retry }?: {
        randStr: any;
        retry?: number | undefined;
    }): any;
    list(filter: any): Promise<{
        assets: {
            objectId: string;
            fileName: string;
            url: any;
            size: any;
            createdAt: any;
        }[];
        meta: {
            totalPages: number;
        };
    }>;
}
import fse = require("fs-extra");
//# sourceMappingURL=git-based-assets-manager.d.ts.map