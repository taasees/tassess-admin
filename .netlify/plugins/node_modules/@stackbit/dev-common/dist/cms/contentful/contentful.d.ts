import _ from 'lodash';
import { Model, ImageModel } from '@stackbit/sdk';
import { EncodingResult, ContentStoreTypes } from '@stackbit/cms-core';
import { ContentfulEncoderDelegate, SyncPoller, SyncResult } from '@stackbit/cms-contentful';
import { UserProps } from '@stackbit/cms-contentful/dist/contentful-api-client';
import { CMSConstructorOptions, CMSInterface, PageModel } from '../../types';
export interface Space {
    spaceId: string;
    environment?: string;
    previewToken?: string;
}
export interface ContentfulConstructorOptions extends CMSConstructorOptions {
    spaces: Space[];
    accessToken: string | null;
}
export declare class Contentful implements CMSInterface {
    private encodingResult;
    private schemasBySpaceId;
    private localesBySpaceId;
    private usersBySpaceId;
    private defaultLocalesBySpaceId;
    private stackbitConfig;
    private readonly encodeDelimiter;
    private readonly watchForContentUpdates;
    private readonly onContentUpdate;
    private readonly spaces;
    private readonly accessToken;
    private readonly rootDir;
    private readonly appDir;
    private readonly repoDir;
    private readonly staticThemeAssetsPublicPath;
    private readonly staticThemeAssetsFilePath;
    private contentPollers;
    private logger;
    private userLogger;
    constructor(options: ContentfulConstructorOptions);
    run(): Promise<void>;
    restart(): Promise<void>;
    startWatchingContentUpdates(): void;
    createSyncPollers(): SyncPoller[] | null;
    encodeSyncResult(syncResult: SyncResult, spaceId: string): void;
    getEncoderDelegateForSpaceId(spaceId: string): ContentfulEncoderDelegate | null;
    getEncodingResult(): EncodingResult | null;
    getLocales(): ContentStoreTypes.ContentStoreLocale[];
    getLocalizedFieldFromPageEntry(pageModel: PageModel, pageEntry: any, fieldName: string, locale: string): string;
    getPresets(): Record<string, any>;
    getSchemaKey(): string;
    getMappedModels(locale?: string): {
        [x: string]: _.Dictionary<any>;
    };
    getModelsForProjectId(projectId: string): (Model | ImageModel)[];
    getEnvironmentForProjectId(projectId: string): string;
    getLocalizedFieldData(locale?: string): {
        [x: string]: any;
    } | null;
    getDefaultLocaleForSpaceId(spaceId: string): string | null;
    getUsersForSpaceId(spaceId: string): UserProps[];
    fetchSchema(): Promise<{
        schemaChanged: boolean;
    }>;
    fetchLocales(): Promise<void>;
    fetchDataAndEncode(): Promise<void>;
    fetchUsers(): Promise<void>;
    postPull(updatedFiles: string[]): Promise<{
        schemaChanged: boolean;
        updatedCodeFiles: string[];
    }>;
    keepAlive(): void;
}
//# sourceMappingURL=contentful.d.ts.map