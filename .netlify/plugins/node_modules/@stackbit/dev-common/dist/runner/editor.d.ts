import { ContentStoreTypes } from '@stackbit/cms-core';
import { Logger } from '@stackbit/types';
import { Config } from '@stackbit/sdk';
import { PresetParams } from '../services/presets-service';
import { CommitAndPushChanges, ContentStoreAdapter } from '../cms/content-store-adapter';
import type { Schema, CollectionItemWithModel, PageModel, SiteMap, Collections } from '../types';
export interface EditorOptions {
    contentStoreAdapter: ContentStoreAdapter;
    stackbitConfig: Config | null;
    logger: Logger;
    userLogger: Logger;
    stackbitUrlPathField: string;
    staticAssetsPublicPath?: string;
    commitAndPushChanges?: CommitAndPushChanges;
}
export default class Editor {
    private readonly contentStoreAdapter;
    private readonly logger;
    private readonly userLogger;
    private readonly stackbitUrlPathField;
    private readonly staticAssetsPublicPath?;
    private readonly commitAndPushChanges?;
    private stackbitConfig;
    constructor(options: EditorOptions);
    onStackbitConfigChange({ stackbitConfig }: {
        stackbitConfig: Config | null;
    }): void;
    buildUrlForPage(pageModel: PageModel, document: ContentStoreTypes.Document, locale?: string, urlPathTemplateParams?: Record<string, any>): string | null;
    getSchema({ locale, user }: {
        locale?: string;
        user?: ContentStoreTypes.User;
    }): Promise<Schema>;
    getUrl(srcDocumentId: string, srcProjectId: string, srcType: string, locale?: string): Promise<string | null>;
    getPageModels(options?: {
        forSchema?: boolean;
        user?: ContentStoreTypes.User;
    }): PageModel[];
    getSiteMap({ locale, user }: {
        locale?: string;
        user?: ContentStoreTypes.User;
    }): Promise<SiteMap>;
    getSiteMap_deprecated({ locale }: {
        locale?: string;
    }): Promise<SiteMap>;
    populateReferenceLabels(objects: ContentStoreTypes.APIObject[], documentMap: Record<string, ContentStoreTypes.Document | ContentStoreTypes.Asset>, locale?: string): void;
    getObjects({ objectIds, locale, user }: {
        objectIds?: string[];
        locale?: string;
        user?: ContentStoreTypes.User;
    }): Promise<{
        objects: ContentStoreTypes.APIObject[];
    }>;
    getObjectsWithAnnotations({ annotationTree, clientAnnotationErrors, resolveAllReferences, locale, reportAllErrors, user }: {
        annotationTree: any;
        clientAnnotationErrors: any;
        resolveAllReferences?: boolean;
        locale?: string;
        reportAllErrors: boolean;
        user?: ContentStoreTypes.User;
    }): Promise<{
        objects: any;
        pathMap: {};
        errors: any[];
    }>;
    getCollections({ locale, user }: {
        locale?: string;
        user?: ContentStoreTypes.User;
    }): Promise<Collections>;
    createPreset(dir: string, fieldDataPath: string[], presetParams: PresetParams, dryRun: boolean, user?: ContentStoreTypes.User): Promise<{
        files: string[];
        preset: import("@stackbit/sdk").Preset;
    }>;
    deletePreset(dir: string, presetId: string, user?: ContentStoreTypes.User): Promise<{
        changes: {
            filePath: string;
            description: string;
        }[];
        filesRemoved: string[];
    }>;
    searchDocuments(data: {
        query?: string;
        models: Array<{
            srcProjectId: string;
            srcType: string;
            modelName: string;
        }>;
        locale?: string;
        filter: ContentStoreTypes.SearchFilter;
        user?: ContentStoreTypes.User;
    }): Promise<{
        total: number;
        items: CollectionItemWithModel[];
    }>;
    getDocumentVersions(data: {
        srcType: string;
        srcProjectId: string;
        documentId: string;
        locale?: string;
        user?: ContentStoreTypes.User;
    }): Promise<{
        versions: ContentStoreTypes.APIDocumentVersion[];
    }>;
    getDocumentForVersion(data: {
        srcType: string;
        srcProjectId: string;
        documentId: string;
        versionId: string;
        locale?: string;
        user?: ContentStoreTypes.User;
    }): Promise<{
        version: ContentStoreTypes.APIDocumentVersionWithDocument;
    }>;
}
//# sourceMappingURL=editor.d.ts.map