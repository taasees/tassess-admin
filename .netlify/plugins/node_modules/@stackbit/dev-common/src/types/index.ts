import { Config, Model, ImageModel } from '@stackbit/sdk';
import {
    DocumentFilePathFunction,
    UserCommandSpawner,
    Document,
    SidebarButton,
    DistributiveOmit,
    AssetSource,
    Viewport,
    DocumentPermissions
} from '@stackbit/types';
import { ContentStoreTypes, EncodingResult, FieldData } from '@stackbit/cms-core';

export interface PageModel {
    modelName: string;
    srcProjectId: string;
    srcEnvironment: string;
    cmsId: string;
    label: string;
    /** @deprecated */
    url: string;
    urlPath: string;
    filePath: string | DocumentFilePathFunction;
    slugField: string;
    urlPathTokens?: string[];
}

export interface MappedModels {
    [projectId: string]: { [modelName: string]: Model | ImageModel };
}
export interface CMSConstructorOptions {
    stackbitConfig: Config | null;
    encodeDelimiter: string;
    rootDir: string;
    appDir: string;
    repoDir: string;
    staticThemeAssetsPublicPath: string;
    staticThemeAssetsFilePath: string;
    watchForContentUpdates: boolean;
    onContentUpdate: (options?: OnContentUpdateOptions) => void;
    logger: any;
    userLogger: any;
}

export interface OnContentUpdateOptions {
    updatedContentFiles?: string[];
    didUpdatePreviewContentFiles?: boolean;
    didUpdateIMContentFiles?: boolean;
    ssgRestartNeeded?: boolean;
}

export interface CMSInterface {
    run(options?: { spawnRunner?: UserCommandSpawner }): Promise<void>;
    restart(options?: { spawnRunner?: UserCommandSpawner }): Promise<void>;
    postPull(updatedFiles: string[], options?: { spawnRunner?: UserCommandSpawner }): Promise<{ schemaChanged?: boolean; updatedCodeFiles?: string[] }>;

    // getters
    getSchemaKey(): string;
    getEncodingResult(): EncodingResult | null;
    getLocalizedFieldData(locale?: string): FieldData | null;
    getModelsForProjectId(projectId?: string): (Model | ImageModel)[];
    getMappedModels(locale?: string): MappedModels;
    getEnvironmentForProjectId(projectId: string): string;
    getPresets(): any;
    keepAlive?(): void;
}

export type SiteMap = Record<string, SiteMapNode>;

export interface SiteMapNode {
    children: Record<string, SiteMapNode>;
    url: string;
    stableId?: string;
    title?: string;
    objectId?: string;
    srcType?: string;
    srcProjectId?: string;
    srcModelName?: string;
    locale?: string;
    isHomePage?: boolean;
    environment?: string;
    source?: 'schema';
}

export type Schema = {
    sidebarButtons?: SidebarButton[];
    stackbitVersion?: string;
    pageData?: any;
    schema: ContentStoreTypes.RecordSchema | null;
    pageModels: PageModel[];
    locales?: ContentStoreTypes.ContentStoreLocale[];
    duplicatableModels?: string[];
    presets: Record<string, any>;
    assetSources: DistributiveOmit<AssetSource, 'transform' | 'preview'>[];
    actions: Array<ContentStoreTypes.APICustomAction & { type: 'global' | 'bulk' }>;
    settings: {
        hcrHandled?: boolean;
        ssgName?: string;
        ssgVersion?: string;
        nodeVersion?: string;
        viewports?: Viewport[];
    };
    status: {
        hasConfig?: boolean;
        isCSIEnabled?: boolean;
        contentSourceTypes?: string[];
        contentSourceMeta?: ContentStoreMeta[];
        nodeVersion: string;
    };
};

export type ContentStoreMeta = {
    srcType: string;
    srcProjectId: string;
    srcVersion: string;
    csiVersion: string;
};

export type Collections = {
    collections: {
        srcType: string;
        srcProjectId: string;
        srcModelName: string;
        srcModelLabel?: string;
        objects: Omit<CollectionItem, 'srcProjectId' | 'srcType'>[];
    }[];
    styleObjectId: string | null;
};

export type CollectionItem = {
    srcObjectId: string;
    srcObjectLabel: string;
    createdAt: string;
    updatedAt: string;
    referencedBy: Record<string, number> | undefined;
    srcProjectId: string;
    srcType: string;
    srcObjectUrl?: string;
    locale?: string;
    status?: Document['status'];
    permissions?: DocumentPermissions;
};

export type CollectionItemWithModel = CollectionItem & {
    srcModelName: string;
    srcModelLabel: string;
};
