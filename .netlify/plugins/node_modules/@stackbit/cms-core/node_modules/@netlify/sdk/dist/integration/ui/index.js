import { IntegrationSurface } from "./surface/integrationSurface.js";
import { getPackageVersion } from "./utils/package-version.js";
import { generateCallback, generateInteractiveCallback, } from "./utils/callback.js";
export class NetlifyIntegrationUI {
    _surfaces;
    _integrationSlug;
    _friendlyName;
    constructor(friendlyName) {
        this._surfaces = [];
        this._friendlyName = friendlyName;
        this._integrationSlug = "";
    }
    addSurface(name) {
        const surface = new IntegrationSurface(name);
        this._surfaces.push(surface);
        return surface;
    }
    generateUIConfig(surfaceScriptUrl) {
        let surfaceScript = "";
        let useIdentity = false;
        const uiConfig = {
            // Get the version from the package.json
            sdkVersion: getPackageVersion(),
            friendlyName: this._friendlyName,
            surfaces: this._surfaces.map((surface) => {
                const routes = {};
                Object.values(surface.routes).forEach((route) => {
                    if (route.useIdentity) {
                        useIdentity = true;
                    }
                    routes[route.path] = route.elements;
                    route.onLoadCallbacks.forEach((callback) => {
                        surfaceScript += generateCallback(`WFUI_LOAD_${route.path}`, callback);
                    });
                    Object.entries(route.callbacks).forEach(([id, callback]) => {
                        // Sanitise the id to make it a valid JS identifier but allow event markers such as ":clicked" to be appended
                        let sanitisedId = id.replace(/[^a-zA-Z0-9:]/g, "_");
                        sanitisedId += "_UICALLBACK";
                        surfaceScript += generateCallback(sanitisedId, callback);
                    });
                    Object.entries(route.formCallbacks).forEach(([id, callback]) => {
                        if (id.endsWith(":submit")) {
                            surfaceScript += generateCallback(`WFUI_SAVE_${id}`, callback);
                        }
                        else if (id.endsWith(":cancel")) {
                            surfaceScript += generateCallback(`WFUI_CANCEL_${id}`, callback);
                        }
                    });
                    Object.entries(route.interactiveCallbacks).forEach(([id, callback]) => {
                        surfaceScript += generateInteractiveCallback(`WFUI_INTERACTION_${id}`, callback);
                    });
                });
                return {
                    surfaceName: surface.name,
                    routes,
                    surfaceScripts: [surfaceScriptUrl],
                };
            }),
        };
        if (useIdentity) {
            uiConfig.useIdentity = true;
        }
        return { config: uiConfig, script: surfaceScript };
    }
}
//# sourceMappingURL=index.js.map