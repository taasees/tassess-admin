import { type InteractionCallbackFunc } from "./surface/types.js";
interface UIBaseElementDefinition {
    id?: string;
    type: string;
    if?: {
        then?: Partial<UIElementOptions>;
        truthy?: string;
        falsy?: string;
        has?: {
            type: "plugin";
            name: string;
        };
        equals?: [string, unknown];
    };
    display?: "visible" | "hidden";
    data?: Record<string, unknown>;
}
export type SurfaceInputsValue = string | string[];
export type SurfaceInputsData = Record<string, SurfaceInputsValue>;
export interface IntegrationContext {
    siteId?: string;
    siteName?: string;
    siteUrl?: string;
    branch?: string;
    accountId: string;
    netlifyToken: string;
    providerOAuthToken?: string;
    serverUrl: string;
    isConnected?: boolean;
}
export interface UIElementTextOptions extends UIBaseElementDefinition {
    value: string;
}
export interface UIElementLinkOptions extends UIBaseElementDefinition {
    href: string;
    text: string;
    target?: "_blank" | "_self" | "_parent" | "_top";
    /**Controls if the generated `<a />` has the style `display: block;` */
    block?: boolean;
}
export interface UIElementButtonOptions extends UIBaseElementDefinition {
    title: string;
    id?: string;
    variant?: "standard" | "danger" | "pop";
    confirmationMessage?: string;
}
export interface UIElementCardOptions extends UIBaseElementDefinition {
    contents: UIElementOptions[];
    title: string;
    description?: string;
}
export interface UIElementFormOptions extends UIBaseElementDefinition {
    contents: UIElementOptions[];
    title: string;
    description?: string;
    saveLabel?: string;
    savingLabel?: string;
    cancelLabel?: string;
    readOnly?: boolean;
}
export interface UIElementSectionOptions extends UIBaseElementDefinition {
    contents: UIElementOptions[];
    title: string;
    description?: string;
}
interface InputElementTextValidation {
    pattern?: string;
    message?: string;
}
export type UIElementInputTextOptions = UIBaseElementDefinition & {
    value?: string;
    placeholder?: string;
    helpText?: string;
    required?: boolean;
    leftLabel?: string;
    fieldType?: "text" | "textarea" | "email" | "number" | "tel" | "url";
    floatingLabel?: string;
    id: string;
    label: string;
    persistAs?: string;
    validation?: InputElementTextValidation;
};
export type UIElementInputPasswordOptions = UIBaseElementDefinition & {
    value?: string;
    placeholder?: string;
    helpText?: string;
    required?: boolean;
    leftLabel?: string;
    floatingLabel?: string;
    id: string;
    label: string;
    persistAs?: string;
    validation?: InputElementTextValidation;
};
export interface InputSelectElementOption {
    value: string;
    label?: string;
    isSelected?: boolean;
}
export type UIElementInputSelectOptions = UIBaseElementDefinition & {
    options?: InputSelectElementOption[];
    placeholder?: string;
    helpText?: string;
    required?: boolean;
    callback?: InteractionCallbackFunc;
    id: string;
    label: string;
};
export type UIElementAlertOptions = UIBaseElementDefinition & {
    level: "error" | "warning" | "info";
    text: string;
};
export type UIElementConnectionOptions = UIBaseElementDefinition & {
    providerFriendlyName: string;
    connectWithMessage: string;
    disconnectFromMessage: string;
    disconnectWarning?: string;
};
interface UnorderedListOptionsItem {
    text: string;
    icon?: "success" | "warning";
}
export type UIElementUnorderedListOptions = UIBaseElementDefinition & {
    items: UnorderedListOptionsItem[];
};
export type UIElementOrderedListOptions = UIBaseElementDefinition & {
    items: string[];
};
export type UIElementCodeSnippetOptions = UIBaseElementDefinition & {
    code: string;
    language: "html" | "js" | "css" | "graphql";
};
export type UIElementDisableIntegrationSectionOptions = UIBaseElementDefinition & {
    integrationName: string;
    description?: string;
};
export type UIElementOptions = UIElementTextOptions | UIElementButtonOptions | UIElementCardOptions | UIElementInputTextOptions | UIElementFormOptions | UIElementSectionOptions | UIElementLinkOptions | UIElementInputPasswordOptions | UIElementConnectionOptions | UIElementInputSelectOptions | UIElementUnorderedListOptions | UIElementOrderedListOptions | UIElementDisableIntegrationSectionOptions | UIElementCodeSnippetOptions | UIElementAlertOptions;
export interface SurfaceDefinition {
    surfaceName: string;
    surfaceScripts?: string[];
    routes: Record<string, UIElementOptions[]>;
}
export interface UIConfig {
    sdkVersion: string;
    friendlyName: string;
    integrationSlug?: string;
    useIdentity?: boolean;
    surfaces: SurfaceDefinition[];
}
export type SurfaceName = "integrations-settings";
export {};
//# sourceMappingURL=types.d.ts.map