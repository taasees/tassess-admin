import { z } from "zod";
import { NetlifyIntegration } from "../index.js";
declare const IntegrationConfigurationSchema: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    slug: z.ZodString;
    scopes: z.ZodOptional<z.ZodObject<{
        all: z.ZodOptional<z.ZodBoolean>;
        site: z.ZodOptional<z.ZodArray<z.ZodEnum<["read", "write"]>, "many">>;
        env: z.ZodOptional<z.ZodArray<z.ZodEnum<["read", "write", "delete"]>, "many">>;
        user: z.ZodOptional<z.ZodArray<z.ZodEnum<["read", "write"]>, "many">>;
    }, "strip", z.ZodTypeAny, {
        all?: boolean | undefined;
        site?: ("read" | "write")[] | undefined;
        env?: ("delete" | "read" | "write")[] | undefined;
        user?: ("read" | "write")[] | undefined;
    }, {
        all?: boolean | undefined;
        site?: ("read" | "write")[] | undefined;
        env?: ("delete" | "read" | "write")[] | undefined;
        user?: ("read" | "write")[] | undefined;
    }>>;
    integrationLevel: z.ZodOptional<z.ZodEnum<["site", "team", "team-and-site"]>>;
    use_cjs_shims: z.ZodOptional<z.ZodBoolean>;
    connector: z.ZodOptional<z.ZodObject<{
        "local-frontend": z.ZodOptional<z.ZodObject<{
            port: z.ZodNumber;
            command: z.ZodString;
            directory: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            port: number;
            command: string;
            directory: string;
        }, {
            port: number;
            command: string;
            directory: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        "local-frontend"?: {
            port: number;
            command: string;
            directory: string;
        } | undefined;
    }, {
        "local-frontend"?: {
            port: number;
            command: string;
            directory: string;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    slug: string;
    name?: string | undefined;
    description?: string | undefined;
    scopes?: {
        all?: boolean | undefined;
        site?: ("read" | "write")[] | undefined;
        env?: ("delete" | "read" | "write")[] | undefined;
        user?: ("read" | "write")[] | undefined;
    } | undefined;
    integrationLevel?: "site" | "team" | "team-and-site" | undefined;
    use_cjs_shims?: boolean | undefined;
    connector?: {
        "local-frontend"?: {
            port: number;
            command: string;
            directory: string;
        } | undefined;
    } | undefined;
}, {
    slug: string;
    name?: string | undefined;
    description?: string | undefined;
    scopes?: {
        all?: boolean | undefined;
        site?: ("read" | "write")[] | undefined;
        env?: ("delete" | "read" | "write")[] | undefined;
        user?: ("read" | "write")[] | undefined;
    } | undefined;
    integrationLevel?: "site" | "team" | "team-and-site" | undefined;
    use_cjs_shims?: boolean | undefined;
    connector?: {
        "local-frontend"?: {
            port: number;
            command: string;
            directory: string;
        } | undefined;
    } | undefined;
}>;
export type IntegrationConfiguration = z.infer<typeof IntegrationConfigurationSchema>;
export declare const getConfiguration: (cwd?: string) => Promise<IntegrationConfiguration>;
export declare const getIntegrationModule: (builtPath: string, directory?: string) => Promise<NetlifyIntegration<z.ZodUnknown, z.ZodUnknown, z.ZodUnknown, z.ZodUnknown>>;
export declare const getIntegrationBuildInfo: ({ cwd, outDirOveride, }: {
    cwd: string;
    outDirOveride?: string;
}) => Promise<{
    integrationPackageJson: any;
    sourceFilePath: string;
    builtPath: string;
    outDir: string;
    packageName: any;
}>;
type PackageJSON = {
    [key: string]: any;
    main?: string;
    dependencies?: {
        [key: string]: string;
    };
    devDependencies?: {
        [key: string]: string;
    };
    version: string;
};
export declare function getDepNames(packageJsonContents: PackageJSON, opts: {
    external: boolean;
}): string[];
export declare function getInternalDepNames(packageJsonContents: PackageJSON): string[];
export declare function getExternalDepNames(packageJsonContents: PackageJSON): string[];
export declare function removeBundledDepsFromPackageJsonContents(packageJsonContents: PackageJSON): PackageJSON;
export declare const getSettings: () => any;
export declare const updateSettings: (newSettings: Record<string, string | undefined>) => void;
export {};
//# sourceMappingURL=util.d.ts.map