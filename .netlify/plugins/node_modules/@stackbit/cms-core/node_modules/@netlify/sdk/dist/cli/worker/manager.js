import { Worker } from "worker_threads";
export class IntegrationWorkerManager {
    worker;
    integrationPath;
    constructor(integrationPath) {
        this.integrationPath = integrationPath;
    }
    loadWorker() {
        const worker = new Worker(new URL("./worker.js", import.meta.url), {
            workerData: {
                integrationPath: this.integrationPath,
            },
        });
        this.worker = worker;
        return worker;
    }
    async reload(directory) {
        this.stop();
        this.loadWorker();
        await this.loadModule(directory);
        return this;
    }
    stop() {
        if (this.worker) {
            this.worker.terminate();
            this.worker = undefined;
        }
    }
    async getMessageResponse(type, payload) {
        return new Promise((resolve) => {
            if (!this.worker) {
                this.worker = this.loadWorker();
            }
            const id = Math.random().toString(36).substring(7);
            const messageHandler = (message) => {
                if (message.id === id) {
                    this.worker?.off("message", messageHandler);
                    resolve(message.result);
                }
            };
            this.worker.on("message", messageHandler);
            this.worker.postMessage({
                id,
                type,
                payload,
            });
        });
    }
    async loadModule(directory) {
        const loaded = await this.getMessageResponse("loadModule", directory);
        if (!loaded || (typeof loaded !== `boolean` && loaded?.failed)) {
            throw new Error(`Failed to load integration worker.\n${loaded.message || ``}`);
        }
        return this;
    }
    hasConnector() {
        return this.getMessageResponse("hasConnector");
    }
    writeConnectorOptionsSchema() {
        return this.getMessageResponse("writeConnectorOptionsSchema");
    }
    getConnectorConfig() {
        return this.getMessageResponse("getConnectorConfig");
    }
}
//# sourceMappingURL=manager.js.map