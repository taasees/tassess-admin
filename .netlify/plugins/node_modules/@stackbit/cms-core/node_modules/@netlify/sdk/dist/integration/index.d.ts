import { Handler } from "@netlify/functions";
import { IntegrationHandler, FunctionHandler } from "@netlify/integrations";
import { type z } from "zod";
import { NetlifyPluginConstants } from "@netlify/build";
import { BuildHookType, NetlifySdkContext, BuildHookWithContext, BuildHookOptions, BuildHookFunction } from "../index.js";
import { BaseConnectorLocalDevOptions, ConnectorBaseOptionsSchema, ConnectorContextState, ConnectorSupports, type ConnectorDefineOptions, type ConnectorDefineOptionsSchemaOutput, type ConnectorInitState, NetlifyConnector } from "./connect/sdk.js";
import type { BuildContextHandler, BuildHooks, BuildHooksOptions, EdgeFunctionsOptions, EdgeFunctionsSettings, Handlers, NetlifyIntegrationProps, FunctionsOptions, FunctionsSettings, Wrappers } from "./types.js";
type AddConnectorInput<State extends ConnectorContextState, OptionsSchema extends ConnectorBaseOptionsSchema, LocalDevOptions extends BaseConnectorLocalDevOptions | BaseConnectorLocalDevOptions[]> = {
    defineOptions?: ConnectorDefineOptions<OptionsSchema> | undefined;
    initState?: ConnectorInitState<State, ConnectorDefineOptionsSchemaOutput<OptionsSchema>> | undefined;
    localDevOptions?: LocalDevOptions | undefined;
    supports?: Partial<ConnectorSupports> | undefined;
    typePrefix: string;
};
export declare class NetlifyIntegration<SiteConfigSchema extends z.ZodSchema = z.ZodUnknown, TeamConfigSchema extends z.ZodSchema = z.ZodUnknown, BuildContext extends z.ZodSchema = z.ZodUnknown, BuildConfigSchema extends z.ZodSchema = z.ZodUnknown> {
    private _buildHooks;
    private _wrappers;
    private _handlers;
    private _netlifyConnectPlugin?;
    _buildConfigurationSchema?: BuildConfigSchema;
    _buildContextSchema?: BuildContext;
    _siteConfigSchema?: SiteConfigSchema;
    _teamConfigSchema?: TeamConfigSchema;
    _edgeFunctionsSettings?: EdgeFunctionsSettings;
    _functionsSettings?: FunctionsSettings;
    _slug: string;
    private _buildHooksOptions;
    constructor({ buildConfigSchema, buildContextSchema, siteConfigSchema, teamConfigSchema, }?: NetlifyIntegrationProps<BuildConfigSchema, BuildContext, SiteConfigSchema, TeamConfigSchema>);
    get buildSlug(): string;
    /**
     * Used to add a build event handlers to the integration.
     */
    addBuildEventHandler(type: BuildHookType, func: BuildHookWithContext<Zod.infer<BuildContext>, Zod.infer<BuildConfigSchema>>, options?: BuildHookOptions): void;
    /**
     * Used to add a build context to the integration that can be used in a build hook.
     */
    addBuildEventContext(handler: BuildContextHandler<Zod.infer<SiteConfigSchema>, Zod.infer<TeamConfigSchema>, Zod.infer<BuildContext>>): void;
    /**
     * Used to add an API Handler to the integration.
     */
    addApiHandler(name: string, handler: FunctionHandler<NetlifySdkContext<Zod.infer<SiteConfigSchema>, Zod.infer<TeamConfigSchema>>>): void;
    /**
     * Used to add a Wrapper to the integration.
     */
    addWrapper(name: string, handler: IntegrationHandler): void;
    /**
     * The handler to use for the onEnable endpoint.
     */
    onEnable(handler: FunctionHandler<NetlifySdkContext<Zod.infer<SiteConfigSchema>, Zod.infer<TeamConfigSchema>>>): void;
    /**
     * The handler to use for the onDisable endpoint.
     */
    onDisable(handler: FunctionHandler<NetlifySdkContext<Zod.infer<SiteConfigSchema>, Zod.infer<TeamConfigSchema>>>): void;
    /**
     * The handler to use for the onDisconnect endpoint.
     */
    onDisconnect(handler: FunctionHandler<NetlifySdkContext<Zod.infer<SiteConfigSchema>, Zod.infer<TeamConfigSchema>>>): void;
    addWebhookHandler(name: string, handler: FunctionHandler<NetlifySdkContext<Zod.infer<SiteConfigSchema>, Zod.infer<TeamConfigSchema>>>): void;
    /**
     * Used to inject edge functions into the user's site
     */
    injectEdgeFunctions(constants: NetlifyPluginConstants): () => Promise<void>;
    /**
     * Used to inject functions into the user's site.
     */
    injectFunctions(constants: NetlifyPluginConstants): () => Promise<void>;
    /**
     * Used to add internal edge functions to the integration.
     *
     * @beta This feature is currently in beta testing. The API may change in future releases.
     */
    addEdgeFunctions(path: string, edgeFunctionsOptions: EdgeFunctionsOptions): void;
    /**
     * Used to add internal functions to the integration.
     *
     * @beta This feature is currently in beta testing. The API may change in future releases.
     */
    addFunctions(path: string, functionsOptions: FunctionsOptions): void;
    addFallbackBuildEventHandlers(): void;
    get buildHooks(): BuildHooks;
    get buildHooksOptions(): BuildHooksOptions;
    get handlers(): Handlers;
    get wrappers(): Wrappers;
    get baseHandler(): Handler;
    /**
     * `addConnector` creates a connector definition and attaches it to the integration definition.
     */
    addConnector<State extends ConnectorContextState, LocalDevOptions extends BaseConnectorLocalDevOptions | BaseConnectorLocalDevOptions[], OptionsSchema extends ConnectorBaseOptionsSchema>({ defineOptions, initState, ...config }: AddConnectorInput<State, OptionsSchema, LocalDevOptions>): NetlifyConnector<State, OptionsSchema, LocalDevOptions>;
    get netlifyConnectPlugin(): NetlifyConnector<any, any> | null;
    getBuildConfig({ netlifyConfig }: {
        netlifyConfig: any;
    }): any;
    getBuildEventHandlersToRun({ netlifyConfig, }: {
        netlifyConfig: any;
    }): Record<string, BuildHookFunction>;
}
export {};
//# sourceMappingURL=index.d.ts.map