import { StackbitConfig } from "@stackbit/types";
export type CreateConfig = Omit<StackbitConfig, "stackbitVersion" | "devCommand" | "contentEngine" | "contentModels" | "models" | "modelsSource" | "logicFields" | "noEncodeFields" | "omitFields" | "encodedFieldTypes" | "cmsName" | "staticDir" | "uploadDir" | "assets" | "pagesDir" | "dataDir" | "pageLayoutKey" | "objectTypeKey" | "excludePages"> & {
    netlifyCreateVersion: string;
};
export declare function convertCreateConfigToStackbitConfig(config: CreateConfig): {
    actions?: (import("@stackbit/types").CustomActionGlobal | import("@stackbit/types").CustomActionBulk)[];
    ssgName?: typeof import("@stackbit/types").SSG_NAMES[number];
    ssgVersion?: string;
    nodeVersion?: string;
    useESM?: boolean;
    postGitCloneCommand?: string;
    preInstallCommand?: string;
    postInstallCommand?: string;
    installCommand?: string;
    import?: import("@stackbit/types").Import;
    buildCommand?: string;
    publishDir?: string;
    cacheDir?: string;
    styleObjectModelName?: string | null;
    presetSource?: import("@stackbit/types").PresetSource;
    sidebarButtons?: import("@stackbit/types").SidebarButton[];
    siteMap?: import("@stackbit/types").SiteMapFunction;
    sitemap?: import("@stackbit/types").SiteMapFunction;
    transformSitemap?: (options: import("@stackbit/types").ConfigDelegate & {
        sitemap: import("@stackbit/types").SiteMapEntry[];
        userContext: import("@stackbit/types").User;
    }) => import("@stackbit/types").SiteMapEntry[];
    treeViews?: import("@stackbit/types").TreeViewsFunction;
    transformTreeViews?: (options: import("@stackbit/types").ConfigDelegate & {
        treeViews: import("@stackbit/types").TreeViewNode[];
        userContext: import("@stackbit/types").User;
    }) => import("@stackbit/types").TreeViewNode[];
    presetReferenceBehavior?: "copyReference" | "duplicateContents";
    nonDuplicatableModels?: string[];
    duplicatableModels?: string[];
    customContentReload?: boolean;
    experimental?: import("@stackbit/types").Experimental;
    contentSources?: import("@stackbit/types").ContentSourceInterface<any, any, any, any, any>[];
    connectors?: {
        integration: any;
        config: any;
    }[];
    assetSources?: import("@stackbit/types").AssetSource[];
    viewports?: import("@stackbit/types").Viewport[];
    mapModels?: (options: {
        models: import("@stackbit/types").ModelWithSource[];
    }) => import("@stackbit/types").ModelWithSource[];
    modelExtensions?: import("@stackbit/types").ModelExtension[];
    permissionsForModel?: (options: import("@stackbit/types").ConfigDelegate & {
        model: import("@stackbit/types").ModelWithSource;
        userContext: import("@stackbit/types").User;
    }) => import("@stackbit/types").ModelPermissions | undefined;
    mapDocuments?: (options: {
        documents: import("@stackbit/types").DocumentWithSource[];
        models: import("@stackbit/types").ModelWithSource[];
    }) => import("@stackbit/types").DocumentWithSource[];
    permissionsForDocument?: (options: import("@stackbit/types").ConfigDelegate & {
        document: import("@stackbit/types").DocumentWithSource;
        userContext: import("@stackbit/types").User;
    }) => import("@stackbit/types").DocumentPermissions | undefined;
    filterAsset?: (options: import("@stackbit/types").ConfigDelegate & {
        asset: import("@stackbit/types").AssetWithSource;
        userContext: import("@stackbit/types").User;
    }) => boolean | undefined;
    onContentCreate?: (options: import("@stackbit/types").OnContentCreateOptions) => Record<string, any>;
    onDocumentCreate?: (options: import("@stackbit/types").OnDocumentCreateOptions) => ReturnType<import("@stackbit/types").ContentSourceInterface["createDocument"]>;
    onDocumentUpdate?: (options: import("@stackbit/types").OnDocumentUpdateOptions) => ReturnType<import("@stackbit/types").ContentSourceInterface["updateDocument"]>;
    onDocumentDelete?: (options: import("@stackbit/types").OnDocumentDeleteOptions) => ReturnType<import("@stackbit/types").ContentSourceInterface["deleteDocument"]>;
    onDocumentArchive?: (options: import("@stackbit/types").OnDocumentArchiveOptions) => import("@stackbit/types").ReturnTypeOfCSIMethod<"archiveDocument">;
    onDocumentUnarchive?: (options: import("@stackbit/types").OnDocumentUnarchiveOptions) => import("@stackbit/types").ReturnTypeOfCSIMethod<"unarchiveDocument">;
    onDocumentsPublish?: (options: import("@stackbit/types").OnDocumentsPublishOptions) => ReturnType<import("@stackbit/types").ContentSourceInterface["publishDocuments"]>;
    onDocumentsUnpublish?: (options: import("@stackbit/types").OnDocumentsUnpublishOptions) => import("@stackbit/types").ReturnTypeOfCSIMethod<"unpublishDocuments">;
    stackbitVersion: string;
};
export declare function configureNetlifyCreate(config: CreateConfig): {
    actions?: (import("@stackbit/types").CustomActionGlobal | import("@stackbit/types").CustomActionBulk)[];
    ssgName?: typeof import("@stackbit/types").SSG_NAMES[number];
    ssgVersion?: string;
    nodeVersion?: string;
    useESM?: boolean;
    postGitCloneCommand?: string;
    preInstallCommand?: string;
    postInstallCommand?: string;
    installCommand?: string;
    import?: import("@stackbit/types").Import;
    buildCommand?: string;
    publishDir?: string;
    cacheDir?: string;
    styleObjectModelName?: string | null;
    presetSource?: import("@stackbit/types").PresetSource;
    sidebarButtons?: import("@stackbit/types").SidebarButton[];
    siteMap?: import("@stackbit/types").SiteMapFunction;
    sitemap?: import("@stackbit/types").SiteMapFunction;
    transformSitemap?: (options: import("@stackbit/types").ConfigDelegate & {
        sitemap: import("@stackbit/types").SiteMapEntry[];
        userContext: import("@stackbit/types").User;
    }) => import("@stackbit/types").SiteMapEntry[];
    treeViews?: import("@stackbit/types").TreeViewsFunction;
    transformTreeViews?: (options: import("@stackbit/types").ConfigDelegate & {
        treeViews: import("@stackbit/types").TreeViewNode[];
        userContext: import("@stackbit/types").User;
    }) => import("@stackbit/types").TreeViewNode[];
    presetReferenceBehavior?: "copyReference" | "duplicateContents";
    nonDuplicatableModels?: string[];
    duplicatableModels?: string[];
    customContentReload?: boolean;
    experimental?: import("@stackbit/types").Experimental;
    contentSources?: import("@stackbit/types").ContentSourceInterface<any, any, any, any, any>[];
    connectors?: {
        integration: any;
        config: any;
    }[];
    assetSources?: import("@stackbit/types").AssetSource[];
    viewports?: import("@stackbit/types").Viewport[];
    mapModels?: (options: {
        models: import("@stackbit/types").ModelWithSource[];
    }) => import("@stackbit/types").ModelWithSource[];
    modelExtensions?: import("@stackbit/types").ModelExtension[];
    permissionsForModel?: (options: import("@stackbit/types").ConfigDelegate & {
        model: import("@stackbit/types").ModelWithSource;
        userContext: import("@stackbit/types").User;
    }) => import("@stackbit/types").ModelPermissions | undefined;
    mapDocuments?: (options: {
        documents: import("@stackbit/types").DocumentWithSource[];
        models: import("@stackbit/types").ModelWithSource[];
    }) => import("@stackbit/types").DocumentWithSource[];
    permissionsForDocument?: (options: import("@stackbit/types").ConfigDelegate & {
        document: import("@stackbit/types").DocumentWithSource;
        userContext: import("@stackbit/types").User;
    }) => import("@stackbit/types").DocumentPermissions | undefined;
    filterAsset?: (options: import("@stackbit/types").ConfigDelegate & {
        asset: import("@stackbit/types").AssetWithSource;
        userContext: import("@stackbit/types").User;
    }) => boolean | undefined;
    onContentCreate?: (options: import("@stackbit/types").OnContentCreateOptions) => Record<string, any>;
    onDocumentCreate?: (options: import("@stackbit/types").OnDocumentCreateOptions) => ReturnType<import("@stackbit/types").ContentSourceInterface["createDocument"]>;
    onDocumentUpdate?: (options: import("@stackbit/types").OnDocumentUpdateOptions) => ReturnType<import("@stackbit/types").ContentSourceInterface["updateDocument"]>;
    onDocumentDelete?: (options: import("@stackbit/types").OnDocumentDeleteOptions) => ReturnType<import("@stackbit/types").ContentSourceInterface["deleteDocument"]>;
    onDocumentArchive?: (options: import("@stackbit/types").OnDocumentArchiveOptions) => import("@stackbit/types").ReturnTypeOfCSIMethod<"archiveDocument">;
    onDocumentUnarchive?: (options: import("@stackbit/types").OnDocumentUnarchiveOptions) => import("@stackbit/types").ReturnTypeOfCSIMethod<"unarchiveDocument">;
    onDocumentsPublish?: (options: import("@stackbit/types").OnDocumentsPublishOptions) => ReturnType<import("@stackbit/types").ContentSourceInterface["publishDocuments"]>;
    onDocumentsUnpublish?: (options: import("@stackbit/types").OnDocumentsUnpublishOptions) => import("@stackbit/types").ReturnTypeOfCSIMethod<"unpublishDocuments">;
    stackbitVersion: string;
};
//# sourceMappingURL=create-config.d.ts.map