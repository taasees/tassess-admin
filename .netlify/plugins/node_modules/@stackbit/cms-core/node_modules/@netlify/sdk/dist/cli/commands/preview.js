import { execSync, spawn } from "child_process";
import { resolve } from "path";
import open from "open";
import chalk from "chalk";
import fsExtraPkg from "fs-extra";
import cryptoJs from "crypto-js";
import { createDevelopmentContentEngine } from "../index.js";
import { getIntegrationBuildInfo, getIntegrationModule } from "../util.js";
import { build } from "./build.js";
import { connectorDevMode } from "./dev.js";
const { ensureDirSync, rmSync } = fsExtraPkg;
export const preview = async (opts) => {
    // when preview() is called via cli, the ui runs by default
    // but if preview() is called via dev mode, the ui may be turned off.
    // so undefined means default which is true.. unless there's a specific connector flag
    if (opts.ui === undefined && !opts.connector) {
        opts.ui = true;
    }
    if (opts.ui) {
        await handleUI({
            opts,
            cwd: opts.cwd,
        });
    }
    if (opts.connector) {
        return {
            startEngine: await handleConnector({ cwd: opts.cwd, opts }),
        };
    }
    return {
        startEngine: undefined,
    };
};
const handleConnector = async ({ cwd, opts, }) => {
    const { builtPath } = await getIntegrationBuildInfo({ cwd });
    const integration = await getIntegrationModule(builtPath);
    if (integration) {
        return async () => {
            const { engine } = await createDevelopmentContentEngine({
                integration,
                cwd,
            });
            // do an initial sync of the built connector plugin
            const { exitCode } = await engine.sync({
                runServer: true, // with a GraphQL server for local dev
                clearCache: connectorDevMode === `clear cache on save`,
            });
            if (typeof exitCode !== `undefined`) {
                console.log(chalk.red(`Connector plugin exited with code ${exitCode}.`));
                if (opts.dev) {
                    console.log(chalk.green(`Save your code to restart the process.`));
                }
            }
            return engine;
        };
    }
    return false;
};
const handleUI = async ({ opts, cwd }) => {
    rmSync(resolve(cwd, ".ntli"), { recursive: true, force: true });
    const outDir = resolve(cwd, ".ntli");
    ensureDirSync(outDir);
    process.on("SIGINT", () => {
        rmSync(resolve(cwd, ".ntli"), { recursive: true, force: true });
        process.exit();
    });
    console.log(chalk.white("Starting the integration UI server..."));
    let previewUrl = "http://localhost:8899";
    // Is the repo linked to a Netlify site? Check to see if, `.netlify/state.json` exists with a `siteId` property.
    const stateFileExists = fsExtraPkg.existsSync(resolve(cwd, ".netlify/state.json"));
    const stateFile = stateFileExists
        ? JSON.parse(fsExtraPkg.readFileSync(resolve(cwd, ".netlify/state.json"), "utf8"))
        : {};
    let isLinked = !!stateFile.siteId;
    let currentSiteJson;
    if (isLinked) {
        try {
            console.log(chalk.white("Netlify site detected - using live preview..."));
            const currentSite = execSync(`netlify api getSite --data '{ "site_id": "${stateFile.siteId}" }'`, {
                encoding: "utf8",
            });
            currentSiteJson = JSON.parse(currentSite);
            previewUrl = `https://integration-preview--${currentSiteJson.name}.netlify.live`;
        }
        catch {
            previewUrl = "http://localhost:8899";
            isLinked = false;
            console.log(chalk.yellow("Unable to get site info from Netlify API. Using local preview..."));
        }
    }
    const buildResult = await build({
        cwd,
        buildtime: true,
        connector: true,
        dir: outDir,
        previewUrl,
        site: true,
        siteType: opts.siteType,
        watch: true,
    });
    if (buildResult) {
        const { slug } = buildResult;
        const devProcess = spawn("netlify", isLinked
            ? ["dev", "--live", "integration-preview"]
            : ["dev", "--port", "8899"]);
        devProcess.on("error", (err) => {
            console.log(chalk.red(err.message));
            if (err.message.includes("ENOENT")) {
                console.info(chalk.yellow("Netlify CLI not found. Please install it with `npm i -g netlify-cli`"));
            }
            process.exit(1);
        });
        devProcess.stderr.on("data", (data) => {
            console.log(chalk.red(data.toString()));
        });
        devProcess.stdout.on("data", async (data) => {
            const output = data.toString().trim();
            const { dev } = opts;
            if (/â—ˆ Server now ready on/.test(output)) {
                console.log(chalk.green(`Integration UI server started on: ${previewUrl}`));
                const url = new URL(dev
                    ? `http://localhost:8888/ui/preview/${slug}`
                    : `https://app.netlify.com/ui/preview/${slug}`);
                if (isLinked) {
                    const previewToken = cryptoJs.AES.encrypt(previewUrl, currentSiteJson.user_id).toString();
                    const base64Token = Buffer.from(previewToken).toString("base64");
                    url.searchParams.set("token", base64Token);
                }
                else {
                    url.searchParams.set("server", "http://localhost:8899");
                }
                console.log(chalk.green(`Opening ${url}`));
                await open(url.toString());
            }
            else {
                console.log(chalk.white(output));
            }
        });
    }
};
//# sourceMappingURL=preview.js.map