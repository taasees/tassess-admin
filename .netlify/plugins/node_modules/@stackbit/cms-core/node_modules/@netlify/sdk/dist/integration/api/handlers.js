const isWretchError = (e) => {
    return "status" in e && typeof e.status === "number";
};
export const defaultOnEnableHandler = async (event, context) => {
    if (event.body === null) {
        return {
            statusCode: 400,
            body: JSON.stringify({ message: "Missing body" }),
        };
    }
    const { siteId, teamId, forceEnableTeam } = JSON.parse(event.body);
    if (!siteId && !teamId) {
        return {
            statusCode: 400,
            body: JSON.stringify({
                message: "Missing required data. One of `siteId` or `teamId` must be provided.",
            }),
        };
    }
    try {
        if (siteId) {
            const { token } = await context.client.enableSiteIntegration(siteId, {});
            context.client.netlifyToken = token;
            try {
                if (context.hasBuildEventHandler) {
                    await context.client.enableBuildEventHandlers(siteId);
                }
            }
            catch (e) {
                console.error("Failed to enable build event handlers:", e);
            }
        }
        if (teamId && (!siteId || forceEnableTeam)) {
            const { token } = await context.client.enableTeamIntegration(teamId, {});
            // If siteId is passed, we're already setting the token
            if (!siteId) {
                context.client.netlifyToken = token;
            }
        }
        try {
            if (teamId && context.hasConnector) {
                await context.client.enableConnectors(teamId);
            }
        }
        catch (e) {
            console.error("Failed to enable connectors:", e);
        }
    }
    catch (e) {
        if (isWretchError(e)) {
            const apiError = e.json?.error;
            switch (e.status) {
                // We should log, but ignore these errors
                case 409:
                    return {
                        statusCode: 200,
                        body: JSON.stringify({ message: "Integration already enabled" }),
                    };
                case 401:
                    if (apiError === "invalid_integration_slug") {
                        console.warn("Invalid integration slug, please check the integration slug in the configuration file.");
                    }
                    console.error(`Failed to enable integration: ${apiError}`);
                    return {
                        statusCode: 401,
                        body: JSON.stringify({ message: "Unauthorized" }),
                    };
                default:
                    console.error("Failed to enable integration:", e, apiError);
                    return {
                        statusCode: 500,
                        body: JSON.stringify({ message: "Failed to enable integration" }),
                    };
            }
        }
        console.error("Failed to enable integration:", e);
        return {
            statusCode: 500,
            body: JSON.stringify({ message: "Failed to enable integration" }),
        };
    }
    return {
        statusCode: 200,
        body: JSON.stringify({ message: "Integration enabled" }),
    };
};
export const defaultOnDisableHandler = async (event, context) => {
    const { siteId, teamId, forceDisableTeam } = event.queryStringParameters || {};
    if (!siteId && !teamId) {
        return {
            statusCode: 400,
            body: JSON.stringify({ message: "Missing siteId or teamId" }),
        };
    }
    try {
        if (siteId) {
            await context.client.disableSiteIntegration(siteId);
        }
        if (teamId && (!siteId || forceDisableTeam === "true")) {
            await context.client.disableTeamIntegration(teamId);
        }
    }
    catch (e) {
        console.error("Failed to disable integration:", e);
        return {
            statusCode: 500,
            body: JSON.stringify({ message: "Failed to disable integration" }),
        };
    }
    return {
        statusCode: 200,
        body: "Integration disabled",
    };
};
export const defaultOnDisconnectHandler = async () => {
    return {
        statusCode: 200,
        body: "No onDisconnect handler defined - no-op",
    };
};
//# sourceMappingURL=handlers.js.map