import { IntegrationConfiguration } from "../util.js";
export type BuildOpts = {
    /** Build the buildtime component of the integration */
    buildtime: boolean;
    /** Build the serverless component of the integration */
    site: boolean;
    siteType: "integration-ui" | "extension-ui";
    /** Build the Netlify Connect plugin of the integration */
    connector: boolean;
    /** Build integration and then watch for changes */
    watch: boolean;
    /** The directory to build to */
    dir?: string;
    /** Preview URL used test the integration UI */
    previewUrl?: string;
    /**
     * The user's current working directory. All commands are executed and any paths are calculated
     * relative to this directory.
     */
    cwd: string;
};
export declare const build: (opts: BuildOpts) => Promise<false | {
    config: {
        slug: string;
        name?: string | undefined;
        description?: string | undefined;
        scopes?: {
            all?: boolean | undefined;
            site?: ("read" | "write")[] | undefined;
            env?: ("delete" | "read" | "write")[] | undefined;
            user?: ("read" | "write")[] | undefined;
        } | undefined;
        integrationLevel?: "site" | "team" | "team-and-site" | undefined;
        use_cjs_shims?: boolean | undefined;
        connector?: {
            "local-frontend"?: {
                port: number;
                command: string;
                directory: string;
            } | undefined;
        } | undefined;
    };
    cwd: string;
    integration: import("../../index.js").NetlifyIntegration<import("zod").ZodUnknown, import("zod").ZodUnknown, import("zod").ZodUnknown, import("zod").ZodUnknown>;
    onRebuild: (listener: () => void | Promise<void>) => void;
    packageName: any;
    slug: string;
}>;
export declare function getDefaultEsbuildConfig(config: IntegrationConfiguration): {
    inject: string[];
} | {
    inject?: undefined;
};
//# sourceMappingURL=build.d.ts.map