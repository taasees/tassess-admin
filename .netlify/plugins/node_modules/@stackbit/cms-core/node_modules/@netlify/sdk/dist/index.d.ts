import type { NetlifyPluginOptions } from "@netlify/build";
import { NetlifyIntegrationClient } from "@netlify/sdk--extension-api-client";
export { NetlifyIntegrationClient, type NetlifyClient, type Site, type Account, type EnvironmentVariableValue, type EnvironmentVariable, type CreateHookRequest, type BuildHookResponse, } from "@netlify/sdk--extension-api-client";
export { NetlifyIntegration } from "./integration/index.js";
export { NetlifyIntegrationUI } from "./integration/ui/index.js";
export * from "@netlify/integrations";
export { z } from "zod";
export type BuildHookType = "onPreBuild" | "onBuild" | "onPostBuild" | "onSuccess" | "onError" | "onEnd" | "onPreDev" | "onDev";
export declare const BuildHook: Record<string, BuildHookType>;
export type BuildHookFunction = (options: NetlifyPluginOptions) => Promise<void>;
export type BuildHookWithContext<Context extends Record<string, any> = Record<string, never>, Config extends Record<string, any> = Record<string, never>> = (options: {
    buildContext?: Context;
    buildConfig?: Config;
} & Omit<NetlifyPluginOptions, "inputs">) => void | Promise<void>;
export type BuildHookOptions = {
    if: (buildConfig: Record<string, any>) => boolean | undefined;
};
export type NetlifySdkContext<SiteConfig = any, TeamConfig = any> = {
    client: NetlifyIntegrationClient<SiteConfig, TeamConfig>;
    siteId?: string;
    teamId?: string;
    providerOAuthToken?: string;
    hasConnector: boolean;
    hasBuildEventHandler: boolean;
};
export { UIElementButtonOptions, UIElementCardOptions, UIElementFormOptions, UIElementSectionOptions, UIElementTextOptions, UIElementInputTextOptions, UIElementInputSelectOptions, UIElementInputPasswordOptions, UIElementUnorderedListOptions, UIElementLinkOptions, UIElementDisableIntegrationSectionOptions, UIElementOrderedListOptions, UIElementCodeSnippetOptions, UIElementConnectionOptions, UIElementAlertOptions, } from "./integration/ui/types.js";
export { SurfaceRoute } from "./integration/ui/surface/surfaceRoute.js";
export { CallbackFunc, SurfaceState } from "./integration/ui/surface/types.js";
export type { 
/** @deprecated Replace with `@netlify/sdk/connector#PlatformType` */
PlatformType, 
/** @deprecated Replace with `@netlify/sdk/connector#ConnectorContext` */
ConnectorContext as ConnectorInit, 
/** @deprecated Replace with `@netlify/sdk/connector#ConnectorAPIUtils` */
ConnectorAPIUtils, 
/** @deprecated Replace with `@netlify/sdk/connector#APIName` */
APIName, 
/** @deprecated Replace with `@netlify/sdk/connector#APIPromiseName` */
APIPromiseName, } from "./integration/connect/sdk.js";
export type { 
/** @deprecated Replace with `@netlify/sdk/connector#ValidationError` */
ValidationError, 
/** @deprecated Replace with `@netlify/sdk/connector#Locale` */
Locale, } from "./integration/connect/types/csi.js";
export type { Visitor, FieldVisitor, DefineNodeArgs, DefineUnionArgs, DefineObjectArgs, DefineDocumentArgs, DefineEnumArgs, ModelField, ModelFields, ModelFieldsObject, ModelFieldsArray, ModelDefinition, VisualEditorFieldSettings, VisualEditorObjectSettings, VisualEditorDocumentSettings, } from "./integration/connect/model/definition.js";
export { builtInTypes } from "./integration/connect/model/definition.js";
export type { Define, Models, ModelsIteratorObject, Modeler, ModelerArgs, ModelBuilder, } from "./integration/connect/model/builder.js";
export type { UpdateOperation, UpdateOperationField } from "@stackbit/types";
export { CreateConfig, configureNetlifyCreate, } from "./integration/connect/utils/create-config.js";
export { type Fields, type Field } from "./integration/connect/model/walker.js";
//# sourceMappingURL=index.d.ts.map