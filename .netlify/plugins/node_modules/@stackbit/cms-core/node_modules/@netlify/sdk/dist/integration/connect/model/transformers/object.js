import { omitByUndefined } from "../../utils/omit-by-undefined.js";
import { ModelError } from "../error.js";
import { ModelTransformer, } from "../transformer.js";
export class ObjectTransformer extends ModelTransformer {
    /*
     * Connect schema definitions
     */
    toConnectDefinition() {
        const { definition } = this;
        let sdl = ``;
        if (this.definition.description) {
            sdl += `"""${definition.description}"""\n`;
        }
        sdl += `type ${definition.prefixedTypeName()} @dontInfer${this.definition.getAuthorizationDirectiveSDL()} {\n`;
        sdl += this.toConnectFieldsDefinitionSDL();
        sdl += `}`;
        return sdl;
    }
    toConnectSingleFieldDefinition(field) {
        return this.modelFieldToGraphQLFieldSDL(field, {
            proxyFrom: `fields`,
        });
    }
    toConnectListFieldDefinition(field) {
        return this.modelFieldToGraphQLFieldSDL(field, {
            proxyFrom: `items.fields`,
        });
    }
    /*
     * Create schema definitions
     */
    toCreateDefinition() {
        const def = this.definition;
        if (
        // Inline types do not have global Create definitions, they're added as inline field definitions
        def.isInlineType ||
            // All current internal types already exist in Create
            def.isInternalType) {
            return null;
        }
        return omitByUndefined({
            name: def.getOriginalName(),
            label: def.label,
            description: def.description,
            fieldGroups: def.fieldGroups,
            singleInstance: def.isEditorSingleInstance,
            fields: def.sdkFieldsToStackbitFields(),
            type: `object`,
            preview: def.editorObjectPreview,
        });
    }
    toCreateListFieldDefinition(field) {
        return {
            type: "list",
            ...this.modelFieldToSharedCreateProperties(field),
            items: this.toFieldDefinitionProperties(field),
        };
    }
    toCreateSingleFieldDefinition(field) {
        return {
            ...this.modelFieldToSharedCreateProperties(field),
            ...this.toFieldDefinitionProperties(field),
        };
    }
    toFieldDefinitionProperties(field) {
        if (this.definition.getTypeName() === `Thumbnail` &&
            field.editor?.thumbnailOptions) {
            return {
                // Thumbnail builtin type is treated as an enum in Create
                // It must be an object type in Connect as GraphQl enums only support KEY: value for enums, while Create enums have extra fields and are more object-like than enum-like
                type: "enum",
                controlType: `thumbnails`,
                options: field.editor?.thumbnailOptions,
            };
        }
        if (this.definition.isInlineType) {
            return omitByUndefined({
                type: "object",
                fieldGroups: this.definition.fieldGroups,
                preview: field.editor?.preview,
                // for inline types, redefine every field type in place
                fields: this.definition.sdkFieldsToStackbitFields(),
            });
        }
        return omitByUndefined({
            type: "model",
            fieldGroups: this.definition.fieldGroups,
            preview: field.editor?.preview,
            // otherwise reference the already existing object model by name
            models: [this.definition.getOriginalName()],
        });
    }
    /*
     * Connect/Create input data parsing (runs before data normalizers for each platform below)
     */
    parseVisitedInputList(input, field, treeContext) {
        const isNullable = field.list !== `required`;
        if (isNullable && !input) {
            return null;
        }
        if (!Array.isArray(input)) {
            return this.parseVisitedInputSingle(input, field, treeContext);
        }
        return input.map((item) => this.parseVisitedInputSingle(item, { ...field, list: false }, treeContext));
    }
    parseVisitedInputSingle(visited, _field, treeContext) {
        if (typeof visited !== `object`) {
            throw new ModelError(`Found ${typeof visited} value for ${treeContext.path.join(".")} but an object value of type "${this.definition.getTypeName()}" was expected.\n  Value: ${visited}`);
        }
        return this.removeObjectKeysThatHaveNoFieldWithThatName(visited);
    }
    /*
     * Connect data normalizers
     */
    toConnectListFieldValue(input, field, treeContext) {
        return input?.map?.((node, index) => {
            return field.type.ModelWalker.coerceModelValue(node, { ...field, list: false }, [...treeContext.path, `[${index}]`], treeContext.visitorState);
        });
    }
    toConnectSingleFieldValue(input, _field, treeContext) {
        return this.toInsertedObject(input, treeContext);
    }
    /*
     * Create data normalizers
     */
    toCreateListFieldValue(modelFieldValue, field, treeContext) {
        const { path, visitorState } = treeContext;
        const listItems = modelFieldValue?.map?.((node, index) => {
            const fields = field.type.ModelWalker.coerceModelValue(node, { ...field, list: false }, [...path, field.name, `[${index}]`], visitorState);
            return {
                type: `model`,
                modelName: field.type.getOriginalName(),
                fields: fields?.fields || fields,
            };
        });
        return {
            type: `list`,
            items: listItems,
        };
    }
    toCreateSingleFieldValue(input, _field, treeContext) {
        return {
            type: `model`,
            modelName: this.definition.getOriginalName(),
            fields: this.toInsertedObject(input, treeContext),
        };
    }
    toCreateSingleFieldValueLocalized(input, _coersionField, treeContext) {
        return {
            type: "model",
            localized: true,
            locales: this.convertObjectLocaleValues(input, (objectValue, locale) => {
                return {
                    locale,
                    modelName: this.definition.getOriginalName(),
                    fields: this.toInsertedObject(objectValue, treeContext),
                };
            }, treeContext),
        };
    }
    /*
     * Shared data normalization utils
     */
    toInsertedObject(modelValue, treeContext) {
        const valueIsScalar = typeof modelValue !== `object`;
        const coercedValue = valueIsScalar ? modelValue : { ...modelValue };
        const { definition } = this;
        const { path, visitorState } = treeContext;
        if (
        // coercing fields on a null model value will throw errors if one of the fields is required,
        // even if the parent model is not a required field - only check for fields if the modelValue is not null
        modelValue !== null &&
            definition.hasFields) {
            definition.ModelWalker.coerceFields(coercedValue, path, visitorState);
        }
        coercedValue.__typename = this.definition.prefixedTypeName();
        return coercedValue;
    }
}
//# sourceMappingURL=object.js.map