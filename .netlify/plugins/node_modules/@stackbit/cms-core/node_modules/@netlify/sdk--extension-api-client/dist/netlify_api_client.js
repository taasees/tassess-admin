import { default as w } from "wretch";
import { NETLIFY_API_URL } from "./constants.js";
export const DeployContext = {
    All: "all",
    BranchDeploy: "branch-deploy",
    DeployPreview: "deploy-preview",
    Production: "production",
};
export const EnvironmentVariableScope = {
    All: "all",
    Functions: "functions",
    Build: "build",
};
export class NetlifyClient {
    apiKey;
    wretch;
    constructor(apiKey, { baseUrl = "" } = {}) {
        this.apiKey = apiKey;
        this.wretch = w()
            .url(baseUrl !== "" ? baseUrl : NETLIFY_API_URL)
            .auth(`Bearer ${apiKey}`);
    }
    /**
     * Redeploys a site by triggering a new build. A 'branch' can be specified to build a specific branch. If none are specified, the default branch will be built.
     */
    async redeploySite({ siteId, branch, }) {
        return this.wretch
            .url(`/sites/${siteId}/builds`)
            .json({ branch })
            .post()
            .json();
    }
    /**
     * Deletes all environment variables on the site or account specified in the `variables` array.
     */
    async deleteEnvironmentVariables({ accountId, siteId = "", variables, }) {
        if (Object.keys(variables).length === 0) {
            return;
        }
        const variablePromises = variables.map((key) => this.deleteEnvironmentVariable({ accountId, siteId, key }));
        await Promise.all(variablePromises);
    }
    /**
     * Creates or updates all environment variables in the `variables` object for a site or account.
     */
    async createOrUpdateVariables({ accountId, siteId = "", variables, }) {
        if (Object.keys(variables).length === 0) {
            return;
        }
        const variablePromises = Object.entries(variables).map(([key, value]) => this.createOrUpdateVariable({ accountId, siteId, key, value }));
        await Promise.all(variablePromises);
    }
    /**
     * Creates or updates a single environment variable for a site or account
     */
    async createOrUpdateVariable({ accountId, siteId = "", key, value, }) {
        console.log(`Upserting variable ${key} for site ${siteId}`);
        let envVarValues = [];
        if (typeof value === "string") {
            envVarValues = [{ value, context: "all" }];
        }
        else if (typeof value === "object") {
            envVarValues = [
                {
                    value: value.dev,
                    context: "dev",
                },
                {
                    value: value.deployPreview,
                    context: "deploy-preview",
                },
                {
                    value: value.production,
                    context: "production",
                },
                {
                    value: value.branchDeploys,
                    context: "branch-deploy",
                },
                ...Object.entries(value.branch ?? {}).map(([branch, value]) => ({
                    value,
                    context: "branch",
                    context_parameter: branch,
                })),
            ];
        }
        const environmentVariables = await this.getEnvironmentVariables({
            accountId,
            siteId,
        });
        const existingVariable = environmentVariables.find((env) => env.key === key);
        if (existingVariable) {
            await this.updateEnvironmentVariable({
                accountId,
                siteId,
                key,
                values: envVarValues,
            });
        }
        else {
            await this.createEnvironmentVariable({
                accountId,
                siteId,
                key,
                values: envVarValues,
            });
        }
    }
    /**
     * Gets all environment variables for a site.
     */
    async getEnvironmentVariables({ accountId, siteId = "", }) {
        return this.wretch
            .url(`/accounts/${accountId}/env?site_id=${siteId}`)
            .get()
            .json();
    }
    /**
     * Creates a new environment variable for a site or account.
     */
    async createEnvironmentVariable({ accountId, siteId = "", key, values, }) {
        return await this.wretch
            .url(`/accounts/${accountId}/env?site_id=${siteId}`)
            .json([{ key, values }])
            .post()
            .json();
    }
    /**
     * Updates an existing environment variable for a site or account.
     */
    async updateEnvironmentVariable({ accountId, siteId = "", key, values, }) {
        return await this.wretch
            .url(`/accounts/${accountId}/env/${key}?site_id=${siteId}`)
            .headers({
            Authorization: `Bearer ${this.apiKey}`,
            "Content-Type": "application/json",
        })
            .json({ key, values })
            .put()
            .json();
    }
    /**
     * Creates or updates an environment variable for a site.
     */
    async patchEnvironmentVariable({ accountId, siteId = "", key, context, value, contextParameter, }) {
        return this.wretch
            .url(`/accounts/${accountId}/env/${key}?site_id=${siteId}`)
            .json({
            context,
            value,
            context_parameter: contextParameter,
        })
            .patch()
            .json();
    }
    /**
     * Deletes an environment variable for a site.
     */
    async deleteEnvironmentVariable({ accountId, siteId = "", key, }) {
        return await this.wretch
            .url(`/accounts/${accountId}/env/${key}?site_id=${siteId}`)
            .delete()
            .res();
    }
    /**
     * Gets a site by ID and returns site information.
     */
    async getSite(siteId) {
        return this.wretch.url(`/sites/${siteId}`).get().json();
    }
    /**
     * Gets all sites for an account.
     */
    async getSites() {
        return this.wretch.url(`/sites`).get().json();
    }
    /**
     * Updates a site with the given changes.
     */
    async updateSite(siteId, changes = {}) {
        return this.wretch
            .url(`/sites/${siteId}`)
            .json(changes)
            .patch()
            .json();
    }
    /**
     * Creates a new build hook for a site.
     */
    async createBuildHook(siteId, buildHook) {
        return this.wretch
            .url(`/sites/${siteId}/build_hooks`)
            .json(buildHook)
            .post()
            .json();
    }
    /**
     * Deletes a build hook for a site.
     */
    async deleteBuildHook(siteId, buildHookId) {
        return this.wretch
            .url(`/sites/${siteId}/build_hooks/${buildHookId}`)
            .delete()
            .res();
    }
    async createHook(CreateHookRequest) {
        return this.wretch
            .url(`/hooks`)
            .json(CreateHookRequest)
            .post()
            .json();
    }
    /**
     * Gets an account by ID and returns account information.
     */
    async getAccount(accountId) {
        return this.wretch.url(`/accounts/${accountId}`).get().json();
    }
}
//# sourceMappingURL=netlify_api_client.js.map