import { type Wretch } from "wretch";
export type RedeploySiteResponse = {
    id: string;
    deploy_id: string;
    sha: string;
    done: boolean;
    error: string;
    created_at: string;
};
export type DeployContextType = "all" | "dev" | "branch-deploy" | "deploy-preview" | "branch" | "production";
export declare const DeployContext: Record<string, DeployContextType>;
export type EnvironmentVariableScopeType = "functions" | "build" | "all";
export declare const EnvironmentVariableScope: Record<string, EnvironmentVariableScopeType>;
export interface Site {
    id: string;
    name: string;
    use_envelope: string;
    build_settings: {
        env: Record<string, string | undefined>;
    };
    plugins: {
        package: string;
        pinned_version?: string;
    }[];
}
export interface Account {
    id: string;
    name: string;
    slug: string;
}
export type EnvVarRequest = string | {
    dev: string;
    deployPreview: string;
    production: string;
    branchDeploys: string;
    branch?: Record<string, string>;
};
export interface EnvironmentVariableValue {
    value: string;
    context_parameter?: string;
    context: DeployContextType;
}
export interface EnvironmentVariable {
    key: string;
    scopes: EnvironmentVariableScopeType;
    values: EnvironmentVariableValue[];
}
interface BuildHook {
    title: string;
    branch: string;
    draft?: boolean;
}
export interface BuildHookResponse {
    id: string;
    title?: string;
    branch: string;
    url: string;
    site_id: string;
    created_at: string;
    draft?: boolean;
}
export interface CreateHookRequest {
    type: string;
    event: "deploy_building" | "deploy_failed" | "deploy_created";
    site_id: string;
    data: {
        url: string;
    };
}
export interface CreateHookResponse {
    id: string;
}
interface NetlifyClientOptions {
    fetch?: typeof fetch;
    baseUrl?: string | undefined;
}
export declare class NetlifyClient {
    apiKey: string;
    wretch: Wretch;
    constructor(apiKey: string, { baseUrl }?: NetlifyClientOptions);
    /**
     * Redeploys a site by triggering a new build. A 'branch' can be specified to build a specific branch. If none are specified, the default branch will be built.
     */
    redeploySite({ siteId, branch, }: {
        siteId: string;
        branch?: string;
    }): Promise<RedeploySiteResponse>;
    /**
     * Deletes all environment variables on the site or account specified in the `variables` array.
     */
    deleteEnvironmentVariables({ accountId, siteId, variables, }: {
        accountId: string;
        siteId?: string;
        variables: string[];
    }): Promise<void>;
    /**
     * Creates or updates all environment variables in the `variables` object for a site or account.
     */
    createOrUpdateVariables({ accountId, siteId, variables, }: {
        accountId: string;
        siteId?: string;
        variables: Record<string, EnvVarRequest>;
    }): Promise<void>;
    /**
     * Creates or updates a single environment variable for a site or account
     */
    createOrUpdateVariable({ accountId, siteId, key, value, }: {
        accountId: string;
        siteId?: string;
        key: string;
        value: EnvVarRequest;
    }): Promise<void>;
    /**
     * Gets all environment variables for a site.
     */
    getEnvironmentVariables({ accountId, siteId, }: {
        accountId: string;
        siteId?: string;
    }): Promise<EnvironmentVariable[]>;
    /**
     * Creates a new environment variable for a site or account.
     */
    createEnvironmentVariable({ accountId, siteId, key, values, }: {
        accountId: string;
        siteId: string;
        key: string;
        values: EnvironmentVariableValue[];
    }): Promise<EnvironmentVariable>;
    /**
     * Updates an existing environment variable for a site or account.
     */
    updateEnvironmentVariable({ accountId, siteId, key, values, }: {
        accountId: string;
        siteId?: string;
        key: string;
        values: EnvironmentVariableValue[];
    }): Promise<EnvironmentVariable>;
    /**
     * Creates or updates an environment variable for a site.
     */
    patchEnvironmentVariable({ accountId, siteId, key, context, value, contextParameter, }: {
        accountId: string;
        siteId?: string;
        key: string;
        context: string;
        value: string;
        contextParameter?: string;
    }): Promise<EnvironmentVariable>;
    /**
     * Deletes an environment variable for a site.
     */
    deleteEnvironmentVariable({ accountId, siteId, key, }: {
        accountId: string;
        siteId?: string;
        key: string;
    }): Promise<import("wretch").WretchResponse>;
    /**
     * Gets a site by ID and returns site information.
     */
    getSite(siteId: string): Promise<Site>;
    /**
     * Gets all sites for an account.
     */
    getSites(): Promise<Site[]>;
    /**
     * Updates a site with the given changes.
     */
    updateSite(siteId: string, changes?: Partial<Site>): Promise<Site>;
    /**
     * Creates a new build hook for a site.
     */
    createBuildHook(siteId: string, buildHook: BuildHook): Promise<BuildHookResponse>;
    /**
     * Deletes a build hook for a site.
     */
    deleteBuildHook(siteId: string, buildHookId: string): Promise<BuildHookResponse>;
    createHook(CreateHookRequest: CreateHookRequest): Promise<CreateHookResponse>;
    /**
     * Gets an account by ID and returns account information.
     */
    getAccount(accountId: string): Promise<Account>;
}
export {};
//# sourceMappingURL=netlify_api_client.d.ts.map