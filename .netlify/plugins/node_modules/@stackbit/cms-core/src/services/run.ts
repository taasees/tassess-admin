import childProcess, { ChildProcessWithoutNullStreams } from 'child_process';
import { CommandRunner, Logger, RunResult } from '@stackbit/types';
import { logProcess } from '@stackbit/utils';

export function getCommandRunner(commandRunnerOptions: { env: NodeJS.ProcessEnv; uid?: number }): CommandRunner {
    return (command: string, args?: string[], options?: { cwd?: string; shell?: boolean; env?: NodeJS.ProcessEnv; logger?: Logger }): Promise<RunResult> => {
        if (options?.logger) {
            options.logger.info(`Running command '${command}${args ? ' ' : ''}${args?.join(' ')}'${options?.cwd ? ` in '${options.cwd}'` : ''} ...`);
        }
        const process = childProcess.spawn(command, args, {
            cwd: options?.cwd,
            shell: options?.shell,
            env: {
                ...commandRunnerOptions.env,
                ...options?.env
            },
            ...(commandRunnerOptions.uid ? { uid: commandRunnerOptions.uid } : {})
        });
        if (options?.logger) {
            logProcess(process, 'run', options.logger);
        }
        return getProcessPromise(process);
    };
}

function getProcessPromise(p: ChildProcessWithoutNullStreams): Promise<{
    stdout: string;
    stderr: string;
    exitCode?: number;
    err?: Error;
}> {
    return new Promise((resolve, reject) => {
        let stdout = '';
        let stderr = '';
        p.stdout.on('data', (out) => (stdout += out));
        p.stderr.on('data', (out) => (stderr += out));
        p.on('close', (exitCode) => {
            if (exitCode !== 0) {
                reject({
                    err: new Error(`process exited with code: ${exitCode}, stderr: ${stderr}`),
                    stdout,
                    stderr,
                    exitCode
                });
            } else {
                resolve({
                    stdout,
                    stderr
                });
            }
        });
        p.on('error', (err) => {
            reject({
                err,
                stdout,
                stderr
            });
        });
    });
}
