import { NetlifyIntegration } from '@netlify/sdk';
import { Asset, ContentChanges, ContentEngineConfig, ContentSourceInterface, Document, Model, UpdateOperation, UpdateOperationField, UserSSOProfile } from '@stackbit/types';
export default class ConnectorWrapper implements ContentSourceInterface {
    private integration;
    private options;
    private connector;
    constructor({ integration, config }: {
        integration: NetlifyIntegration;
        config: any;
    });
    getContentSourceType(): string;
    getProjectId(): string;
    getVersion(): Promise<{
        interfaceVersion: string;
        contentSourceVersion: string;
    }>;
    getProjectEnvironment(): string;
    getProjectManageUrl(): any;
    hasAccess(): Promise<{
        hasPermissions: boolean;
        hasConnection: boolean;
    }>;
    validateDocuments(): Promise<{
        errors: never[];
    }>;
    reset(): Promise<void>;
    destroy(): Promise<void>;
    _getAPIPromises(name: string): Promise<any>;
    _getImplementation(name: string): Promise<any>;
    init({ cache }: {
        cache: any;
    }): Promise<void>;
    updateDocument(options: {
        document: Document<unknown>;
        operations: UpdateOperation[];
        userContext?: {
            name: string;
            email: string;
            sso?: UserSSOProfile | undefined;
        } | undefined;
    }): Promise<void>;
    createDocument(options: {
        updateOperationFields: Record<string, UpdateOperationField>;
        model: Model<unknown>;
        locale?: string | undefined;
        defaultLocaleDocumentId?: string | undefined;
        userContext?: {
            name: string;
            email: string;
            sso?: UserSSOProfile | undefined;
        } | undefined;
    }): Promise<{
        documentId: string;
    }>;
    deleteDocument(options: {
        document: Document<unknown>;
        userContext?: {
            name: string;
            email: string;
            sso?: UserSSOProfile | undefined;
        } | undefined;
    }): Promise<void>;
    publishDocuments(options: {
        documents: Document<unknown>[];
        assets: Asset<unknown>[];
        userContext?: {
            name: string;
            email: string;
            sso?: UserSSOProfile | undefined;
        } | undefined;
    }): Promise<void>;
    getSchema(): Promise<{
        models: any;
        locales: any;
        context: {};
    }>;
    getModels(): Promise<any>;
    getLocales(): Promise<any>;
    connectSyncFinished(): Promise<any>;
    getDocuments(): Promise<Document<unknown>[]>;
    getAssets(): Promise<Asset<unknown>[]>;
    uploadAsset(options: {
        url?: string | undefined;
        base64?: string | undefined;
        fileName: string;
        mimeType: string;
        locale?: string | undefined;
        userContext?: {
            name: string;
            email: string;
            sso?: UserSSOProfile | undefined;
        } | undefined;
    }): Promise<Asset<unknown>>;
    updateAsset(options: {
        asset: Asset<unknown>;
        operations: UpdateOperation[];
        userContext?: {
            name: string;
            email: string;
            sso?: UserSSOProfile | undefined;
        } | undefined;
    }): Promise<void>;
    getContentEngineConfig(): ContentEngineConfig;
    onFilesChange({ updatedFiles }: {
        updatedFiles: string[];
    }): Promise<{
        invalidateSchema?: boolean | undefined;
        contentChanges?: ContentChanges<unknown, unknown> | undefined;
    }>;
}
//# sourceMappingURL=connector-wrapper.d.mts.map