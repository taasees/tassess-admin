import { Config } from '@stackbit/sdk';
import * as StackbitTypes from '@stackbit/types';
import * as ContentStoreTypes from '../types';
import { CustomActionStateChange, APICustomAction, APICustomActionDocumentSpecifier, APIGetCustomActionRequest, APIRunCustomActionRequest, CustomActionRunStateMap, ExtendedCustomActionObjectModel, ExtendedCustomActionField, APICustomActionGlobal, APICustomActionBulk, ExtendedCustomActionObjectField, ExtendedCustomActionDocument } from '../types';
import { CustomActionBulk, CustomActionGlobal, CustomActionPermissions } from '@stackbit/types';
export declare function getGlobalAndBulkAPIActions({ stackbitConfig, customActionRunStateMap, contentSourceDataById, userLogger, pageUrl, user, locale, currentPageDocument }: {
    stackbitConfig: Config | null;
    customActionRunStateMap: CustomActionRunStateMap;
    contentSourceDataById: Record<string, ContentStoreTypes.ContentSourceData>;
    userLogger: StackbitTypes.Logger;
    pageUrl?: string;
    user?: ContentStoreTypes.User;
    locale?: string;
    currentPageDocument?: APICustomActionDocumentSpecifier;
}): Promise<(APICustomActionGlobal | APICustomActionBulk)[]>;
export declare function resolveCustomActionsById({ getActionRequest, customActionRunStateMap, contentSourceDataById, stackbitConfig, userLogger }: {
    getActionRequest: APIGetCustomActionRequest;
    customActionRunStateMap: CustomActionRunStateMap;
    contentSourceDataById: Record<string, ContentStoreTypes.ContentSourceData>;
    stackbitConfig: Config | null;
    userLogger: StackbitTypes.Logger;
}): Promise<APICustomAction[]>;
export declare function resolveCustomActionPermissions({ action, commonPermissionsOptions, contentSourceDataById }: {
    action: CustomActionGlobal | CustomActionBulk | ExtendedCustomActionDocument | ExtendedCustomActionObjectModel | ExtendedCustomActionObjectField | ExtendedCustomActionField;
    commonPermissionsOptions: StackbitTypes.CustomActionPermissionsCommonOptions;
    contentSourceDataById: Record<string, ContentStoreTypes.ContentSourceData>;
}): CustomActionPermissions | undefined;
export declare function runCustomAction({ runActionRequest, customActionRunStateMap, contentSourceDataById, stackbitConfig, userLogger }: {
    runActionRequest: APIRunCustomActionRequest;
    customActionRunStateMap: CustomActionRunStateMap;
    contentSourceDataById: Record<string, ContentStoreTypes.ContentSourceData>;
    stackbitConfig: Config | null;
    userLogger: StackbitTypes.Logger;
}): Promise<CustomActionStateChange>;
//# sourceMappingURL=custom-actions.d.ts.map