"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCommandRunner = void 0;
const child_process_1 = __importDefault(require("child_process"));
const utils_1 = require("@stackbit/utils");
function getCommandRunner(commandRunnerOptions) {
    return (command, args, options) => {
        if (options?.logger) {
            options.logger.info(`Running command '${command}${args ? ' ' : ''}${args?.join(' ')}'${options?.cwd ? ` in '${options.cwd}'` : ''} ...`);
        }
        const process = child_process_1.default.spawn(command, args, {
            cwd: options?.cwd,
            shell: options?.shell,
            env: {
                ...commandRunnerOptions.env,
                ...options?.env
            },
            ...(commandRunnerOptions.uid ? { uid: commandRunnerOptions.uid } : {})
        });
        if (options?.logger) {
            (0, utils_1.logProcess)(process, 'run', options.logger);
        }
        return getProcessPromise(process);
    };
}
exports.getCommandRunner = getCommandRunner;
function getProcessPromise(p) {
    return new Promise((resolve, reject) => {
        let stdout = '';
        let stderr = '';
        p.stdout.on('data', (out) => (stdout += out));
        p.stderr.on('data', (out) => (stderr += out));
        p.on('close', (exitCode) => {
            if (exitCode !== 0) {
                reject({
                    err: new Error(`process exited with code: ${exitCode}, stderr: ${stderr}`),
                    stdout,
                    stderr,
                    exitCode
                });
            }
            else {
                resolve({
                    stdout,
                    stderr
                });
            }
        });
        p.on('error', (err) => {
            reject({
                err,
                stdout,
                stderr
            });
        });
    });
}
//# sourceMappingURL=run.js.map