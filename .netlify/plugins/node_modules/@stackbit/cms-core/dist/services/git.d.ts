import { GitServiceInterface, GitServicePullListener, GitServicePushListener, GitFileCommitDescriptor, GitAuthor, GitCommitLogEntry, Logger } from '@stackbit/types';
import { Worker } from '@stackbit/utils';
import { CommandRunner } from '@stackbit/types';
export declare class GitService implements GitServiceInterface {
    private readonly repoUrl;
    private readonly repoDir;
    private readonly repoBranch;
    private readonly repoPublishBranch;
    private readonly worker;
    private readonly runCommand;
    private readonly logger;
    private readonly userLogger;
    private readonly skipPush?;
    private pullListeners;
    private pushListeners;
    private branchFetched;
    constructor(options: {
        repoUrl: string;
        repoDir: string;
        repoBranch: string;
        repoPublishBranch: string;
        worker: Worker;
        runCommand: CommandRunner;
        skipPush?: boolean;
        logger: Logger;
        userLogger: Logger;
    });
    getRepoUrl(): string;
    getRepoBranch(): string;
    getRepoPublishBranch(): string;
    getRepoDir(): string;
    addPullListener(listener: GitServicePullListener): void;
    removePullListener(listener: GitServicePullListener): void;
    notifyPullListeners(options: {
        branch: string;
        updatedFiles: string[];
    }): Promise<void>;
    addPushListener(listener: GitServicePushListener): void;
    removePushListener(listener: GitServicePushListener): void;
    notifyPushListeners(): Promise<void>;
    private commit;
    private push;
    commitAndPush(author: GitAuthor, files: GitFileCommitDescriptor[]): Promise<void>;
    pull(branch?: string): Promise<void>;
    private publishAll;
    private publishFiles;
    publish(author: GitAuthor, filePaths?: string[]): Promise<void>;
    private parseGitCommitAuthor;
    private diffBranches;
    diff(): Promise<string[]>;
    commitLog(): Promise<GitCommitLogEntry[]>;
}
//# sourceMappingURL=git.d.ts.map