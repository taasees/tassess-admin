export type Simplify<T> = {
    [K in keyof T]: T[K];
};

export type DistributiveOmit<T, K extends keyof any> = T extends any ? Omit<T, K> : never;

export type PartialBy<Type, Key extends keyof Type> = Omit<Type, Key> & Partial<Pick<Type, Key>>;

export type RequiredBy<Type, Key extends keyof Type> = Omit<Type, Key> & Required<Pick<Type, Key>>;
