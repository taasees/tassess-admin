import * as StackbitTypes from './index';

export interface CustomControlWindow {
    stackbit: {
        onUpdate?: (options: OnUpdateOptions) => void;
    };
}

export type UpdateOperationWithoutKey<
    Type extends StackbitTypes.UpdateOperation,
    Key extends keyof Type
> = Type extends StackbitTypes.UpdateOperation ? Omit<Type, Key> : never;
export type UpdateOperationWithoutModelField = UpdateOperationWithoutKey<StackbitTypes.UpdateOperation, 'modelField'>;

export interface OnUpdateOptions {
    /**
     * The `init` flag specifies whether the `onUpdate` function runs for the first time or is called due to an update of the document or its fields.
     */
    init: boolean;
    /**
     * The `currentLocale` specifies the currently selected locale in the Stackbit UI.
     */
    currentLocale?: string;
    /**
     * The `currentPageUrl` specifies the currently viewed page in the Stackbit UI.
     */
    currentPageUrl?: string;
    /**
     * The root {@link Document} of the edited field.
     */
    document: Omit<StackbitTypes.Document, 'context'>;
    /**
     * The {@link Model} of the `document`
     */
    model: StackbitTypes.Model;
    /**
     * The key path from the `document` to the edited field.
     * The fieldPath does not include keys for data containers like object
     * `fields` and list `items`.
     *
     * @example
     * {
     *   document = {
     *     type: 'document',
     *     id: 'xyz',
     *     modelName: 'landing_page',
     *     status: 'published',
     *     ...
     *     fields: {
     *       title: {
     *         type: 'string',
     *         value: 'Welcome',
     *       },
     *       button: {
     *         type: 'object',
     *         fields: {
     *           label: {
     *             type: 'string',
     *             value: 'Sign In'
     *           }
     *         }
     *       }
     *     }
     *   },
     *   fieldPath: ['button', 'label'],
     * }
     */
    fieldPath: StackbitTypes.FieldPath;
    /**
     * The {@link DocumentField} of the edited field. This object can also be
     * found in the `document` at the specified `fieldPath`.
     */
    documentField: StackbitTypes.DocumentField | StackbitTypes.DocumentListFieldItems;
    /**
     * The {@link Model} of the edited field.
     */
    modelField: StackbitTypes.Field;
    /**
     * The `close` method can be used to close a modal dialog for fields with
     * `controlType` set to 'custom-modal-html'.
     */
    close: () => void;
    /**
     * The `navigate` method can be used to open a different document or a nested
     * field within the current document.
     */
    navigate: (
        options:
            | { fieldPath: StackbitTypes.FieldPath }
            | { srcType: string; srcProjectId: string; srcDocumentId: string; fieldPath?: StackbitTypes.FieldPath }
    ) => void;
    /**
     * The `setDesiredControlSize` can be used to define a desired size for the
     * control's iframe.
     */
    setDesiredControlSize: (size: { width?: number; height?: number }) => void;
    /**
     * The `updateDocument` method is used to update the edited field. This
     * method receives an options object with the `operations` attribute
     * containing an array of {@link UpdateOperation} (without the `modelField`).
     *
     * @example
     * options.updateDocument({
     *   operations: [
     *     {
     *       opType: 'set',
     *       fieldPath: options.fieldPath,
     *       field: { type: 'string', value: 'new value' }
     *     },
     *     {
     *       opType: 'insert',
     *       fieldPath: ['tags'],
     *       index: 0,
     *       item: {
     *         type: 'string',
     *         value: 'new tag'
     *       }
     *     }
     *   ]
     * })
     */
    updateDocument: (options: { operations: UpdateOperationWithoutModelField[] }) => Promise<void>;
}
