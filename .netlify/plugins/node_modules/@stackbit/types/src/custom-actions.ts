import type { ConfigDelegate } from './config-delegate';
import type { DocumentWithSource } from './content-source-document';
import type { DocumentField, DocumentObjectField, DocumentModelField } from './content-source-document-fields';
import type { ModelWithSource, ObjectModel } from './models';
import type { FieldPath } from './model-fields';
import type { User } from './content-source';
import type { DocumentHookBaseOptions } from './config';
import type {
    Field,
    FieldBoolean,
    FieldColor,
    FieldDate,
    FieldDatetime,
    FieldEnum,
    FieldHtml,
    FieldMarkdown,
    FieldModel,
    FieldNumber,
    FieldObject,
    FieldReference,
    FieldSlug,
    FieldString,
    FieldText,
    FieldUrl
} from './model-fields';
import { ICONS } from './consts';
import { ContentSourceActions } from './config';

export interface CustomActionGlobal extends CustomActionCommonParams {
    type: 'global';
    state?: CustomActionStateFunction;
    run: CustomActionRunFunction;
    permissions?: CustomActionPermissionsFunction;
}

export interface CustomActionBulk extends CustomActionCommonParams {
    type: 'bulk';
    state?: CustomActionStateFunction;
    run: CustomActionRunFunction<{ documents: DocumentWithSource[] }>;
    permissions?: CustomActionPermissionsFunction;
}

export interface CustomActionDocument extends CustomActionCommonParams {
    type?: 'document';
    state?: CustomActionStateFunction<CustomActionDocumentStateOptions>;
    run: CustomActionRunFunction<CustomActionDocumentRunOptions>;
    permissions?: CustomActionPermissionsFunction<CustomActionDocumentStateOptions>;
}

export interface CustomActionDocumentStateOptions {
    document: DocumentWithSource;
    model: ModelWithSource;
}

export interface CustomActionDocumentRunOptions extends CustomActionDocumentStateOptions {
    contentSourceActions: ContentSourceActions;
}

export interface CustomActionObjectModel extends CustomActionCommonParams {
    type?: 'object';
    state?: CustomActionStateFunction<CustomActionObjectModelStateParams>;
    run: CustomActionRunFunction<CustomActionObjectModelRunParams>;
    permissions?: CustomActionPermissionsFunction<CustomActionObjectModelStateParams>;
}

export interface CustomActionObjectModelStateParams {
    parentDocument: DocumentWithSource;
    parentModel: ModelWithSource;
    documentField: DocumentModelField;
    modelField: FieldModel;
    fieldPath: FieldPath;
    objectModel: ModelWithSource<ObjectModel>;
}

export interface CustomActionObjectModelRunParams extends CustomActionObjectModelStateParams {
    contentSourceActions: ContentSourceActions;
}

export interface CustomActionObjectField extends CustomActionCommonParams {
    type: 'object';
    state?: CustomActionStateFunction<CustomActionObjectFieldStateParams>;
    run: CustomActionRunFunction<CustomActionObjectFieldRunParams>;
    permissions?: CustomActionPermissionsFunction<CustomActionObjectFieldStateParams>;
}

export interface CustomActionObjectFieldStateParams {
    parentDocument: DocumentWithSource;
    parentModel: ModelWithSource;
    documentField: DocumentObjectField;
    modelField: FieldObject;
    fieldPath: FieldPath;
}

export interface CustomActionObjectFieldRunParams extends CustomActionObjectFieldStateParams {
    contentSourceActions: ContentSourceActions;
}

export interface CustomActionField extends CustomActionCommonParams {
    type?: 'field';
    state?: CustomActionStateFunction<CustomActionFieldStateParams>;
    run: CustomActionRunFunction<CustomActionFieldRunParams>;
    permissions?: CustomActionPermissionsFunction<CustomActionFieldStateParams>;
}

export interface CustomActionFieldStateParams {
    parentDocument: DocumentWithSource;
    parentModel: ModelWithSource;
    documentField?: DocumentField;
    modelField: Field;
    fieldPath: FieldPath;
}

export interface CustomActionFieldRunParams extends CustomActionFieldStateParams {
    contentSourceActions: ContentSourceActions;
}

export interface CustomActionCommonParams {
    name: string;
    label?: string;
    icon?: (typeof ICONS)[number];
    hidden?: boolean;
    preferredStyle?: 'button-primary' | 'button-secondary';
    inputFields?: CustomActionInputField[];
}

export type CustomActionStateFunction<T = unknown> = (
    options: CustomActionStateCommonOptions & T
) => Promise<CustomActionState>;
export type CustomActionRunFunction<T = unknown> = (
    options: CustomActionRunCommonOptions & T
) => Promise<CustomActionResult | void>;
export type CustomActionPermissionsFunction<T = unknown> = (
    options: CustomActionPermissionsCommonOptions & T
) => CustomActionPermissions | undefined;

export type CustomActionPermissions = {
    canExecute?: boolean;
};

export type CustomActionState = 'enabled' | 'running' | 'disabled';

export interface CustomActionStateCommonOptions extends ConfigDelegate {
    actionId: string;
    currentLocale?: string;
    currentUser?: User;
    currentPageUrl?: string;
    currentPageDocument?: DocumentWithSource;
}

export interface CustomActionPermissionsCommonOptions extends ConfigDelegate {
    actionId: string;
    currentLocale?: string;
    userContext: User;
    currentPageUrl?: string;
    currentPageDocument?: DocumentWithSource;
}

export interface CustomActionRunCommonOptions
    extends ConfigDelegate,
        Pick<DocumentHookBaseOptions, 'getContentSourceActionsForSource' | 'getUserContextForContentSourceType'> {
    actionId: string;
    inputData?: Record<string, any>;
    currentLocale?: string;
    currentUser?: User;
    currentPageUrl?: string;
    currentPageDocument?: DocumentWithSource;
}

export interface CustomActionResult {
    state?: CustomActionState;
    success?: string;
    error?: string;
    result?: any;
}

export type CustomActionInputField =
    | FieldString
    | FieldUrl
    | FieldSlug
    | FieldText
    | FieldMarkdown
    | FieldHtml
    | FieldNumber
    | FieldBoolean
    | FieldDate
    | FieldDatetime
    | FieldColor
    | FieldEnum
    | FieldReference;
