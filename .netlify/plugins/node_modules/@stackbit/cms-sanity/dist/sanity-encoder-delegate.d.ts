export = SanityEncoderDelegate;
declare class SanityEncoderDelegate {
    constructor({ schema, projectId, projectUrl, dataset, noEncodeFields, omitFields, encodedFieldTypes }: {
        schema: any;
        projectId: any;
        projectUrl: any;
        dataset: any;
        noEncodeFields?: any[] | undefined;
        omitFields?: any[] | undefined;
        encodedFieldTypes?: null | undefined;
    });
    projectId: any;
    projectUrl: any;
    dataset: any;
    schema: any;
    models: any;
    modelsByName: _.Dictionary<any>;
    noEncodeFields: any[];
    omitFields: any[];
    encodedFieldTypes: any;
    getModelsByName(): _.Dictionary<any>;
    getEncodedFieldTypes(): any;
    getNoEncodeFields(): any[];
    getItemId(item: any): any;
    getReferenceId(item: any): any;
    getItemType(item: any): any;
    getModelForRootItem(rootItem: any): any;
    getItemTypeForListItem(listItem: any, fieldModel: any): any;
    isLinkItem(item: any): boolean;
    getModelForItemOfReferenceType(item: any): any;
    getModelForItemOfModelsType(item: any): any;
    getItemMetadata(item: any, model: any): {
        type: string;
        isChanged: boolean;
        status: string;
        createdAt: any;
        updatedAt: any;
        srcType: string;
        srcProjectId: any;
        srcProjectUrl: any;
        srcEnvironment: any;
        srcObjectId: any;
        srcObjectUrl: any;
        srcObjectLabel: any;
        srcModelName: "__image_model";
        srcModelLabel: string;
    } | {
        type: string;
        isChanged: boolean;
        status: string;
        createdAt: any;
        updatedAt: any;
        srcType: string;
        srcProjectId: any;
        srcProjectUrl: any;
        srcEnvironment: any;
        srcObjectId: any;
        srcObjectUrl: string;
        srcObjectLabel: any;
        srcModelName: any;
        srcModelLabel: any;
    } | {
        type: string;
        srcObjectLabel: any;
        srcModelName: any;
        srcModelLabel: any;
        isChanged?: undefined;
        status?: undefined;
        createdAt?: undefined;
        updatedAt?: undefined;
        srcType?: undefined;
        srcProjectId?: undefined;
        srcProjectUrl?: undefined;
        srcEnvironment?: undefined;
        srcObjectId?: undefined;
        srcObjectUrl?: undefined;
    };
    getItemLabelFieldValue(item: any, model: any): any;
    getItemFields(item: any, model: any): {
        name: string;
        value: never;
        encodedDataPath: string[];
        unset: boolean;
    }[];
    encodeField(fieldValue: any, fieldModel: any): {
        encodedData: {
            _type: string;
            style: string;
            children: {
                _type: string;
                text: string;
            }[];
        }[];
        encodedFieldPath: (string | number)[];
        fieldData: {
            hint: string;
            multiElement: boolean;
        };
    } | {
        fieldData: {
            isUnset: boolean;
            fields?: undefined;
            type?: undefined;
            refId?: undefined;
            refType?: undefined;
        };
    } | {
        fieldData: {
            fields: {
                title: {
                    type: string;
                    value: any;
                };
                url: {
                    type: string;
                    value: any;
                };
            };
            isUnset?: undefined;
            type?: undefined;
            refId?: undefined;
            refType?: undefined;
        };
    } | {
        fieldData: {
            type: string;
            refId: any;
            refType: any;
            isUnset?: undefined;
            fields?: undefined;
        };
    } | null;
    _encodeRichText(fieldValue: any): {
        encodedData: {
            _type: string;
            style: string;
            children: {
                _type: string;
                text: string;
            }[];
        }[];
        encodedFieldPath: (string | number)[];
        fieldData: {
            hint: string;
            multiElement: boolean;
        };
    };
    _flattenRichText(richTextArray: any): string;
}
import _ = require("lodash");
//# sourceMappingURL=sanity-encoder-delegate.d.ts.map